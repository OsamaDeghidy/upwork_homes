[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "ProtocolTypeRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "URLRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "AllowedHostsOriginValidator",
        "importPath": "channels.security.websocket",
        "description": "channels.security.websocket",
        "isExtraImport": true,
        "detail": "channels.security.websocket",
        "documentation": {}
    },
    {
        "label": "JWTAuthMiddlewareStack",
        "importPath": "messaging.middleware",
        "description": "messaging.middleware",
        "isExtraImport": true,
        "detail": "messaging.middleware",
        "documentation": {}
    },
    {
        "label": "websocket_urlpatterns",
        "importPath": "messaging.routing",
        "description": "messaging.routing",
        "isExtraImport": true,
        "detail": "messaging.routing",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "SpectacularAPIView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "SpectacularSwaggerView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "SpectacularRedocView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "phonenumber_field.modelfields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "phonenumber_field.modelfields",
        "description": "phonenumber_field.modelfields",
        "detail": "phonenumber_field.modelfields",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "RegexValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "FileExtensionValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "validate_password",
        "importPath": "django.contrib.auth.password_validation",
        "description": "django.contrib.auth.password_validation",
        "isExtraImport": true,
        "detail": "django.contrib.auth.password_validation",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "PhoneNumberField",
        "importPath": "phonenumber_field.serializerfields",
        "description": "phonenumber_field.serializerfields",
        "isExtraImport": true,
        "detail": "phonenumber_field.serializerfields",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "SearchFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "SearchFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "SearchFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "SearchFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "SearchFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "SearchFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "OpenApiParameter",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema_field",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "OpenApiParameter",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "OpenApiTypes",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "OpenApiParameter",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "OpenApiParameter",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "OpenApiParameter",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "OpenApiParameter",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "OpenApiParameter",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "OpenApiTypes",
        "importPath": "drf_spectacular.types",
        "description": "drf_spectacular.types",
        "isExtraImport": true,
        "detail": "drf_spectacular.types",
        "documentation": {}
    },
    {
        "label": "OpenApiTypes",
        "importPath": "drf_spectacular.types",
        "description": "drf_spectacular.types",
        "isExtraImport": true,
        "detail": "drf_spectacular.types",
        "documentation": {}
    },
    {
        "label": "OpenApiTypes",
        "importPath": "drf_spectacular.types",
        "description": "drf_spectacular.types",
        "isExtraImport": true,
        "detail": "drf_spectacular.types",
        "documentation": {}
    },
    {
        "label": "OpenApiTypes",
        "importPath": "drf_spectacular.types",
        "description": "drf_spectacular.types",
        "isExtraImport": true,
        "detail": "drf_spectacular.types",
        "documentation": {}
    },
    {
        "label": "OpenApiTypes",
        "importPath": "drf_spectacular.types",
        "description": "drf_spectacular.types",
        "isExtraImport": true,
        "detail": "drf_spectacular.types",
        "documentation": {}
    },
    {
        "label": "OpenApiTypes",
        "importPath": "drf_spectacular.types",
        "description": "drf_spectacular.types",
        "isExtraImport": true,
        "detail": "drf_spectacular.types",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "projects.models",
        "description": "projects.models",
        "isExtraImport": true,
        "detail": "projects.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "projects.models",
        "description": "projects.models",
        "isExtraImport": true,
        "detail": "projects.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "projects.models",
        "description": "projects.models",
        "isExtraImport": true,
        "detail": "projects.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "projects.models",
        "description": "projects.models",
        "isExtraImport": true,
        "detail": "projects.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "projects.models",
        "description": "projects.models",
        "isExtraImport": true,
        "detail": "projects.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "projects.models",
        "description": "projects.models",
        "isExtraImport": true,
        "detail": "projects.models",
        "documentation": {}
    },
    {
        "label": "ProjectImage",
        "importPath": "projects.models",
        "description": "projects.models",
        "isExtraImport": true,
        "detail": "projects.models",
        "documentation": {}
    },
    {
        "label": "ProjectFile",
        "importPath": "projects.models",
        "description": "projects.models",
        "isExtraImport": true,
        "detail": "projects.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "projects.models",
        "description": "projects.models",
        "isExtraImport": true,
        "detail": "projects.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "projects.models",
        "description": "projects.models",
        "isExtraImport": true,
        "detail": "projects.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "projects.models",
        "description": "projects.models",
        "isExtraImport": true,
        "detail": "projects.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "projects.models",
        "description": "projects.models",
        "isExtraImport": true,
        "detail": "projects.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "projects.models",
        "description": "projects.models",
        "isExtraImport": true,
        "detail": "projects.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "projects.models",
        "description": "projects.models",
        "isExtraImport": true,
        "detail": "projects.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "projects.models",
        "description": "projects.models",
        "isExtraImport": true,
        "detail": "projects.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "projects.models",
        "description": "projects.models",
        "isExtraImport": true,
        "detail": "projects.models",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "UserLocation",
        "importPath": "location_services.models",
        "description": "location_services.models",
        "isExtraImport": true,
        "detail": "location_services.models",
        "documentation": {}
    },
    {
        "label": "Address",
        "importPath": "location_services.models",
        "description": "location_services.models",
        "isExtraImport": true,
        "detail": "location_services.models",
        "documentation": {}
    },
    {
        "label": "Country",
        "importPath": "location_services.models",
        "description": "location_services.models",
        "isExtraImport": true,
        "detail": "location_services.models",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "location_services.models",
        "description": "location_services.models",
        "isExtraImport": true,
        "detail": "location_services.models",
        "documentation": {}
    },
    {
        "label": "Country",
        "importPath": "location_services.models",
        "description": "location_services.models",
        "isExtraImport": true,
        "detail": "location_services.models",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "location_services.models",
        "description": "location_services.models",
        "isExtraImport": true,
        "detail": "location_services.models",
        "documentation": {}
    },
    {
        "label": "UserLocationSerializer",
        "importPath": "location_services.serializers",
        "description": "location_services.serializers",
        "isExtraImport": true,
        "detail": "location_services.serializers",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "calendar_app.models",
        "description": "calendar_app.models",
        "isExtraImport": true,
        "detail": "calendar_app.models",
        "documentation": {}
    },
    {
        "label": "AppointmentSerializer",
        "importPath": "calendar_app.serializers",
        "description": "calendar_app.serializers",
        "isExtraImport": true,
        "detail": "calendar_app.serializers",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "payments.models",
        "description": "payments.models",
        "isExtraImport": true,
        "detail": "payments.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "payments.models",
        "description": "payments.models",
        "isExtraImport": true,
        "detail": "payments.models",
        "documentation": {}
    },
    {
        "label": "Currency",
        "importPath": "payments.models",
        "description": "payments.models",
        "isExtraImport": true,
        "detail": "payments.models",
        "documentation": {}
    },
    {
        "label": "Wallet",
        "importPath": "payments.models",
        "description": "payments.models",
        "isExtraImport": true,
        "detail": "payments.models",
        "documentation": {}
    },
    {
        "label": "PaymentMethod",
        "importPath": "payments.models",
        "description": "payments.models",
        "isExtraImport": true,
        "detail": "payments.models",
        "documentation": {}
    },
    {
        "label": "EscrowAccount",
        "importPath": "payments.models",
        "description": "payments.models",
        "isExtraImport": true,
        "detail": "payments.models",
        "documentation": {}
    },
    {
        "label": "PaymentSerializer",
        "importPath": "payments.serializers",
        "description": "payments.serializers",
        "isExtraImport": true,
        "detail": "payments.serializers",
        "documentation": {}
    },
    {
        "label": "Proposal",
        "importPath": "proposals.models",
        "description": "proposals.models",
        "isExtraImport": true,
        "detail": "proposals.models",
        "documentation": {}
    },
    {
        "label": "Proposal",
        "importPath": "proposals.models",
        "description": "proposals.models",
        "isExtraImport": true,
        "detail": "proposals.models",
        "documentation": {}
    },
    {
        "label": "Proposal",
        "importPath": "proposals.models",
        "description": "proposals.models",
        "isExtraImport": true,
        "detail": "proposals.models",
        "documentation": {}
    },
    {
        "label": "Proposal",
        "importPath": "proposals.models",
        "description": "proposals.models",
        "isExtraImport": true,
        "detail": "proposals.models",
        "documentation": {}
    },
    {
        "label": "Contract",
        "importPath": "contracts.models",
        "description": "contracts.models",
        "isExtraImport": true,
        "detail": "contracts.models",
        "documentation": {}
    },
    {
        "label": "Contract",
        "importPath": "contracts.models",
        "description": "contracts.models",
        "isExtraImport": true,
        "detail": "contracts.models",
        "documentation": {}
    },
    {
        "label": "Contract",
        "importPath": "contracts.models",
        "description": "contracts.models",
        "isExtraImport": true,
        "detail": "contracts.models",
        "documentation": {}
    },
    {
        "label": "ContractMilestone",
        "importPath": "contracts.models",
        "description": "contracts.models",
        "isExtraImport": true,
        "detail": "contracts.models",
        "documentation": {}
    },
    {
        "label": "Contract",
        "importPath": "contracts.models",
        "description": "contracts.models",
        "isExtraImport": true,
        "detail": "contracts.models",
        "documentation": {}
    },
    {
        "label": "ContractMilestone",
        "importPath": "contracts.models",
        "description": "contracts.models",
        "isExtraImport": true,
        "detail": "contracts.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "messaging.models",
        "description": "messaging.models",
        "isExtraImport": true,
        "detail": "messaging.models",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "importPath": "messaging.models",
        "description": "messaging.models",
        "isExtraImport": true,
        "detail": "messaging.models",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "importPath": "messaging.models",
        "description": "messaging.models",
        "isExtraImport": true,
        "detail": "messaging.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "messaging.models",
        "description": "messaging.models",
        "isExtraImport": true,
        "detail": "messaging.models",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "reviews.models",
        "description": "reviews.models",
        "isExtraImport": true,
        "detail": "reviews.models",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "reviews.models",
        "description": "reviews.models",
        "isExtraImport": true,
        "detail": "reviews.models",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "file_management.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "file_management.models",
        "description": "file_management.models",
        "detail": "file_management.models",
        "documentation": {}
    },
    {
        "label": "SimpleUploadedFile",
        "importPath": "django.core.files.uploadedfile",
        "description": "django.core.files.uploadedfile",
        "isExtraImport": true,
        "detail": "django.core.files.uploadedfile",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncWebsocketConsumer",
        "importPath": "channels.generic.websocket",
        "description": "channels.generic.websocket",
        "isExtraImport": true,
        "detail": "channels.generic.websocket",
        "documentation": {}
    },
    {
        "label": "database_sync_to_async",
        "importPath": "channels.db",
        "description": "channels.db",
        "isExtraImport": true,
        "detail": "channels.db",
        "documentation": {}
    },
    {
        "label": "database_sync_to_async",
        "importPath": "channels.db",
        "description": "channels.db",
        "isExtraImport": true,
        "detail": "channels.db",
        "documentation": {}
    },
    {
        "label": "BaseMiddleware",
        "importPath": "channels.middleware",
        "description": "channels.middleware",
        "isExtraImport": true,
        "detail": "channels.middleware",
        "documentation": {}
    },
    {
        "label": "parse_qs",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "get_channel_layer",
        "importPath": "channels.layers",
        "description": "channels.layers",
        "isExtraImport": true,
        "detail": "channels.layers",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "django_filters",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_filters",
        "description": "django_filters",
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "SubscriptionPlan",
        "importPath": "subscriptions.models",
        "description": "subscriptions.models",
        "isExtraImport": true,
        "detail": "subscriptions.models",
        "documentation": {}
    },
    {
        "label": "Subscription",
        "importPath": "subscriptions.models",
        "description": "subscriptions.models",
        "isExtraImport": true,
        "detail": "subscriptions.models",
        "documentation": {}
    },
    {
        "label": "SubscriptionPlan",
        "importPath": "subscriptions.models",
        "description": "subscriptions.models",
        "isExtraImport": true,
        "detail": "subscriptions.models",
        "documentation": {}
    },
    {
        "label": "SubscriptionFeature",
        "importPath": "subscriptions.models",
        "description": "subscriptions.models",
        "isExtraImport": true,
        "detail": "subscriptions.models",
        "documentation": {}
    },
    {
        "label": "PlanFeature",
        "importPath": "subscriptions.models",
        "description": "subscriptions.models",
        "isExtraImport": true,
        "detail": "subscriptions.models",
        "documentation": {}
    },
    {
        "label": "PortfolioItem",
        "importPath": "portfolio.models",
        "description": "portfolio.models",
        "isExtraImport": true,
        "detail": "portfolio.models",
        "documentation": {}
    },
    {
        "label": "PortfolioImage",
        "importPath": "portfolio.models",
        "description": "portfolio.models",
        "isExtraImport": true,
        "detail": "portfolio.models",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "tasks.models",
        "description": "tasks.models",
        "isExtraImport": true,
        "detail": "tasks.models",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "stripe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stripe",
        "description": "stripe",
        "detail": "stripe",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "client.node_modules.flatted.python.flatted",
        "description": "client.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "client.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "client.node_modules.flatted.python.flatted",
        "description": "client.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "client.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "client.node_modules.flatted.python.flatted",
        "description": "client.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "client.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "client.node_modules.flatted.python.flatted",
        "description": "client.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "client.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "django_asgi_app",
        "kind": 5,
        "importPath": "server.alist_backend.asgi",
        "description": "server.alist_backend.asgi",
        "peekOfCode": "django_asgi_app = get_asgi_application()\n# Import after Django is initialized\nfrom messaging.middleware import JWTAuthMiddlewareStack\nfrom messaging.routing import websocket_urlpatterns\napplication = ProtocolTypeRouter({\n    \"http\": django_asgi_app,\n    \"websocket\": AllowedHostsOriginValidator(\n        JWTAuthMiddlewareStack(\n            URLRouter(websocket_urlpatterns)\n        )",
        "detail": "server.alist_backend.asgi",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "server.alist_backend.asgi",
        "description": "server.alist_backend.asgi",
        "peekOfCode": "application = ProtocolTypeRouter({\n    \"http\": django_asgi_app,\n    \"websocket\": AllowedHostsOriginValidator(\n        JWTAuthMiddlewareStack(\n            URLRouter(websocket_urlpatterns)\n        )\n    ),\n})",
        "detail": "server.alist_backend.asgi",
        "documentation": {}
    },
    {
        "label": "debug_task",
        "kind": 2,
        "importPath": "server.alist_backend.celery",
        "description": "server.alist_backend.celery",
        "peekOfCode": "def debug_task(self):\n    print(f'Request: {self.request!r}')",
        "detail": "server.alist_backend.celery",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "server.alist_backend.celery",
        "description": "server.alist_backend.celery",
        "peekOfCode": "app = Celery('alist_backend')\n# Using a string here means the worker doesn't have to serialize\n# the configuration object to child processes.\n# - namespace='CELERY' means all celery-related configuration keys\n#   should have a `CELERY_` prefix.\napp.config_from_object('django.conf:settings', namespace='CELERY')\n# Load task modules from all registered Django apps.\napp.autodiscover_tasks()\n# Celery beat schedule\napp.conf.beat_schedule = {",
        "detail": "server.alist_backend.celery",
        "documentation": {}
    },
    {
        "label": "app.conf.beat_schedule",
        "kind": 5,
        "importPath": "server.alist_backend.celery",
        "description": "server.alist_backend.celery",
        "peekOfCode": "app.conf.beat_schedule = {\n    'send-notification-emails': {\n        'task': 'notifications.tasks.send_notification_emails',\n        'schedule': 300.0,  # Run every 5 minutes\n    },\n    'update-project-stats': {\n        'task': 'projects.tasks.update_project_statistics',\n        'schedule': 3600.0,  # Run every hour\n    },\n    'cleanup-old-sessions': {",
        "detail": "server.alist_backend.celery",
        "documentation": {}
    },
    {
        "label": "app.conf.timezone",
        "kind": 5,
        "importPath": "server.alist_backend.celery",
        "description": "server.alist_backend.celery",
        "peekOfCode": "app.conf.timezone = 'UTC'\n@app.task(bind=True)\ndef debug_task(self):\n    print(f'Request: {self.request!r}')",
        "detail": "server.alist_backend.celery",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-your-secret-key-here-change-in-production')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'\nALLOWED_HOSTS = ['localhost', '127.0.0.1', '*']\n# Application definition\nDJANGO_APPS = [",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-your-secret-key-here-change-in-production')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'\nALLOWED_HOSTS = ['localhost', '127.0.0.1', '*']\n# Application definition\nDJANGO_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'\nALLOWED_HOSTS = ['localhost', '127.0.0.1', '*']\n# Application definition\nDJANGO_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['localhost', '127.0.0.1', '*']\n# Application definition\nDJANGO_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "DJANGO_APPS",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "DJANGO_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\nTHIRD_PARTY_APPS = [\n    'rest_framework',",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "THIRD_PARTY_APPS",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "THIRD_PARTY_APPS = [\n    'rest_framework',\n    'rest_framework.authtoken',\n    'rest_framework_simplejwt',\n    'corsheaders',\n    'django_filters',\n    'channels',\n    'drf_spectacular',\n    'django_extensions',\n    'phonenumber_field',",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "LOCAL_APPS",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "LOCAL_APPS = [\n    'authentication',\n    'projects',\n    'proposals',\n    'contracts',\n    'payments',\n    'messaging',\n    'reviews',\n    'calendar_app',\n    'time_tracking',",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS\nMIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    # 'django.middleware.csrf.CsrfViewMiddleware',  # Disabled for API\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    # 'django.middleware.csrf.CsrfViewMiddleware',  # Disabled for API\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "ROOT_URLCONF = 'alist_backend.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "WSGI_APPLICATION = 'alist_backend.wsgi.application'\nASGI_APPLICATION = 'alist_backend.asgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "ASGI_APPLICATION",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "ASGI_APPLICATION = 'alist_backend.asgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# For production, use PostgreSQL",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# For production, use PostgreSQL\nif os.environ.get('DATABASE_URL'):\n    import dj_database_url\n    DATABASES['default'] = dj_database_url.parse(os.environ.get('DATABASE_URL'))",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static',",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static',\n]",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static',\n]\n# Media files",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static',\n]\n# Media files\nMEDIA_URL = '/media/'",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static',\n]\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static',\n]\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    BASE_DIR / 'static',\n]\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom User Model",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom User Model\nAUTH_USER_MODEL = 'authentication.User'\n# REST Framework Configuration\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom User Model\nAUTH_USER_MODEL = 'authentication.User'\n# REST Framework Configuration\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework_simplejwt.authentication.JWTAuthentication',",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom User Model\nAUTH_USER_MODEL = 'authentication.User'\n# REST Framework Configuration\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'authentication.User'\n# REST Framework Configuration\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 20,",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),\n    'ROTATE_REFRESH_TOKENS': True,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'UPDATE_LAST_LOGIN': True,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,\n    'VERIFYING_KEY': None,\n    'AUDIENCE': None,",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",\n    \"http://127.0.0.1:3000\",\n    \"http://localhost:8000\",\n    \"http://127.0.0.1:8000\",\n]\nCORS_ALLOW_CREDENTIALS = True\nCORS_ALLOW_ALL_ORIGINS = DEBUG  # Only in development\n# Additional CORS settings\nCORS_ALLOW_METHODS = [",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\nCORS_ALLOW_ALL_ORIGINS = DEBUG  # Only in development\n# Additional CORS settings\nCORS_ALLOW_METHODS = [\n    'DELETE',\n    'GET',\n    'OPTIONS',\n    'PATCH',\n    'POST',\n    'PUT',",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = DEBUG  # Only in development\n# Additional CORS settings\nCORS_ALLOW_METHODS = [\n    'DELETE',\n    'GET',\n    'OPTIONS',\n    'PATCH',\n    'POST',\n    'PUT',\n]",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_METHODS",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "CORS_ALLOW_METHODS = [\n    'DELETE',\n    'GET',\n    'OPTIONS',\n    'PATCH',\n    'POST',\n    'PUT',\n]\nCORS_ALLOW_HEADERS = [\n    'accept',",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_HEADERS",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "CORS_ALLOW_HEADERS = [\n    'accept',\n    'accept-encoding',\n    'authorization',\n    'content-type',\n    'dnt',\n    'origin',\n    'user-agent',\n    'x-csrftoken',\n    'x-requested-with',",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "CACHES",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "CACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n        'LOCATION': 'unique-snowflake',\n    }\n}\n# For production, use Redis\nif os.environ.get('REDIS_URL'):\n    CACHES = {\n        'default': {",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_BROKER_URL",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "CELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')\nCELERY_RESULT_BACKEND = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'UTC'\nCELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'\n# Email Configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_BACKEND",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "CELERY_RESULT_BACKEND = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'UTC'\nCELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'\n# Email Configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')\nEMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_ACCEPT_CONTENT",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "CELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'UTC'\nCELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'\n# Email Configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')\nEMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))\nEMAIL_USE_TLS = True",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_SERIALIZER",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "CELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'UTC'\nCELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'\n# Email Configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')\nEMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_SERIALIZER",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "CELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'UTC'\nCELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'\n# Email Configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')\nEMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TIMEZONE",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "CELERY_TIMEZONE = 'UTC'\nCELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'\n# Email Configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')\nEMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_BEAT_SCHEDULER",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'\n# Email Configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')\nEMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\n# Stripe Configuration",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')\nEMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\n# Stripe Configuration\nSTRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY', '')\nSTRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', '')",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')\nEMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\n# Stripe Configuration\nSTRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY', '')\nSTRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', '')\nSTRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET', '')",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\n# Stripe Configuration\nSTRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY', '')\nSTRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', '')\nSTRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET', '')\n# Twilio Configuration",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\n# Stripe Configuration\nSTRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY', '')\nSTRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', '')\nSTRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET', '')\n# Twilio Configuration\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID', '')",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\n# Stripe Configuration\nSTRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY', '')\nSTRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', '')\nSTRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET', '')\n# Twilio Configuration\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID', '')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN', '')",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\n# Stripe Configuration\nSTRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY', '')\nSTRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', '')\nSTRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET', '')\n# Twilio Configuration\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID', '')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN', '')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER', '')",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FROM_EMAIL",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "DEFAULT_FROM_EMAIL = EMAIL_HOST_USER\n# Stripe Configuration\nSTRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY', '')\nSTRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', '')\nSTRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET', '')\n# Twilio Configuration\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID', '')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN', '')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER', '')\n# File Upload Configuration",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "STRIPE_PUBLISHABLE_KEY",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "STRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY', '')\nSTRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', '')\nSTRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET', '')\n# Twilio Configuration\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID', '')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN', '')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER', '')\n# File Upload Configuration\nFILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # 5MB\nDATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "STRIPE_SECRET_KEY",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', '')\nSTRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET', '')\n# Twilio Configuration\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID', '')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN', '')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER', '')\n# File Upload Configuration\nFILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # 5MB\nDATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB\n# Security Settings",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "STRIPE_WEBHOOK_SECRET",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "STRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET', '')\n# Twilio Configuration\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID', '')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN', '')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER', '')\n# File Upload Configuration\nFILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # 5MB\nDATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB\n# Security Settings\nSECURE_BROWSER_XSS_FILTER = True",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "TWILIO_ACCOUNT_SID",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "TWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID', '')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN', '')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER', '')\n# File Upload Configuration\nFILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # 5MB\nDATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB\n# Security Settings\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "TWILIO_AUTH_TOKEN",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "TWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN', '')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER', '')\n# File Upload Configuration\nFILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # 5MB\nDATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB\n# Security Settings\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n# API Documentation",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "TWILIO_PHONE_NUMBER",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "TWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER', '')\n# File Upload Configuration\nFILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # 5MB\nDATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB\n# Security Settings\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n# API Documentation\nSPECTACULAR_SETTINGS = {",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "FILE_UPLOAD_MAX_MEMORY_SIZE",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "FILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # 5MB\nDATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB\n# Security Settings\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n# API Documentation\nSPECTACULAR_SETTINGS = {\n    'TITLE': 'A-List Home Professionals API',\n    'DESCRIPTION': 'Complete API documentation for A-List Home Professionals platform - Professional home services marketplace',",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "DATA_UPLOAD_MAX_MEMORY_SIZE",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB\n# Security Settings\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n# API Documentation\nSPECTACULAR_SETTINGS = {\n    'TITLE': 'A-List Home Professionals API',\n    'DESCRIPTION': 'Complete API documentation for A-List Home Professionals platform - Professional home services marketplace',\n    'VERSION': '1.0.0',",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "SECURE_BROWSER_XSS_FILTER",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "SECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n# API Documentation\nSPECTACULAR_SETTINGS = {\n    'TITLE': 'A-List Home Professionals API',\n    'DESCRIPTION': 'Complete API documentation for A-List Home Professionals platform - Professional home services marketplace',\n    'VERSION': '1.0.0',\n    'SERVE_INCLUDE_SCHEMA': False,\n    'COMPONENT_SPLIT_REQUEST': True,",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "SECURE_CONTENT_TYPE_NOSNIFF",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "SECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n# API Documentation\nSPECTACULAR_SETTINGS = {\n    'TITLE': 'A-List Home Professionals API',\n    'DESCRIPTION': 'Complete API documentation for A-List Home Professionals platform - Professional home services marketplace',\n    'VERSION': '1.0.0',\n    'SERVE_INCLUDE_SCHEMA': False,\n    'COMPONENT_SPLIT_REQUEST': True,\n    'SWAGGER_UI_DIST': 'https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.9.0',",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "X_FRAME_OPTIONS",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "X_FRAME_OPTIONS = 'DENY'\n# API Documentation\nSPECTACULAR_SETTINGS = {\n    'TITLE': 'A-List Home Professionals API',\n    'DESCRIPTION': 'Complete API documentation for A-List Home Professionals platform - Professional home services marketplace',\n    'VERSION': '1.0.0',\n    'SERVE_INCLUDE_SCHEMA': False,\n    'COMPONENT_SPLIT_REQUEST': True,\n    'SWAGGER_UI_DIST': 'https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.9.0',\n    'SWAGGER_UI_FAVICON_HREF': 'https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.9.0/favicon-32x32.png',",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "SPECTACULAR_SETTINGS",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "SPECTACULAR_SETTINGS = {\n    'TITLE': 'A-List Home Professionals API',\n    'DESCRIPTION': 'Complete API documentation for A-List Home Professionals platform - Professional home services marketplace',\n    'VERSION': '1.0.0',\n    'SERVE_INCLUDE_SCHEMA': False,\n    'COMPONENT_SPLIT_REQUEST': True,\n    'SWAGGER_UI_DIST': 'https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.9.0',\n    'SWAGGER_UI_FAVICON_HREF': 'https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.9.0/favicon-32x32.png',\n    'REDOC_DIST': 'https://cdnjs.cloudflare.com/ajax/libs/redoc/2.1.3',\n    'SCHEMA_PATH_PREFIX': r'/api/',",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'verbose': {\n            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',\n            'style': '{',\n        },\n        'simple': {\n            'format': '{levelname} {message}',",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "PHONENUMBER_DEFAULT_REGION",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "PHONENUMBER_DEFAULT_REGION = 'US'\nPHONENUMBER_DB_FORMAT = 'NATIONAL'\nPHONENUMBER_DEFAULT_FORMAT = 'NATIONAL'",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "PHONENUMBER_DB_FORMAT",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "PHONENUMBER_DB_FORMAT = 'NATIONAL'\nPHONENUMBER_DEFAULT_FORMAT = 'NATIONAL'",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "PHONENUMBER_DEFAULT_FORMAT",
        "kind": 5,
        "importPath": "server.alist_backend.settings",
        "description": "server.alist_backend.settings",
        "peekOfCode": "PHONENUMBER_DEFAULT_FORMAT = 'NATIONAL'",
        "detail": "server.alist_backend.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.alist_backend.urls",
        "description": "server.alist_backend.urls",
        "peekOfCode": "urlpatterns = [\n    # Admin\n    path('admin/', admin.site.urls),\n    # API Documentation\n    path('api/schema/', SpectacularAPIView.as_view(), name='schema'),\n    path('api/docs/', SpectacularSwaggerView.as_view(url_name='schema'), name='swagger-ui'),\n    path('api/redoc/', SpectacularRedocView.as_view(url_name='schema'), name='redoc'),\n    # JWT Authentication\n    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),",
        "detail": "server.alist_backend.urls",
        "documentation": {}
    },
    {
        "label": "handler400",
        "kind": 5,
        "importPath": "server.alist_backend.urls",
        "description": "server.alist_backend.urls",
        "peekOfCode": "handler400 = 'alist_backend.views.bad_request'\nhandler403 = 'alist_backend.views.permission_denied'\nhandler404 = 'alist_backend.views.page_not_found'\nhandler500 = 'alist_backend.views.server_error'",
        "detail": "server.alist_backend.urls",
        "documentation": {}
    },
    {
        "label": "handler403",
        "kind": 5,
        "importPath": "server.alist_backend.urls",
        "description": "server.alist_backend.urls",
        "peekOfCode": "handler403 = 'alist_backend.views.permission_denied'\nhandler404 = 'alist_backend.views.page_not_found'\nhandler500 = 'alist_backend.views.server_error'",
        "detail": "server.alist_backend.urls",
        "documentation": {}
    },
    {
        "label": "handler404",
        "kind": 5,
        "importPath": "server.alist_backend.urls",
        "description": "server.alist_backend.urls",
        "peekOfCode": "handler404 = 'alist_backend.views.page_not_found'\nhandler500 = 'alist_backend.views.server_error'",
        "detail": "server.alist_backend.urls",
        "documentation": {}
    },
    {
        "label": "handler500",
        "kind": 5,
        "importPath": "server.alist_backend.urls",
        "description": "server.alist_backend.urls",
        "peekOfCode": "handler500 = 'alist_backend.views.server_error'",
        "detail": "server.alist_backend.urls",
        "documentation": {}
    },
    {
        "label": "bad_request",
        "kind": 2,
        "importPath": "server.alist_backend.views",
        "description": "server.alist_backend.views",
        "peekOfCode": "def bad_request(request, exception):\n    \"\"\"\n    400 Bad Request Error Handler\n    \"\"\"\n    logger.warning(f\"Bad request: {request.path} - {exception}\")\n    return JsonResponse({\n        'error': 'Bad Request',\n        'message': 'The request could not be understood by the server.',\n        'status_code': 400\n    }, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "server.alist_backend.views",
        "documentation": {}
    },
    {
        "label": "permission_denied",
        "kind": 2,
        "importPath": "server.alist_backend.views",
        "description": "server.alist_backend.views",
        "peekOfCode": "def permission_denied(request, exception):\n    \"\"\"\n    403 Permission Denied Error Handler\n    \"\"\"\n    logger.warning(f\"Permission denied: {request.path} - {exception}\")\n    return JsonResponse({\n        'error': 'Permission Denied',\n        'message': 'You do not have permission to access this resource.',\n        'status_code': 403\n    }, status=status.HTTP_403_FORBIDDEN)",
        "detail": "server.alist_backend.views",
        "documentation": {}
    },
    {
        "label": "page_not_found",
        "kind": 2,
        "importPath": "server.alist_backend.views",
        "description": "server.alist_backend.views",
        "peekOfCode": "def page_not_found(request, exception):\n    \"\"\"\n    404 Page Not Found Error Handler\n    \"\"\"\n    logger.warning(f\"Page not found: {request.path}\")\n    return JsonResponse({\n        'error': 'Not Found',\n        'message': 'The requested resource could not be found.',\n        'status_code': 404\n    }, status=status.HTTP_404_NOT_FOUND)",
        "detail": "server.alist_backend.views",
        "documentation": {}
    },
    {
        "label": "server_error",
        "kind": 2,
        "importPath": "server.alist_backend.views",
        "description": "server.alist_backend.views",
        "peekOfCode": "def server_error(request):\n    \"\"\"\n    500 Internal Server Error Handler\n    \"\"\"\n    logger.error(f\"Server error: {request.path}\")\n    return JsonResponse({\n        'error': 'Internal Server Error',\n        'message': 'An unexpected error occurred. Please try again later.',\n        'status_code': 500\n    }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)",
        "detail": "server.alist_backend.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "server.alist_backend.views",
        "description": "server.alist_backend.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef bad_request(request, exception):\n    \"\"\"\n    400 Bad Request Error Handler\n    \"\"\"\n    logger.warning(f\"Bad request: {request.path} - {exception}\")\n    return JsonResponse({\n        'error': 'Bad Request',\n        'message': 'The request could not be understood by the server.',\n        'status_code': 400",
        "detail": "server.alist_backend.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "server.alist_backend.wsgi",
        "description": "server.alist_backend.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "server.alist_backend.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.authentication.migrations.0001_initial",
        "description": "server.authentication.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "server.authentication.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.authentication.migrations.0002_alter_user_phone",
        "description": "server.authentication.migrations.0002_alter_user_phone",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('authentication', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='phone',\n            field=models.CharField(blank=True, help_text='Phone number', max_length=20, null=True),\n        ),",
        "detail": "server.authentication.migrations.0002_alter_user_phone",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.authentication.migrations.0003_alter_userprofile_emergency_contact_phone",
        "description": "server.authentication.migrations.0003_alter_userprofile_emergency_contact_phone",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('authentication', '0002_alter_user_phone'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='userprofile',\n            name='emergency_contact_phone',\n            field=models.CharField(blank=True, help_text='Emergency contact phone', max_length=20, null=True),\n        ),",
        "detail": "server.authentication.migrations.0003_alter_userprofile_emergency_contact_phone",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "server.authentication.admin",
        "description": "server.authentication.admin",
        "peekOfCode": "class UserAdmin(BaseUserAdmin):\n    \"\"\"\n    واجهة إدارة متقدمة للمستخدمين\n    \"\"\"\n    list_display = (\n        'username',\n        'email',\n        'get_full_name',\n        'user_type',\n        'is_verified',",
        "detail": "server.authentication.admin",
        "documentation": {}
    },
    {
        "label": "UserProfileAdmin",
        "kind": 6,
        "importPath": "server.authentication.admin",
        "description": "server.authentication.admin",
        "peekOfCode": "class UserProfileAdmin(admin.ModelAdmin):\n    \"\"\"\n    واجهة إدارة ملفات المستخدمين الشخصية\n    \"\"\"\n    list_display = (\n        'user',\n        'get_user_type',\n        'get_user_email',\n        'has_social_links',\n        'has_certifications',",
        "detail": "server.authentication.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.site_header",
        "kind": 5,
        "importPath": "server.authentication.admin",
        "description": "server.authentication.admin",
        "peekOfCode": "admin.site.site_header = 'A-List Home Professionals Admin'\nadmin.site.site_title = 'A-List Admin'\nadmin.site.index_title = 'Welcome to A-List Administration'",
        "detail": "server.authentication.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.site_title",
        "kind": 5,
        "importPath": "server.authentication.admin",
        "description": "server.authentication.admin",
        "peekOfCode": "admin.site.site_title = 'A-List Admin'\nadmin.site.index_title = 'Welcome to A-List Administration'",
        "detail": "server.authentication.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.index_title",
        "kind": 5,
        "importPath": "server.authentication.admin",
        "description": "server.authentication.admin",
        "peekOfCode": "admin.site.index_title = 'Welcome to A-List Administration'",
        "detail": "server.authentication.admin",
        "documentation": {}
    },
    {
        "label": "AuthenticationConfig",
        "kind": 6,
        "importPath": "server.authentication.apps",
        "description": "server.authentication.apps",
        "peekOfCode": "class AuthenticationConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'authentication'\n    verbose_name = 'Authentication'\n    def ready(self):\n        \"\"\"\n        Called when the app is ready.\n        Import signals here to ensure they are registered.\n        \"\"\"\n        try:",
        "detail": "server.authentication.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "server.authentication.models",
        "description": "server.authentication.models",
        "peekOfCode": "class User(AbstractUser):\n    \"\"\"\n    نموذج المستخدم المخصص لمنصة A-List Home Professionals\n    \"\"\"\n    USER_TYPE_CHOICES = [\n        ('client', 'Client'),\n        ('home_pro', 'Home Pro'),\n        ('specialist', 'A-List Specialist'),\n        ('crew_member', 'Crew Member'),\n    ]",
        "detail": "server.authentication.models",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "kind": 6,
        "importPath": "server.authentication.models",
        "description": "server.authentication.models",
        "peekOfCode": "class UserProfile(models.Model):\n    \"\"\"\n    ملف شخصي إضافي للمستخدم\n    \"\"\"\n    user = models.OneToOneField(\n        User,\n        on_delete=models.CASCADE,\n        related_name='profile'\n    )\n    # Social Links",
        "detail": "server.authentication.models",
        "documentation": {}
    },
    {
        "label": "UserRegistrationSerializer",
        "kind": 6,
        "importPath": "server.authentication.serializers",
        "description": "server.authentication.serializers",
        "peekOfCode": "class UserRegistrationSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer للتسجيل الجديد\n    \"\"\"\n    password = serializers.CharField(\n        write_only=True,\n        validators=[validate_password],\n        style={'input_type': 'password'}\n    )\n    password_confirm = serializers.CharField(",
        "detail": "server.authentication.serializers",
        "documentation": {}
    },
    {
        "label": "UserLoginSerializer",
        "kind": 6,
        "importPath": "server.authentication.serializers",
        "description": "server.authentication.serializers",
        "peekOfCode": "class UserLoginSerializer(serializers.Serializer):\n    \"\"\"\n    Serializer لتسجيل الدخول\n    \"\"\"\n    email = serializers.EmailField()\n    password = serializers.CharField(style={'input_type': 'password'})\n    def validate(self, attrs):\n        \"\"\"Validate login credentials\"\"\"\n        email = attrs.get('email')\n        password = attrs.get('password')",
        "detail": "server.authentication.serializers",
        "documentation": {}
    },
    {
        "label": "UserProfileSerializer",
        "kind": 6,
        "importPath": "server.authentication.serializers",
        "description": "server.authentication.serializers",
        "peekOfCode": "class UserProfileSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer للملف الشخصي الإضافي\n    \"\"\"\n    emergency_contact_phone = PhoneNumberField(required=False)\n    class Meta:\n        model = UserProfile\n        fields = (\n            'linkedin_url',\n            'facebook_url',",
        "detail": "server.authentication.serializers",
        "documentation": {}
    },
    {
        "label": "UserDetailSerializer",
        "kind": 6,
        "importPath": "server.authentication.serializers",
        "description": "server.authentication.serializers",
        "peekOfCode": "class UserDetailSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer لتفاصيل المستخدم الكاملة\n    \"\"\"\n    phone = serializers.CharField(required=False, allow_blank=True, max_length=20)\n    profile = UserProfileSerializer(read_only=True)\n    verification_badges = serializers.SerializerMethodField()\n    completion_rate = serializers.SerializerMethodField()\n    class Meta:\n        model = User",
        "detail": "server.authentication.serializers",
        "documentation": {}
    },
    {
        "label": "UserUpdateSerializer",
        "kind": 6,
        "importPath": "server.authentication.serializers",
        "description": "server.authentication.serializers",
        "peekOfCode": "class UserUpdateSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer لتحديث بيانات المستخدم\n    \"\"\"\n    phone = serializers.CharField(required=False, allow_blank=True, max_length=20)\n    class Meta:\n        model = User\n        fields = (\n            'first_name',\n            'last_name',",
        "detail": "server.authentication.serializers",
        "documentation": {}
    },
    {
        "label": "UserListSerializer",
        "kind": 6,
        "importPath": "server.authentication.serializers",
        "description": "server.authentication.serializers",
        "peekOfCode": "class UserListSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer لقائمة المستخدمين (عرض مبسط)\n    \"\"\"\n    verification_badges = serializers.SerializerMethodField()\n    class Meta:\n        model = User\n        fields = (\n            'id',\n            'username',",
        "detail": "server.authentication.serializers",
        "documentation": {}
    },
    {
        "label": "ProfessionalListSerializer",
        "kind": 6,
        "importPath": "server.authentication.serializers",
        "description": "server.authentication.serializers",
        "peekOfCode": "class ProfessionalListSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer خاص لقائمة المحترفين\n    \"\"\"\n    verification_badges = serializers.SerializerMethodField()\n    class Meta:\n        model = User\n        fields = (\n            'id',\n            'first_name',",
        "detail": "server.authentication.serializers",
        "documentation": {}
    },
    {
        "label": "PasswordChangeSerializer",
        "kind": 6,
        "importPath": "server.authentication.serializers",
        "description": "server.authentication.serializers",
        "peekOfCode": "class PasswordChangeSerializer(serializers.Serializer):\n    \"\"\"\n    Serializer لتغيير كلمة المرور\n    \"\"\"\n    old_password = serializers.CharField(style={'input_type': 'password'})\n    new_password = serializers.CharField(\n        validators=[validate_password],\n        style={'input_type': 'password'}\n    )\n    new_password_confirm = serializers.CharField(style={'input_type': 'password'})",
        "detail": "server.authentication.serializers",
        "documentation": {}
    },
    {
        "label": "PasswordResetSerializer",
        "kind": 6,
        "importPath": "server.authentication.serializers",
        "description": "server.authentication.serializers",
        "peekOfCode": "class PasswordResetSerializer(serializers.Serializer):\n    \"\"\"\n    Serializer لإعادة تعيين كلمة المرور\n    \"\"\"\n    email = serializers.EmailField()\n    def validate_email(self, value):\n        \"\"\"Validate email exists\"\"\"\n        try:\n            User.objects.get(email=value)\n        except User.DoesNotExist:",
        "detail": "server.authentication.serializers",
        "documentation": {}
    },
    {
        "label": "UserStatsSerializer",
        "kind": 6,
        "importPath": "server.authentication.serializers",
        "description": "server.authentication.serializers",
        "peekOfCode": "class UserStatsSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer لإحصائيات المستخدم\n    \"\"\"\n    verification_badges = serializers.SerializerMethodField()\n    completion_rate = serializers.SerializerMethodField()\n    class Meta:\n        model = User\n        fields = (\n            'id',",
        "detail": "server.authentication.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "server.authentication.urls",
        "description": "server.authentication.urls",
        "peekOfCode": "app_name = 'authentication'\nurlpatterns = [\n    # Authentication endpoints\n    path('register/', views.UserRegistrationView.as_view(), name='register'),\n    path('login/', views.UserLoginView.as_view(), name='login'),\n    path('logout/', views.UserLogoutView.as_view(), name='logout'),\n    path('refresh/', views.TokenRefreshView.as_view(), name='token_refresh'),\n    # Password management\n    path('password/change/', views.PasswordChangeView.as_view(), name='password_change'),\n    path('password/reset/', views.PasswordResetView.as_view(), name='password_reset'),",
        "detail": "server.authentication.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.authentication.urls",
        "description": "server.authentication.urls",
        "peekOfCode": "urlpatterns = [\n    # Authentication endpoints\n    path('register/', views.UserRegistrationView.as_view(), name='register'),\n    path('login/', views.UserLoginView.as_view(), name='login'),\n    path('logout/', views.UserLogoutView.as_view(), name='logout'),\n    path('refresh/', views.TokenRefreshView.as_view(), name='token_refresh'),\n    # Password management\n    path('password/change/', views.PasswordChangeView.as_view(), name='password_change'),\n    path('password/reset/', views.PasswordResetView.as_view(), name='password_reset'),\n    # User profile",
        "detail": "server.authentication.urls",
        "documentation": {}
    },
    {
        "label": "UserRegistrationView",
        "kind": 6,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "class UserRegistrationView(generics.CreateAPIView):\n    \"\"\"\n    User Registration\n    \"\"\"\n    queryset = User.objects.all()\n    serializer_class = UserRegistrationSerializer\n    permission_classes = [AllowAny]\n    @extend_schema(\n        operation_id=\"register_user\",\n        summary=\"Create New Account\",",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "UserLoginView",
        "kind": 6,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "class UserLoginView(APIView):\n    \"\"\"\n    User Login\n    \"\"\"\n    permission_classes = [AllowAny]\n    serializer_class = UserLoginSerializer\n    @extend_schema(\n        operation_id=\"login_user\",\n        summary=\"User Login\",\n        description=\"Login for registered users\",",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "UserLogoutView",
        "kind": 6,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "class UserLogoutView(APIView):\n    \"\"\"\n    User Logout\n    \"\"\"\n    permission_classes = [IsAuthenticated]\n    serializer_class = UserLoginSerializer  # Adding for schema generation\n    @extend_schema(\n        operation_id=\"logout_user\",\n        summary=\"User Logout\",\n        description=\"Logout current user and invalidate tokens\",",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "UserProfileView",
        "kind": 6,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "class UserProfileView(generics.RetrieveUpdateAPIView):\n    \"\"\"\n    User Profile Management\n    \"\"\"\n    serializer_class = UserDetailSerializer\n    permission_classes = [IsAuthenticated]\n    def get_object(self):\n        return self.request.user\n    @extend_schema(\n        operation_id=\"get_user_profile\",",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "UserUpdateView",
        "kind": 6,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "class UserUpdateView(generics.UpdateAPIView):\n    \"\"\"\n    User Data Update\n    \"\"\"\n    serializer_class = UserUpdateSerializer\n    permission_classes = [IsAuthenticated]\n    def get_object(self):\n        return self.request.user\n    @extend_schema(\n        operation_id=\"update_user\",",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "UserListView",
        "kind": 6,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "class UserListView(generics.ListAPIView):\n    \"\"\"\n    Users List\n    \"\"\"\n    queryset = User.objects.filter(is_active=True)\n    serializer_class = UserListSerializer\n    permission_classes = [IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]\n    filterset_fields = ['user_type', 'is_verified', 'location']\n    search_fields = ['first_name', 'last_name', 'company_name', 'skills']",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "ProfessionalListView",
        "kind": 6,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "class ProfessionalListView(generics.ListAPIView):\n    \"\"\"\n    Professionals List\n    \"\"\"\n    serializer_class = ProfessionalListSerializer\n    permission_classes = [IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]\n    filterset_fields = ['user_type', 'is_verified', 'location', 'is_available']\n    search_fields = ['first_name', 'last_name', 'company_name', 'skills', 'specialization']\n    ordering_fields = ['rating_average', 'hourly_rate', 'projects_completed']",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "UserDetailView",
        "kind": 6,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "class UserDetailView(generics.RetrieveAPIView):\n    \"\"\"\n    User Details\n    \"\"\"\n    queryset = User.objects.filter(is_active=True)\n    serializer_class = UserDetailSerializer\n    permission_classes = [IsAuthenticated]\n    lookup_field = 'id'\n    @extend_schema(\n        operation_id=\"get_user_detail\",",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "PasswordChangeView",
        "kind": 6,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "class PasswordChangeView(APIView):\n    \"\"\"\n    تغيير كلمة المرور\n    \"\"\"\n    permission_classes = [IsAuthenticated]\n    serializer_class = PasswordChangeSerializer\n    @extend_schema(\n        operation_id=\"change_password\",\n        summary=\"Change Password\",\n        description=\"Change user password\",",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetView",
        "kind": 6,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "class PasswordResetView(APIView):\n    \"\"\"\n    إعادة تعيين كلمة المرور\n    \"\"\"\n    permission_classes = [AllowAny]\n    serializer_class = PasswordResetSerializer\n    @extend_schema(\n        operation_id=\"reset_password\",\n        summary=\"Reset Password\",\n        description=\"Request password reset via email\",",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "UserStatsView",
        "kind": 6,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "class UserStatsView(APIView):\n    \"\"\"\n    إحصائيات المستخدم\n    \"\"\"\n    permission_classes = [IsAuthenticated]\n    serializer_class = UserStatsSerializer\n    @extend_schema(\n        operation_id=\"get_user_stats\",\n        summary=\"Get User Statistics\",\n        description=\"Get current user's profile statistics\",",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "UserProfileDetailView",
        "kind": 6,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "class UserProfileDetailView(generics.RetrieveUpdateAPIView):\n    \"\"\"\n    User Profile Details\n    \"\"\"\n    serializer_class = UserProfileSerializer\n    permission_classes = [IsAuthenticated]\n    def get_object(self):\n        profile, created = UserProfile.objects.get_or_create(user=self.request.user)\n        return profile\n    @extend_schema(",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "UserProfileDetailView",
        "kind": 6,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "class UserProfileDetailView(generics.RetrieveAPIView):\n    \"\"\"\n    User Profile Details\n    \"\"\"\n    serializer_class = UserDetailSerializer\n    permission_classes = [IsAuthenticated]\n    @extend_schema(\n        operation_id=\"get_user_profile_detail\",\n        summary=\"Get User Profile Details\",\n        description=\"Get detailed user profile information\",",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "kind": 6,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "class TokenRefreshView(APIView):\n    \"\"\"\n    Refresh JWT Token\n    \"\"\"\n    permission_classes = [AllowAny]\n    @extend_schema(\n        operation_id=\"refresh_token\",\n        summary=\"Refresh Token\",\n        description=\"Refresh JWT access token using refresh token\",\n        tags=[\"Authentication\"],",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "toggle_availability",
        "kind": 2,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "def toggle_availability(request):\n    \"\"\"\n    تغيير حالة التوفر\n    \"\"\"\n    user = request.user\n    user.is_available = not user.is_available\n    user.save(update_fields=['is_available'])\n    return Response({\n        'is_available': user.is_available,\n        'message': f'Availability set to {\"available\" if user.is_available else \"unavailable\"}'",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "user_search",
        "kind": 2,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "def user_search(request):\n    \"\"\"\n    البحث في المستخدمين\n    \"\"\"\n    query = request.GET.get('q', '')\n    user_type = request.GET.get('type', '')\n    if not query:\n        return Response({'error': 'Query parameter is required'}, status=status.HTTP_400_BAD_REQUEST)\n    # Build search query\n    search_query = Q(is_active=True) & (",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "user_favorites",
        "kind": 2,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "def user_favorites(request):\n    \"\"\"Get user's favorite projects\"\"\"\n    user = request.user\n    favorites = user.favorite_projects.all()\n    favorites_data = []\n    for project in favorites:\n        favorites_data.append({\n            'id': project.id,\n            'title': project.title,\n            'description': project.description,",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "user_stats",
        "kind": 2,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "def user_stats(request):\n    \"\"\"Get user statistics\"\"\"\n    user = request.user\n    stats = {\n        'total_projects': user.projects_completed,\n        'active_projects': user.client_projects.filter(status='active').count(),\n        'total_reviews': user.received_reviews.count(),\n        'average_rating': user.rating_average,\n        'total_earnings': getattr(user, 'total_earnings', 0),\n        'profile_completion': calculate_profile_completion(user)",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "calculate_profile_completion",
        "kind": 2,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "def calculate_profile_completion(user):\n    \"\"\"Calculate profile completion percentage\"\"\"\n    fields = [\n        user.first_name, user.last_name, user.email, user.phone,\n        user.location, user.bio\n    ]\n    profile_fields = []\n    if hasattr(user, 'profile'):\n        profile_fields = [\n            user.profile.date_of_birth,",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "def change_password(request):\n    \"\"\"Change user password\"\"\"\n    user = request.user\n    data = request.data\n    old_password = data.get('old_password')\n    new_password = data.get('new_password')\n    confirm_password = data.get('confirm_password')\n    if not user.check_password(old_password):\n        return Response({'error': 'Invalid old password'}, status=400)\n    if new_password != confirm_password:",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "forgot_password",
        "kind": 2,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "def forgot_password(request):\n    \"\"\"Send password reset email\"\"\"\n    email = request.data.get('email')\n    try:\n        user = User.objects.get(email=email, is_active=True)\n        # Here you would typically send a password reset email\n        # For now, we'll just return a success message\n        return Response({'message': 'Password reset email sent'})\n    except User.DoesNotExist:\n        return Response({'error': 'User not found'}, status=404)",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.authentication.views",
        "description": "server.authentication.views",
        "peekOfCode": "User = get_user_model()\nclass UserRegistrationView(generics.CreateAPIView):\n    \"\"\"\n    User Registration\n    \"\"\"\n    queryset = User.objects.all()\n    serializer_class = UserRegistrationSerializer\n    permission_classes = [AllowAny]\n    @extend_schema(\n        operation_id=\"register_user\",",
        "detail": "server.authentication.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.calendar_app.migrations.0001_initial",
        "description": "server.calendar_app.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('projects', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Appointment',\n            fields=[",
        "detail": "server.calendar_app.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.calendar_app.migrations.0002_appointmenttemplate_professionalavailability_and_more",
        "description": "server.calendar_app.migrations.0002_appointmenttemplate_professionalavailability_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('calendar_app', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AppointmentTemplate',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "server.calendar_app.migrations.0002_appointmenttemplate_professionalavailability_and_more",
        "documentation": {}
    },
    {
        "label": "ProfessionalFilter",
        "kind": 6,
        "importPath": "server.calendar_app.admin",
        "description": "server.calendar_app.admin",
        "peekOfCode": "class ProfessionalFilter(admin.SimpleListFilter):\n    \"\"\"Filter appointments by professional type\"\"\"\n    title = 'Professional Type'\n    parameter_name = 'professional_type'\n    def lookups(self, request, model_admin):\n        return (\n            ('home_pro', 'Home Professional'),\n            ('specialist', 'Specialist'),\n            ('crew_member', 'Crew Member'),\n        )",
        "detail": "server.calendar_app.admin",
        "documentation": {}
    },
    {
        "label": "DateRangeFilter",
        "kind": 6,
        "importPath": "server.calendar_app.admin",
        "description": "server.calendar_app.admin",
        "peekOfCode": "class DateRangeFilter(admin.SimpleListFilter):\n    \"\"\"Filter appointments by date range\"\"\"\n    title = 'Date Range'\n    parameter_name = 'date_range'\n    def lookups(self, request, model_admin):\n        return (\n            ('today', 'Today'),\n            ('tomorrow', 'Tomorrow'),\n            ('this_week', 'This Week'),\n            ('next_week', 'Next Week'),",
        "detail": "server.calendar_app.admin",
        "documentation": {}
    },
    {
        "label": "AppointmentAdmin",
        "kind": 6,
        "importPath": "server.calendar_app.admin",
        "description": "server.calendar_app.admin",
        "peekOfCode": "class AppointmentAdmin(admin.ModelAdmin):\n    list_display = [\n        'appointment_info', 'professional_info', 'client_info', \n        'schedule_info', 'status_badge', 'duration_display', 'actions_buttons'\n    ]\n    list_filter = [\n        'status', 'type', ProfessionalFilter, DateRangeFilter, \n        'date', 'created_at', 'professional__is_available'\n    ]\n    search_fields = [",
        "detail": "server.calendar_app.admin",
        "documentation": {}
    },
    {
        "label": "ProfessionalAvailabilityInline",
        "kind": 6,
        "importPath": "server.calendar_app.admin",
        "description": "server.calendar_app.admin",
        "peekOfCode": "class ProfessionalAvailabilityInline(admin.TabularInline):\n    \"\"\"Inline for professional availability\"\"\"\n    model = ProfessionalAvailability\n    extra = 7  # One for each day of week\n    max_num = 7\n    fields = ['weekday', 'start_time', 'end_time', 'break_start', 'break_end', 'is_available']\n@admin.register(ProfessionalAvailability)\nclass ProfessionalAvailabilityAdmin(admin.ModelAdmin):\n    list_display = [\n        'professional_name', 'weekday_display', 'time_range', ",
        "detail": "server.calendar_app.admin",
        "documentation": {}
    },
    {
        "label": "ProfessionalAvailabilityAdmin",
        "kind": 6,
        "importPath": "server.calendar_app.admin",
        "description": "server.calendar_app.admin",
        "peekOfCode": "class ProfessionalAvailabilityAdmin(admin.ModelAdmin):\n    list_display = [\n        'professional_name', 'weekday_display', 'time_range', \n        'break_display', 'availability_status', 'last_updated'\n    ]\n    list_filter = [\n        'weekday', 'is_available', ProfessionalFilter, 'professional__is_available'\n    ]\n    search_fields = [\n        'professional__first_name', 'professional__last_name',",
        "detail": "server.calendar_app.admin",
        "documentation": {}
    },
    {
        "label": "UnavailableDateAdmin",
        "kind": 6,
        "importPath": "server.calendar_app.admin",
        "description": "server.calendar_app.admin",
        "peekOfCode": "class UnavailableDateAdmin(admin.ModelAdmin):\n    list_display = [\n        'professional_name', 'date_display', 'unavailability_type', \n        'time_range', 'reason_display', 'created_display'\n    ]\n    list_filter = [\n        'is_full_day', 'date', ProfessionalFilter, 'created_at'\n    ]\n    search_fields = [\n        'professional__first_name', 'professional__last_name',",
        "detail": "server.calendar_app.admin",
        "documentation": {}
    },
    {
        "label": "AppointmentTemplateAdmin",
        "kind": 6,
        "importPath": "server.calendar_app.admin",
        "description": "server.calendar_app.admin",
        "peekOfCode": "class AppointmentTemplateAdmin(admin.ModelAdmin):\n    list_display = [\n        'template_info', 'professional_name', 'duration_price', \n        'template_settings', 'activity_status', 'last_updated'\n    ]\n    list_filter = [\n        'type', 'is_active', 'requires_confirmation', ProfessionalFilter\n    ]\n    search_fields = [\n        'title', 'description', 'professional__first_name', ",
        "detail": "server.calendar_app.admin",
        "documentation": {}
    },
    {
        "label": "CalendarAppConfig",
        "kind": 6,
        "importPath": "server.calendar_app.apps",
        "description": "server.calendar_app.apps",
        "peekOfCode": "class CalendarAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'calendar_app'\n    verbose_name = 'Calendar & Appointments'",
        "detail": "server.calendar_app.apps",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "kind": 6,
        "importPath": "server.calendar_app.models",
        "description": "server.calendar_app.models",
        "peekOfCode": "class Appointment(models.Model):\n    \"\"\"المواعيد\"\"\"\n    STATUS_CHOICES = [\n        ('scheduled', 'Scheduled'),\n        ('confirmed', 'Confirmed'),\n        ('cancelled', 'Cancelled'),\n        ('completed', 'Completed'),\n    ]\n    TYPE_CHOICES = [\n        ('consultation', 'Consultation'),",
        "detail": "server.calendar_app.models",
        "documentation": {}
    },
    {
        "label": "ProfessionalAvailability",
        "kind": 6,
        "importPath": "server.calendar_app.models",
        "description": "server.calendar_app.models",
        "peekOfCode": "class ProfessionalAvailability(models.Model):\n    \"\"\"Professional Availability Schedule\"\"\"\n    WEEKDAY_CHOICES = [\n        (0, 'Monday'),\n        (1, 'Tuesday'),\n        (2, 'Wednesday'),\n        (3, 'Thursday'),\n        (4, 'Friday'),\n        (5, 'Saturday'),\n        (6, 'Sunday'),",
        "detail": "server.calendar_app.models",
        "documentation": {}
    },
    {
        "label": "UnavailableDate",
        "kind": 6,
        "importPath": "server.calendar_app.models",
        "description": "server.calendar_app.models",
        "peekOfCode": "class UnavailableDate(models.Model):\n    \"\"\"Specific dates when professional is unavailable\"\"\"\n    professional = models.ForeignKey(\n        User, \n        on_delete=models.CASCADE, \n        related_name='unavailable_dates',\n        limit_choices_to={'user_type__in': ['home_pro', 'specialist', 'crew_member']}\n    )\n    date = models.DateField()\n    reason = models.CharField(max_length=255, blank=True)",
        "detail": "server.calendar_app.models",
        "documentation": {}
    },
    {
        "label": "AppointmentTemplate",
        "kind": 6,
        "importPath": "server.calendar_app.models",
        "description": "server.calendar_app.models",
        "peekOfCode": "class AppointmentTemplate(models.Model):\n    \"\"\"Template for recurring appointments\"\"\"\n    professional = models.ForeignKey(\n        User, \n        on_delete=models.CASCADE, \n        related_name='appointment_templates',\n        limit_choices_to={'user_type__in': ['home_pro', 'specialist', 'crew_member']}\n    )\n    title = models.CharField(max_length=255)\n    description = models.TextField(blank=True)",
        "detail": "server.calendar_app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.calendar_app.models",
        "description": "server.calendar_app.models",
        "peekOfCode": "User = get_user_model()\nclass Appointment(models.Model):\n    \"\"\"المواعيد\"\"\"\n    STATUS_CHOICES = [\n        ('scheduled', 'Scheduled'),\n        ('confirmed', 'Confirmed'),\n        ('cancelled', 'Cancelled'),\n        ('completed', 'Completed'),\n    ]\n    TYPE_CHOICES = [",
        "detail": "server.calendar_app.models",
        "documentation": {}
    },
    {
        "label": "UserBasicSerializer",
        "kind": 6,
        "importPath": "server.calendar_app.serializers",
        "description": "server.calendar_app.serializers",
        "peekOfCode": "class UserBasicSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'username', 'first_name', 'last_name', 'avatar']\nclass AppointmentSerializer(serializers.ModelSerializer):\n    professional = UserBasicSerializer(read_only=True)\n    client = UserBasicSerializer(read_only=True)\n    project_info = serializers.SerializerMethodField()\n    class Meta:\n        model = Appointment",
        "detail": "server.calendar_app.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentSerializer",
        "kind": 6,
        "importPath": "server.calendar_app.serializers",
        "description": "server.calendar_app.serializers",
        "peekOfCode": "class AppointmentSerializer(serializers.ModelSerializer):\n    professional = UserBasicSerializer(read_only=True)\n    client = UserBasicSerializer(read_only=True)\n    project_info = serializers.SerializerMethodField()\n    class Meta:\n        model = Appointment\n        fields = [\n            'id', 'title', 'description', 'professional', 'client', \n            'project_info', 'date', 'time', 'duration', 'location',\n            'meeting_link', 'type', 'status', 'created_at', 'updated_at'",
        "detail": "server.calendar_app.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentCreateSerializer",
        "kind": 6,
        "importPath": "server.calendar_app.serializers",
        "description": "server.calendar_app.serializers",
        "peekOfCode": "class AppointmentCreateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Appointment\n        fields = [\n            'title', 'description', 'professional', 'project', \n            'date', 'time', 'duration', 'location', 'meeting_link', 'type'\n        ]\n    def create(self, validated_data):\n        validated_data['client'] = self.context['request'].user\n        return super().create(validated_data)",
        "detail": "server.calendar_app.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentUpdateSerializer",
        "kind": 6,
        "importPath": "server.calendar_app.serializers",
        "description": "server.calendar_app.serializers",
        "peekOfCode": "class AppointmentUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Appointment\n        fields = [\n            'title', 'description', 'date', 'time', 'duration', \n            'location', 'meeting_link', 'type', 'status'\n        ]",
        "detail": "server.calendar_app.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.calendar_app.serializers",
        "description": "server.calendar_app.serializers",
        "peekOfCode": "User = get_user_model()\nclass UserBasicSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'username', 'first_name', 'last_name', 'avatar']\nclass AppointmentSerializer(serializers.ModelSerializer):\n    professional = UserBasicSerializer(read_only=True)\n    client = UserBasicSerializer(read_only=True)\n    project_info = serializers.SerializerMethodField()\n    class Meta:",
        "detail": "server.calendar_app.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentModelTest",
        "kind": 6,
        "importPath": "server.calendar_app.tests",
        "description": "server.calendar_app.tests",
        "peekOfCode": "class AppointmentModelTest(TestCase):\n    def setUp(self):\n        \"\"\"Set up test data\"\"\"\n        self.client_user = User.objects.create_user(\n            username='client1',\n            email='client1@example.com',\n            password='testpass123',\n            user_type='client'\n        )\n        self.professional_user = User.objects.create_user(",
        "detail": "server.calendar_app.tests",
        "documentation": {}
    },
    {
        "label": "AppointmentViewTest",
        "kind": 6,
        "importPath": "server.calendar_app.tests",
        "description": "server.calendar_app.tests",
        "peekOfCode": "class AppointmentViewTest(TestCase):\n    def setUp(self):\n        \"\"\"Set up test data\"\"\"\n        self.client_user = User.objects.create_user(\n            username='client1',\n            email='client1@example.com',\n            password='testpass123',\n            user_type='client'\n        )\n        self.professional_user = User.objects.create_user(",
        "detail": "server.calendar_app.tests",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.calendar_app.tests",
        "description": "server.calendar_app.tests",
        "peekOfCode": "User = get_user_model()\nclass AppointmentModelTest(TestCase):\n    def setUp(self):\n        \"\"\"Set up test data\"\"\"\n        self.client_user = User.objects.create_user(\n            username='client1',\n            email='client1@example.com',\n            password='testpass123',\n            user_type='client'\n        )",
        "detail": "server.calendar_app.tests",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "server.calendar_app.urls",
        "description": "server.calendar_app.urls",
        "peekOfCode": "app_name = 'calendar_app'\nurlpatterns = [\n    # Appointments\n    path('appointments/', views.AppointmentListView.as_view(), name='appointment_list'),\n    path('appointments/<int:pk>/', views.AppointmentDetailView.as_view(), name='appointment_detail'),\n    path('appointments/create/', views.AppointmentCreateView.as_view(), name='appointment_create'),\n    path('appointments/<int:pk>/update/', views.AppointmentUpdateView.as_view(), name='appointment_update'),\n    path('appointments/<int:pk>/delete/', views.AppointmentDeleteView.as_view(), name='appointment_delete'),\n    # Statistics\n    path('appointments/stats/', views.get_appointment_stats, name='appointment_stats'),",
        "detail": "server.calendar_app.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.calendar_app.urls",
        "description": "server.calendar_app.urls",
        "peekOfCode": "urlpatterns = [\n    # Appointments\n    path('appointments/', views.AppointmentListView.as_view(), name='appointment_list'),\n    path('appointments/<int:pk>/', views.AppointmentDetailView.as_view(), name='appointment_detail'),\n    path('appointments/create/', views.AppointmentCreateView.as_view(), name='appointment_create'),\n    path('appointments/<int:pk>/update/', views.AppointmentUpdateView.as_view(), name='appointment_update'),\n    path('appointments/<int:pk>/delete/', views.AppointmentDeleteView.as_view(), name='appointment_delete'),\n    # Statistics\n    path('appointments/stats/', views.get_appointment_stats, name='appointment_stats'),\n    # Available slots and calendar",
        "detail": "server.calendar_app.urls",
        "documentation": {}
    },
    {
        "label": "AppointmentListView",
        "kind": 6,
        "importPath": "server.calendar_app.views",
        "description": "server.calendar_app.views",
        "peekOfCode": "class AppointmentListView(generics.ListAPIView):\n    \"\"\"\n    Appointments List\n    \"\"\"\n    serializer_class = AppointmentSerializer\n    permission_classes = [IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]\n    filterset_fields = ['status', 'type']\n    search_fields = ['title', 'description']\n    ordering_fields = ['date', 'created_at']",
        "detail": "server.calendar_app.views",
        "documentation": {}
    },
    {
        "label": "AppointmentDetailView",
        "kind": 6,
        "importPath": "server.calendar_app.views",
        "description": "server.calendar_app.views",
        "peekOfCode": "class AppointmentDetailView(generics.RetrieveAPIView):\n    \"\"\"\n    Appointment Details\n    \"\"\"\n    serializer_class = AppointmentSerializer\n    permission_classes = [IsAuthenticated]\n    def get_queryset(self):\n        user = self.request.user\n        return Appointment.objects.filter(\n            models.Q(client=user) | models.Q(professional=user)",
        "detail": "server.calendar_app.views",
        "documentation": {}
    },
    {
        "label": "AppointmentCreateView",
        "kind": 6,
        "importPath": "server.calendar_app.views",
        "description": "server.calendar_app.views",
        "peekOfCode": "class AppointmentCreateView(generics.CreateAPIView):\n    \"\"\"\n    Create New Appointment\n    \"\"\"\n    serializer_class = AppointmentCreateSerializer\n    permission_classes = [IsAuthenticated]\n    @extend_schema(\n        operation_id=\"create_appointment\",\n        summary=\"Create New Appointment\",\n        description=\"Create a new appointment\",",
        "detail": "server.calendar_app.views",
        "documentation": {}
    },
    {
        "label": "AppointmentUpdateView",
        "kind": 6,
        "importPath": "server.calendar_app.views",
        "description": "server.calendar_app.views",
        "peekOfCode": "class AppointmentUpdateView(generics.UpdateAPIView):\n    \"\"\"\n    Update Appointment\n    \"\"\"\n    serializer_class = AppointmentSerializer\n    permission_classes = [IsAuthenticated]\n    def get_queryset(self):\n        user = self.request.user\n        return Appointment.objects.filter(\n            models.Q(client=user) | models.Q(professional=user)",
        "detail": "server.calendar_app.views",
        "documentation": {}
    },
    {
        "label": "AppointmentDeleteView",
        "kind": 6,
        "importPath": "server.calendar_app.views",
        "description": "server.calendar_app.views",
        "peekOfCode": "class AppointmentDeleteView(generics.DestroyAPIView):\n    \"\"\"\n    Delete Appointment\n    \"\"\"\n    serializer_class = AppointmentSerializer\n    permission_classes = [IsAuthenticated]\n    def get_queryset(self):\n        user = self.request.user\n        return Appointment.objects.filter(\n            models.Q(client=user) | models.Q(professional=user)",
        "detail": "server.calendar_app.views",
        "documentation": {}
    },
    {
        "label": "get_appointment_stats",
        "kind": 2,
        "importPath": "server.calendar_app.views",
        "description": "server.calendar_app.views",
        "peekOfCode": "def get_appointment_stats(request):\n    \"\"\"Get appointment statistics for the current user\"\"\"\n    try:\n        user = request.user\n        today = timezone.now().date()\n        week_start = today - timedelta(days=today.weekday())\n        week_end = week_start + timedelta(days=6)\n        # Get user's appointments\n        user_appointments = Appointment.objects.filter(\n            models.Q(client=user) | models.Q(professional=user)",
        "detail": "server.calendar_app.views",
        "documentation": {}
    },
    {
        "label": "get_available_slots",
        "kind": 2,
        "importPath": "server.calendar_app.views",
        "description": "server.calendar_app.views",
        "peekOfCode": "def get_available_slots(request):\n    \"\"\"Get available appointment slots for a professional\"\"\"\n    from authentication.models import User\n    professional_id = request.query_params.get('professional_id')\n    date_str = request.query_params.get('date')\n    duration = int(request.query_params.get('duration', 60))  # Default 1 hour\n    if not professional_id or not date_str:\n        return Response(\n            {'error': 'professional_id and date are required'}, \n            status=status.HTTP_400_BAD_REQUEST",
        "detail": "server.calendar_app.views",
        "documentation": {}
    },
    {
        "label": "get_professional_calendar",
        "kind": 2,
        "importPath": "server.calendar_app.views",
        "description": "server.calendar_app.views",
        "peekOfCode": "def get_professional_calendar(request):\n    \"\"\"Get professional's calendar for a specific month\"\"\"\n    from authentication.models import User\n    from calendar import monthrange\n    professional_id = request.query_params.get('professional_id')\n    year = request.query_params.get('year')\n    month = request.query_params.get('month')\n    if not all([professional_id, year, month]):\n        return Response(\n            {'error': 'professional_id, year, and month are required'}, ",
        "detail": "server.calendar_app.views",
        "documentation": {}
    },
    {
        "label": "get_day_available_slots",
        "kind": 2,
        "importPath": "server.calendar_app.views",
        "description": "server.calendar_app.views",
        "peekOfCode": "def get_day_available_slots(professional, date):\n    \"\"\"Helper function to calculate available slots for a day\"\"\"\n    if not professional.is_available or date < timezone.now().date():\n        return []\n    working_start = time(9, 0)\n    working_end = time(18, 0)\n    slot_duration = 60  # 1 hour slots\n    existing_appointments = Appointment.objects.filter(\n        professional=professional,\n        date=date,",
        "detail": "server.calendar_app.views",
        "documentation": {}
    },
    {
        "label": "set_professional_availability",
        "kind": 2,
        "importPath": "server.calendar_app.views",
        "description": "server.calendar_app.views",
        "peekOfCode": "def set_professional_availability(request):\n    \"\"\"Set professional's availability\"\"\"\n    user = request.user\n    if user.user_type not in ['home_pro', 'specialist', 'crew_member']:\n        return Response(\n            {'error': 'Only professionals can set availability'}, \n            status=status.HTTP_403_FORBIDDEN\n        )\n    data = request.data\n    is_available = data.get('is_available')",
        "detail": "server.calendar_app.views",
        "documentation": {}
    },
    {
        "label": "get_professional_availability",
        "kind": 2,
        "importPath": "server.calendar_app.views",
        "description": "server.calendar_app.views",
        "peekOfCode": "def get_professional_availability(request):\n    \"\"\"Get professional's weekly availability schedule\"\"\"\n    user = request.user\n    if user.user_type not in ['home_pro', 'specialist', 'crew_member']:\n        return Response(\n            {'error': 'Only professionals can access availability'}, \n            status=status.HTTP_403_FORBIDDEN\n        )\n    # Get all availability records for this professional\n    availability_records = ProfessionalAvailability.objects.filter(",
        "detail": "server.calendar_app.views",
        "documentation": {}
    },
    {
        "label": "save_professional_availability",
        "kind": 2,
        "importPath": "server.calendar_app.views",
        "description": "server.calendar_app.views",
        "peekOfCode": "def save_professional_availability(request):\n    \"\"\"Save professional's weekly availability schedule\"\"\"\n    user = request.user\n    if user.user_type not in ['home_pro', 'specialist', 'crew_member']:\n        return Response(\n            {'error': 'Only professionals can set availability'}, \n            status=status.HTTP_403_FORBIDDEN\n        )\n    data = request.data\n    weekly_schedule = data.get('weekly_schedule', {})",
        "detail": "server.calendar_app.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.contracts.migrations.0001_initial",
        "description": "server.contracts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('projects', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Contract',\n            fields=[",
        "detail": "server.contracts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.contracts.migrations.0002_contracttimetracking_contracttask_contractlocation_and_more",
        "description": "server.contracts.migrations.0002_contracttimetracking_contracttask_contractlocation_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('contracts', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ContractTimeTracking',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "server.contracts.migrations.0002_contracttimetracking_contracttask_contractlocation_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.contracts.migrations.0003_contractpayment",
        "description": "server.contracts.migrations.0003_contractpayment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('contracts', '0002_contracttimetracking_contracttask_contractlocation_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ContractPayment',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),",
        "detail": "server.contracts.migrations.0003_contractpayment",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.contracts.migrations.0004_contractcalendarevent_and_more",
        "description": "server.contracts.migrations.0004_contractcalendarevent_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('contracts', '0003_contractpayment'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ContractCalendarEvent',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "server.contracts.migrations.0004_contractcalendarevent_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.contracts.migrations.0005_delete_contractamendment",
        "description": "server.contracts.migrations.0005_delete_contractamendment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('contracts', '0004_contractcalendarevent_and_more'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='ContractAmendment',\n        ),\n    ]",
        "detail": "server.contracts.migrations.0005_delete_contractamendment",
        "documentation": {}
    },
    {
        "label": "ContractAdmin",
        "kind": 6,
        "importPath": "server.contracts.admin",
        "description": "server.contracts.admin",
        "peekOfCode": "class ContractAdmin(admin.ModelAdmin):\n    list_display = [\n        'contract_number', 'title', 'client', 'professional', \n        'total_amount', 'status', 'progress_bar', 'is_signed', 'created_at'\n    ]\n    list_filter = ['status', 'payment_type', 'client_signed', 'professional_signed', 'created_at']\n    search_fields = ['contract_number', 'title', 'client__username', 'professional__username']\n    readonly_fields = ['contract_number', 'created_at', 'updated_at', 'remaining_amount']\n    autocomplete_fields = ['client', 'professional', 'project']\n    fieldsets = [",
        "detail": "server.contracts.admin",
        "documentation": {}
    },
    {
        "label": "ContractMilestoneAdmin",
        "kind": 6,
        "importPath": "server.contracts.admin",
        "description": "server.contracts.admin",
        "peekOfCode": "class ContractMilestoneAdmin(admin.ModelAdmin):\n    list_display = ['title', 'contract', 'amount', 'due_date', 'status', 'completion_date']\n    list_filter = ['status', 'due_date', 'completion_date']\n    search_fields = ['title', 'contract__contract_number', 'contract__title']\n    autocomplete_fields = ['contract']\n    readonly_fields = ['created_at', 'updated_at']\n    fieldsets = [\n        ('معلومات المرحلة', {\n            'fields': ('contract', 'title', 'description', 'order')\n        }),",
        "detail": "server.contracts.admin",
        "documentation": {}
    },
    {
        "label": "ContractDocumentAdmin",
        "kind": 6,
        "importPath": "server.contracts.admin",
        "description": "server.contracts.admin",
        "peekOfCode": "class ContractDocumentAdmin(admin.ModelAdmin):\n    list_display = ['name', 'contract', 'document_type', 'uploaded_by', 'is_signed', 'created_at']\n    list_filter = ['document_type', 'is_signed', 'created_at']\n    search_fields = ['name', 'contract__contract_number']\n    autocomplete_fields = ['contract', 'uploaded_by']\n    readonly_fields = ['created_at']\n    fieldsets = [\n        ('معلومات المستند', {\n            'fields': ('contract', 'name', 'document_type')\n        }),",
        "detail": "server.contracts.admin",
        "documentation": {}
    },
    {
        "label": "ContractsConfig",
        "kind": 6,
        "importPath": "server.contracts.apps",
        "description": "server.contracts.apps",
        "peekOfCode": "class ContractsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'contracts'",
        "detail": "server.contracts.apps",
        "documentation": {}
    },
    {
        "label": "Contract",
        "kind": 6,
        "importPath": "server.contracts.models",
        "description": "server.contracts.models",
        "peekOfCode": "class Contract(models.Model):\n    \"\"\"\n    نموذج العقود\n    \"\"\"\n    STATUS_CHOICES = [\n        ('draft', 'Draft'),\n        ('pending', 'Pending'),\n        ('active', 'Active'),\n        ('completed', 'Completed'),\n        ('cancelled', 'Cancelled'),",
        "detail": "server.contracts.models",
        "documentation": {}
    },
    {
        "label": "ContractMilestone",
        "kind": 6,
        "importPath": "server.contracts.models",
        "description": "server.contracts.models",
        "peekOfCode": "class ContractMilestone(models.Model):\n    \"\"\"\n    مراحل العقد\n    \"\"\"\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('in_progress', 'In Progress'),\n        ('completed', 'Completed'),\n        ('cancelled', 'Cancelled'),\n    ]",
        "detail": "server.contracts.models",
        "documentation": {}
    },
    {
        "label": "ContractDocument",
        "kind": 6,
        "importPath": "server.contracts.models",
        "description": "server.contracts.models",
        "peekOfCode": "class ContractDocument(models.Model):\n    \"\"\"\n    مستندات العقد\n    \"\"\"\n    DOCUMENT_TYPE_CHOICES = [\n        ('contract', 'Contract'),\n        ('invoice', 'Invoice'),\n        ('receipt', 'Receipt'),\n        ('change_order', 'Change Order'),\n        ('other', 'Other'),",
        "detail": "server.contracts.models",
        "documentation": {}
    },
    {
        "label": "ContractLocation",
        "kind": 6,
        "importPath": "server.contracts.models",
        "description": "server.contracts.models",
        "peekOfCode": "class ContractLocation(models.Model):\n    \"\"\"\n    مواقع العقد\n    \"\"\"\n    contract = models.ForeignKey(\n        Contract,\n        on_delete=models.CASCADE,\n        related_name='locations'\n    )\n    name = models.CharField(max_length=255)",
        "detail": "server.contracts.models",
        "documentation": {}
    },
    {
        "label": "ContractCalendarEvent",
        "kind": 6,
        "importPath": "server.contracts.models",
        "description": "server.contracts.models",
        "peekOfCode": "class ContractCalendarEvent(models.Model):\n    \"\"\"\n    أحداث تقويم العقد (المواعيد)\n    \"\"\"\n    EVENT_TYPE_CHOICES = [\n        ('meeting', 'Meeting'),\n        ('milestone', 'Milestone'),\n        ('deadline', 'Deadline'),\n        ('review', 'Review'),\n        ('payment', 'Payment'),",
        "detail": "server.contracts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.contracts.models",
        "description": "server.contracts.models",
        "peekOfCode": "User = get_user_model()\nclass Contract(models.Model):\n    \"\"\"\n    نموذج العقود\n    \"\"\"\n    STATUS_CHOICES = [\n        ('draft', 'Draft'),\n        ('pending', 'Pending'),\n        ('active', 'Active'),\n        ('completed', 'Completed'),",
        "detail": "server.contracts.models",
        "documentation": {}
    },
    {
        "label": "UserDetailSerializer",
        "kind": 6,
        "importPath": "server.contracts.serializers",
        "description": "server.contracts.serializers",
        "peekOfCode": "class UserDetailSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for user details in contracts\"\"\"\n    name = serializers.SerializerMethodField()\n    class Meta:\n        model = User\n        fields = ['id', 'first_name', 'last_name', 'email', 'phone', 'avatar', 'name']\n        read_only_fields = ['id']\n    def get_name(self, obj):\n        return f\"{obj.first_name or ''} {obj.last_name or ''}\".strip()\nclass ContractSerializer(serializers.ModelSerializer):",
        "detail": "server.contracts.serializers",
        "documentation": {}
    },
    {
        "label": "ContractSerializer",
        "kind": 6,
        "importPath": "server.contracts.serializers",
        "description": "server.contracts.serializers",
        "peekOfCode": "class ContractSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer أساسي للعقود\"\"\"\n    class Meta:\n        model = Contract\n        fields = [\n            'id', 'contract_number', 'title', 'description',\n            'client', 'professional', 'project',\n            'total_amount', 'paid_amount', 'remaining_amount',\n            'payment_type', 'hourly_rate',\n            'start_date', 'end_date', 'actual_end_date',",
        "detail": "server.contracts.serializers",
        "documentation": {}
    },
    {
        "label": "ContractMilestoneSerializer",
        "kind": 6,
        "importPath": "server.contracts.serializers",
        "description": "server.contracts.serializers",
        "peekOfCode": "class ContractMilestoneSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لمراحل العقد\"\"\"\n    class Meta:\n        model = ContractMilestone\n        fields = [\n            'id', 'contract', 'title', 'description',\n            'amount', 'due_date', 'status',\n            'completion_date', 'payment_date', 'order',\n            'created_at', 'updated_at'\n        ]",
        "detail": "server.contracts.serializers",
        "documentation": {}
    },
    {
        "label": "ContractDocumentSerializer",
        "kind": 6,
        "importPath": "server.contracts.serializers",
        "description": "server.contracts.serializers",
        "peekOfCode": "class ContractDocumentSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لمستندات العقد\"\"\"\n    class Meta:\n        model = ContractDocument\n        fields = [\n            'id', 'contract', 'name', 'document_type',\n            'file', 'uploaded_by', 'is_signed',\n            'created_at'\n        ]\n        read_only_fields = ['id', 'uploaded_by', 'created_at']",
        "detail": "server.contracts.serializers",
        "documentation": {}
    },
    {
        "label": "ContractLocationSerializer",
        "kind": 6,
        "importPath": "server.contracts.serializers",
        "description": "server.contracts.serializers",
        "peekOfCode": "class ContractLocationSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لمواقع العقد\"\"\"\n    class Meta:\n        model = ContractLocation\n        fields = [\n            'id', 'contract', 'name', 'address', 'city', 'state',\n            'zip_code', 'country', 'latitude', 'longitude',\n            'is_primary', 'created_at', 'updated_at'\n        ]\n        read_only_fields = ['id', 'created_at', 'updated_at']",
        "detail": "server.contracts.serializers",
        "documentation": {}
    },
    {
        "label": "ContractCalendarEventSerializer",
        "kind": 6,
        "importPath": "server.contracts.serializers",
        "description": "server.contracts.serializers",
        "peekOfCode": "class ContractCalendarEventSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لأحداث تقويم العقد (المواعيد)\"\"\"\n    class Meta:\n        model = ContractCalendarEvent\n        fields = [\n            'id', 'contract', 'title', 'description', 'event_type',\n            'date', 'start_time', 'end_time', 'location', 'status',\n            'priority', 'assigned_to', 'notes', 'created_at', 'updated_at'\n        ]\n        read_only_fields = ['id', 'created_at', 'updated_at']",
        "detail": "server.contracts.serializers",
        "documentation": {}
    },
    {
        "label": "ContractDetailSerializer",
        "kind": 6,
        "importPath": "server.contracts.serializers",
        "description": "server.contracts.serializers",
        "peekOfCode": "class ContractDetailSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer تفصيلي للعقود\"\"\"\n    professional = UserDetailSerializer(read_only=True)\n    client = UserDetailSerializer(read_only=True)\n    milestones = ContractMilestoneSerializer(many=True, read_only=True)\n    documents = ContractDocumentSerializer(many=True, read_only=True)\n    class Meta:\n        model = Contract\n        fields = [\n            'id', 'contract_number', 'title', 'description',",
        "detail": "server.contracts.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "server.contracts.urls",
        "description": "server.contracts.urls",
        "peekOfCode": "app_name = 'contracts'\nurlpatterns = [\n    # Contract management\n    path('', views.ContractListView.as_view(), name='contract_list'),\n    path('stats/', views.ContractStatsView.as_view(), name='contract_stats'),\n    path('<int:pk>/', views.ContractDetailView.as_view(), name='contract_detail'),\n    path('create/', views.ContractCreateView.as_view(), name='contract_create'),\n    path('<int:pk>/update/', views.ContractUpdateView.as_view(), name='contract_update'),\n    # Contract actions\n    path('<int:pk>/sign/', views.ContractSignView.as_view(), name='contract_sign'),",
        "detail": "server.contracts.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.contracts.urls",
        "description": "server.contracts.urls",
        "peekOfCode": "urlpatterns = [\n    # Contract management\n    path('', views.ContractListView.as_view(), name='contract_list'),\n    path('stats/', views.ContractStatsView.as_view(), name='contract_stats'),\n    path('<int:pk>/', views.ContractDetailView.as_view(), name='contract_detail'),\n    path('create/', views.ContractCreateView.as_view(), name='contract_create'),\n    path('<int:pk>/update/', views.ContractUpdateView.as_view(), name='contract_update'),\n    # Contract actions\n    path('<int:pk>/sign/', views.ContractSignView.as_view(), name='contract_sign'),\n    path('<int:pk>/terminate/', views.ContractTerminateView.as_view(), name='contract_terminate'),",
        "detail": "server.contracts.urls",
        "documentation": {}
    },
    {
        "label": "ContractListView",
        "kind": 6,
        "importPath": "server.contracts.views",
        "description": "server.contracts.views",
        "peekOfCode": "class ContractListView(generics.ListAPIView):\n    \"\"\"قائمة العقود\"\"\"\n    serializer_class = ContractSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        user = self.request.user\n        return Contract.objects.filter(\n            Q(client=user) | Q(professional=user)\n        )\nclass ContractDetailView(generics.RetrieveAPIView):",
        "detail": "server.contracts.views",
        "documentation": {}
    },
    {
        "label": "ContractDetailView",
        "kind": 6,
        "importPath": "server.contracts.views",
        "description": "server.contracts.views",
        "peekOfCode": "class ContractDetailView(generics.RetrieveAPIView):\n    \"\"\"تفاصيل العقد\"\"\"\n    serializer_class = ContractDetailSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        user = self.request.user\n        return Contract.objects.filter(\n            Q(client=user) | Q(professional=user)\n        )\nclass ContractCreateView(generics.CreateAPIView):",
        "detail": "server.contracts.views",
        "documentation": {}
    },
    {
        "label": "ContractCreateView",
        "kind": 6,
        "importPath": "server.contracts.views",
        "description": "server.contracts.views",
        "peekOfCode": "class ContractCreateView(generics.CreateAPIView):\n    \"\"\"إنشاء عقد جديد\"\"\"\n    serializer_class = ContractSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def perform_create(self, serializer):\n        serializer.save(client=self.request.user)\nclass ContractUpdateView(generics.UpdateAPIView):\n    \"\"\"تحديث العقد\"\"\"\n    serializer_class = ContractSerializer\n    permission_classes = [permissions.IsAuthenticated]",
        "detail": "server.contracts.views",
        "documentation": {}
    },
    {
        "label": "ContractUpdateView",
        "kind": 6,
        "importPath": "server.contracts.views",
        "description": "server.contracts.views",
        "peekOfCode": "class ContractUpdateView(generics.UpdateAPIView):\n    \"\"\"تحديث العقد\"\"\"\n    serializer_class = ContractSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    lookup_field = 'pk'\n    def get_queryset(self):\n        user = self.request.user\n        return Contract.objects.filter(\n            Q(client=user) | Q(professional=user)\n        )",
        "detail": "server.contracts.views",
        "documentation": {}
    },
    {
        "label": "ContractSignView",
        "kind": 6,
        "importPath": "server.contracts.views",
        "description": "server.contracts.views",
        "peekOfCode": "class ContractSignView(APIView):\n    \"\"\"توقيع العقد\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    serializer_class = ContractSerializer\n    @extend_schema(\n        operation_id=\"sign_contract\",\n        summary=\"توقيع العقد\",\n        description=\"توقيع العقد من قبل العميل أو المحترف\",\n        tags=[\"Contracts\"],\n        request={",
        "detail": "server.contracts.views",
        "documentation": {}
    },
    {
        "label": "ContractMilestoneListView",
        "kind": 6,
        "importPath": "server.contracts.views",
        "description": "server.contracts.views",
        "peekOfCode": "class ContractMilestoneListView(generics.ListAPIView):\n    \"\"\"قائمة مراحل العقد\"\"\"\n    serializer_class = ContractMilestoneSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        contract_id = self.kwargs.get('pk')\n        user = self.request.user\n        return ContractMilestone.objects.filter(\n            contract_id=contract_id,\n            contract__in=Contract.objects.filter(",
        "detail": "server.contracts.views",
        "documentation": {}
    },
    {
        "label": "ContractDocumentListView",
        "kind": 6,
        "importPath": "server.contracts.views",
        "description": "server.contracts.views",
        "peekOfCode": "class ContractDocumentListView(generics.ListAPIView):\n    \"\"\"قائمة مستندات العقد\"\"\"\n    serializer_class = ContractDocumentSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        contract_id = self.kwargs.get('pk')\n        user = self.request.user\n        return ContractDocument.objects.filter(\n            contract_id=contract_id,\n            contract__in=Contract.objects.filter(",
        "detail": "server.contracts.views",
        "documentation": {}
    },
    {
        "label": "ClientContractListView",
        "kind": 6,
        "importPath": "server.contracts.views",
        "description": "server.contracts.views",
        "peekOfCode": "class ClientContractListView(generics.ListAPIView):\n    \"\"\"قائمة عقود العميل\"\"\"\n    serializer_class = ContractSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        return Contract.objects.filter(client=self.request.user)\nclass ProfessionalContractListView(generics.ListAPIView):\n    \"\"\"قائمة عقود المحترف\"\"\"\n    serializer_class = ContractSerializer\n    permission_classes = [permissions.IsAuthenticated]",
        "detail": "server.contracts.views",
        "documentation": {}
    },
    {
        "label": "ProfessionalContractListView",
        "kind": 6,
        "importPath": "server.contracts.views",
        "description": "server.contracts.views",
        "peekOfCode": "class ProfessionalContractListView(generics.ListAPIView):\n    \"\"\"قائمة عقود المحترف\"\"\"\n    serializer_class = ContractSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        return Contract.objects.filter(professional=self.request.user)\n# Contract Amendments Views (Appointments)\nclass ContractAmendmentListView(generics.ListCreateAPIView):\n    \"\"\"Contract Appointments List - Connected to Calendar App\"\"\"\n    permission_classes = [permissions.IsAuthenticated]",
        "detail": "server.contracts.views",
        "documentation": {}
    },
    {
        "label": "ContractAmendmentListView",
        "kind": 6,
        "importPath": "server.contracts.views",
        "description": "server.contracts.views",
        "peekOfCode": "class ContractAmendmentListView(generics.ListCreateAPIView):\n    \"\"\"Contract Appointments List - Connected to Calendar App\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        contract_id = self.kwargs.get('pk')\n        # Get appointments from calendar_app for this contract\n        return Appointment.objects.filter(\n            project__contracts__id=contract_id\n        ).select_related('professional', 'client', 'project')\n    def list(self, request, *args, **kwargs):",
        "detail": "server.contracts.views",
        "documentation": {}
    },
    {
        "label": "ContractLocationListView",
        "kind": 6,
        "importPath": "server.contracts.views",
        "description": "server.contracts.views",
        "peekOfCode": "class ContractLocationListView(generics.ListCreateAPIView):\n    \"\"\"قائمة مواقع العقد\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    serializer_class = ContractLocationSerializer\n    def get_queryset(self):\n        contract_id = self.kwargs.get('pk')\n        return ContractLocation.objects.filter(contract_id=contract_id)\n    def list(self, request, *args, **kwargs):\n        queryset = self.get_queryset()\n        serializer = self.get_serializer(queryset, many=True)",
        "detail": "server.contracts.views",
        "documentation": {}
    },
    {
        "label": "ContractLocationDetailView",
        "kind": 6,
        "importPath": "server.contracts.views",
        "description": "server.contracts.views",
        "peekOfCode": "class ContractLocationDetailView(generics.RetrieveAPIView):\n    \"\"\"تفاصيل موقع العقد\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    serializer_class = ContractLocationSerializer\n    def get_queryset(self):\n        return ContractLocation.objects.all()\nclass ContractLocationUpdateView(generics.UpdateAPIView):\n    \"\"\"تحديث موقع العقد\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    serializer_class = ContractLocationSerializer",
        "detail": "server.contracts.views",
        "documentation": {}
    },
    {
        "label": "ContractLocationUpdateView",
        "kind": 6,
        "importPath": "server.contracts.views",
        "description": "server.contracts.views",
        "peekOfCode": "class ContractLocationUpdateView(generics.UpdateAPIView):\n    \"\"\"تحديث موقع العقد\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    serializer_class = ContractLocationSerializer\n    def get_queryset(self):\n        return ContractLocation.objects.all()\nclass ContractLocationDeleteView(generics.DestroyAPIView):\n    \"\"\"حذف موقع العقد\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):",
        "detail": "server.contracts.views",
        "documentation": {}
    },
    {
        "label": "ContractLocationDeleteView",
        "kind": 6,
        "importPath": "server.contracts.views",
        "description": "server.contracts.views",
        "peekOfCode": "class ContractLocationDeleteView(generics.DestroyAPIView):\n    \"\"\"حذف موقع العقد\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        return ContractLocation.objects.all()\nclass ContractLocationSetPrimaryView(APIView):\n    \"\"\"تعيين موقع العقد كموقع رئيسي\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def post(self, request, pk):\n        try:",
        "detail": "server.contracts.views",
        "documentation": {}
    },
    {
        "label": "ContractLocationSetPrimaryView",
        "kind": 6,
        "importPath": "server.contracts.views",
        "description": "server.contracts.views",
        "peekOfCode": "class ContractLocationSetPrimaryView(APIView):\n    \"\"\"تعيين موقع العقد كموقع رئيسي\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def post(self, request, pk):\n        try:\n            location = ContractLocation.objects.get(pk=pk)\n            # Set all other locations in the same contract as non-primary\n            ContractLocation.objects.filter(contract=location.contract).update(is_primary=False)\n            # Set this location as primary\n            location.is_primary = True",
        "detail": "server.contracts.views",
        "documentation": {}
    },
    {
        "label": "ContractCalendarEventListView",
        "kind": 6,
        "importPath": "server.contracts.views",
        "description": "server.contracts.views",
        "peekOfCode": "class ContractCalendarEventListView(generics.ListCreateAPIView):\n    \"\"\"قائمة أحداث تقويم العقد (المواعيد)\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    serializer_class = ContractCalendarEventSerializer\n    def get_queryset(self):\n        contract_id = self.kwargs.get('pk')\n        return ContractCalendarEvent.objects.filter(contract_id=contract_id)\n    def list(self, request, *args, **kwargs):\n        queryset = self.get_queryset()\n        serializer = self.get_serializer(queryset, many=True)",
        "detail": "server.contracts.views",
        "documentation": {}
    },
    {
        "label": "ContractStatsView",
        "kind": 6,
        "importPath": "server.contracts.views",
        "description": "server.contracts.views",
        "peekOfCode": "class ContractStatsView(APIView):\n    \"\"\"إحصائيات العقود\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    @extend_schema(\n        operation_id=\"get_contract_stats\",\n        summary=\"إحصائيات العقود\",\n        description=\"الحصول على إحصائيات العقود للمستخدم الحالي\",\n        tags=[\"Contracts\"]\n    )\n    def get(self, request):",
        "detail": "server.contracts.views",
        "documentation": {}
    },
    {
        "label": "ContractTerminateView",
        "kind": 6,
        "importPath": "server.contracts.views",
        "description": "server.contracts.views",
        "peekOfCode": "class ContractTerminateView(APIView):\n    \"\"\"إنهاء العقد وتحويل الأموال للمحترف\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    @extend_schema(\n        operation_id=\"terminate_contract\",\n        summary=\"إنهاء العقد\",\n        description=\"إنهاء العقد من قبل العميل مع تحويل الأموال المتبقية للمحترف\",\n        tags=[\"Contracts\"],\n        request={\n            'type': 'object',",
        "detail": "server.contracts.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.dashboard.migrations.0001_initial",
        "description": "server.dashboard.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='QuickAction',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "server.dashboard.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "DashboardConfig",
        "kind": 6,
        "importPath": "server.dashboard.apps",
        "description": "server.dashboard.apps",
        "peekOfCode": "class DashboardConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'dashboard'",
        "detail": "server.dashboard.apps",
        "documentation": {}
    },
    {
        "label": "DashboardStats",
        "kind": 6,
        "importPath": "server.dashboard.models",
        "description": "server.dashboard.models",
        "peekOfCode": "class DashboardStats(models.Model):\n    \"\"\"Dashboard statistics for users\"\"\"\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='dashboard_stats')\n    active_jobs = models.IntegerField(default=0)\n    total_earned = models.DecimalField(max_digits=10, decimal_places=2, default=0)\n    proposals_sent = models.IntegerField(default=0)\n    success_rate = models.DecimalField(max_digits=5, decimal_places=2, default=0)\n    completed_jobs = models.IntegerField(default=0)\n    pending_payments = models.IntegerField(default=0)\n    average_rating = models.DecimalField(max_digits=3, decimal_places=2, default=0)",
        "detail": "server.dashboard.models",
        "documentation": {}
    },
    {
        "label": "DashboardNotification",
        "kind": 6,
        "importPath": "server.dashboard.models",
        "description": "server.dashboard.models",
        "peekOfCode": "class DashboardNotification(models.Model):\n    \"\"\"Dashboard notifications\"\"\"\n    NOTIFICATION_TYPES = [\n        ('info', 'Information'),\n        ('success', 'Success'),\n        ('warning', 'Warning'),\n        ('error', 'Error'),\n    ]\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='dashboard_notifications')\n    title = models.CharField(max_length=200)",
        "detail": "server.dashboard.models",
        "documentation": {}
    },
    {
        "label": "QuickAction",
        "kind": 6,
        "importPath": "server.dashboard.models",
        "description": "server.dashboard.models",
        "peekOfCode": "class QuickAction(models.Model):\n    \"\"\"Quick actions for dashboard\"\"\"\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='quick_actions')\n    title = models.CharField(max_length=100)\n    description = models.TextField()\n    icon = models.CharField(max_length=50)\n    link = models.CharField(max_length=200)\n    color = models.CharField(max_length=20, default='primary')\n    order = models.IntegerField(default=0)\n    active = models.BooleanField(default=True)",
        "detail": "server.dashboard.models",
        "documentation": {}
    },
    {
        "label": "DashboardAnalytics",
        "kind": 6,
        "importPath": "server.dashboard.models",
        "description": "server.dashboard.models",
        "peekOfCode": "class DashboardAnalytics(models.Model):\n    \"\"\"Dashboard analytics data\"\"\"\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='dashboard_analytics')\n    earnings_chart_data = models.JSONField(default=dict)\n    jobs_chart_data = models.JSONField(default=dict)\n    proposals_chart_data = models.JSONField(default=dict)\n    ratings_chart_data = models.JSONField(default=dict)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        verbose_name_plural = \"Dashboard Analytics\"",
        "detail": "server.dashboard.models",
        "documentation": {}
    },
    {
        "label": "PerformanceMetrics",
        "kind": 6,
        "importPath": "server.dashboard.models",
        "description": "server.dashboard.models",
        "peekOfCode": "class PerformanceMetrics(models.Model):\n    \"\"\"Performance metrics for professionals\"\"\"\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='performance_metrics')\n    completion_rate = models.DecimalField(max_digits=5, decimal_places=2, default=0)\n    average_rating = models.DecimalField(max_digits=3, decimal_places=2, default=0)\n    response_time = models.IntegerField(default=0)  # in hours\n    client_satisfaction = models.DecimalField(max_digits=5, decimal_places=2, default=0)\n    repeat_clients = models.IntegerField(default=0)\n    total_projects = models.IntegerField(default=0)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "server.dashboard.models",
        "documentation": {}
    },
    {
        "label": "PendingAction",
        "kind": 6,
        "importPath": "server.dashboard.models",
        "description": "server.dashboard.models",
        "peekOfCode": "class PendingAction(models.Model):\n    \"\"\"Pending actions for dashboard\"\"\"\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='pending_actions')\n    pending_proposals = models.IntegerField(default=0)\n    pending_contracts = models.IntegerField(default=0)\n    pending_payments = models.IntegerField(default=0)\n    pending_reviews = models.IntegerField(default=0)\n    urgent_jobs = models.IntegerField(default=0)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:",
        "detail": "server.dashboard.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.dashboard.models",
        "description": "server.dashboard.models",
        "peekOfCode": "User = get_user_model()\nclass DashboardStats(models.Model):\n    \"\"\"Dashboard statistics for users\"\"\"\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='dashboard_stats')\n    active_jobs = models.IntegerField(default=0)\n    total_earned = models.DecimalField(max_digits=10, decimal_places=2, default=0)\n    proposals_sent = models.IntegerField(default=0)\n    success_rate = models.DecimalField(max_digits=5, decimal_places=2, default=0)\n    completed_jobs = models.IntegerField(default=0)\n    pending_payments = models.IntegerField(default=0)",
        "detail": "server.dashboard.models",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "server.dashboard.serializers",
        "description": "server.dashboard.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for user data\"\"\"\n    class Meta:\n        model = User\n        fields = ['id', 'first_name', 'last_name', 'email', 'avatar']\nclass DashboardStatsSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for dashboard statistics\"\"\"\n    class Meta:\n        model = DashboardStats\n        fields = '__all__'",
        "detail": "server.dashboard.serializers",
        "documentation": {}
    },
    {
        "label": "DashboardStatsSerializer",
        "kind": 6,
        "importPath": "server.dashboard.serializers",
        "description": "server.dashboard.serializers",
        "peekOfCode": "class DashboardStatsSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for dashboard statistics\"\"\"\n    class Meta:\n        model = DashboardStats\n        fields = '__all__'\nclass DashboardNotificationSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for dashboard notifications\"\"\"\n    class Meta:\n        model = DashboardNotification\n        fields = '__all__'",
        "detail": "server.dashboard.serializers",
        "documentation": {}
    },
    {
        "label": "DashboardNotificationSerializer",
        "kind": 6,
        "importPath": "server.dashboard.serializers",
        "description": "server.dashboard.serializers",
        "peekOfCode": "class DashboardNotificationSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for dashboard notifications\"\"\"\n    class Meta:\n        model = DashboardNotification\n        fields = '__all__'\nclass QuickActionSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for quick actions\"\"\"\n    class Meta:\n        model = QuickAction\n        fields = '__all__'",
        "detail": "server.dashboard.serializers",
        "documentation": {}
    },
    {
        "label": "QuickActionSerializer",
        "kind": 6,
        "importPath": "server.dashboard.serializers",
        "description": "server.dashboard.serializers",
        "peekOfCode": "class QuickActionSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for quick actions\"\"\"\n    class Meta:\n        model = QuickAction\n        fields = '__all__'\nclass DashboardAnalyticsSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for dashboard analytics\"\"\"\n    class Meta:\n        model = DashboardAnalytics\n        fields = '__all__'",
        "detail": "server.dashboard.serializers",
        "documentation": {}
    },
    {
        "label": "DashboardAnalyticsSerializer",
        "kind": 6,
        "importPath": "server.dashboard.serializers",
        "description": "server.dashboard.serializers",
        "peekOfCode": "class DashboardAnalyticsSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for dashboard analytics\"\"\"\n    class Meta:\n        model = DashboardAnalytics\n        fields = '__all__'\nclass PerformanceMetricsSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for performance metrics\"\"\"\n    class Meta:\n        model = PerformanceMetrics\n        fields = '__all__'",
        "detail": "server.dashboard.serializers",
        "documentation": {}
    },
    {
        "label": "PerformanceMetricsSerializer",
        "kind": 6,
        "importPath": "server.dashboard.serializers",
        "description": "server.dashboard.serializers",
        "peekOfCode": "class PerformanceMetricsSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for performance metrics\"\"\"\n    class Meta:\n        model = PerformanceMetrics\n        fields = '__all__'\nclass PendingActionSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for pending actions\"\"\"\n    class Meta:\n        model = PendingAction\n        fields = '__all__'",
        "detail": "server.dashboard.serializers",
        "documentation": {}
    },
    {
        "label": "PendingActionSerializer",
        "kind": 6,
        "importPath": "server.dashboard.serializers",
        "description": "server.dashboard.serializers",
        "peekOfCode": "class PendingActionSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for pending actions\"\"\"\n    class Meta:\n        model = PendingAction\n        fields = '__all__'\n# Complex serializers for dashboard data\nclass ActiveJobSerializer(serializers.Serializer):\n    \"\"\"Serializer for active jobs in dashboard\"\"\"\n    id = serializers.IntegerField()\n    title = serializers.CharField()",
        "detail": "server.dashboard.serializers",
        "documentation": {}
    },
    {
        "label": "ActiveJobSerializer",
        "kind": 6,
        "importPath": "server.dashboard.serializers",
        "description": "server.dashboard.serializers",
        "peekOfCode": "class ActiveJobSerializer(serializers.Serializer):\n    \"\"\"Serializer for active jobs in dashboard\"\"\"\n    id = serializers.IntegerField()\n    title = serializers.CharField()\n    client = UserSerializer()\n    status = serializers.CharField()\n    progress = serializers.IntegerField()\n    budget = serializers.DecimalField(max_digits=10, decimal_places=2)\n    deadline = serializers.DateField()\n    location = serializers.CharField()",
        "detail": "server.dashboard.serializers",
        "documentation": {}
    },
    {
        "label": "NewJobSerializer",
        "kind": 6,
        "importPath": "server.dashboard.serializers",
        "description": "server.dashboard.serializers",
        "peekOfCode": "class NewJobSerializer(serializers.Serializer):\n    \"\"\"Serializer for new jobs in dashboard\"\"\"\n    id = serializers.IntegerField()\n    title = serializers.CharField()\n    client = UserSerializer()\n    budget_min = serializers.DecimalField(max_digits=10, decimal_places=2)\n    budget_max = serializers.DecimalField(max_digits=10, decimal_places=2)\n    location = serializers.CharField()\n    category = serializers.CharField()\n    posted_time = serializers.DateTimeField()",
        "detail": "server.dashboard.serializers",
        "documentation": {}
    },
    {
        "label": "RecentMessageSerializer",
        "kind": 6,
        "importPath": "server.dashboard.serializers",
        "description": "server.dashboard.serializers",
        "peekOfCode": "class RecentMessageSerializer(serializers.Serializer):\n    \"\"\"Serializer for recent messages in dashboard\"\"\"\n    id = serializers.IntegerField()\n    from_user = UserSerializer(source='from')\n    message = serializers.CharField()\n    time = serializers.DateTimeField()\n    unread = serializers.BooleanField()\n    project = serializers.DictField()\n    created_at = serializers.DateTimeField()\nclass RecentEarningSerializer(serializers.Serializer):",
        "detail": "server.dashboard.serializers",
        "documentation": {}
    },
    {
        "label": "RecentEarningSerializer",
        "kind": 6,
        "importPath": "server.dashboard.serializers",
        "description": "server.dashboard.serializers",
        "peekOfCode": "class RecentEarningSerializer(serializers.Serializer):\n    \"\"\"Serializer for recent earnings in dashboard\"\"\"\n    id = serializers.IntegerField()\n    project = serializers.DictField()\n    client = UserSerializer()\n    amount = serializers.DecimalField(max_digits=10, decimal_places=2)\n    date = serializers.DateField()\n    status = serializers.CharField()\n    type = serializers.CharField()\n    created_at = serializers.DateTimeField()",
        "detail": "server.dashboard.serializers",
        "documentation": {}
    },
    {
        "label": "DashboardAnalyticsDataSerializer",
        "kind": 6,
        "importPath": "server.dashboard.serializers",
        "description": "server.dashboard.serializers",
        "peekOfCode": "class DashboardAnalyticsDataSerializer(serializers.Serializer):\n    \"\"\"Serializer for dashboard analytics data\"\"\"\n    earnings_chart = serializers.DictField()\n    jobs_chart = serializers.DictField()\n    proposals_chart = serializers.DictField()\n    ratings_chart = serializers.DictField()\nclass DashboardResponseSerializer(serializers.Serializer):\n    \"\"\"Complete dashboard response serializer\"\"\"\n    stats = DashboardStatsSerializer()\n    active_jobs = ActiveJobSerializer(many=True)",
        "detail": "server.dashboard.serializers",
        "documentation": {}
    },
    {
        "label": "DashboardResponseSerializer",
        "kind": 6,
        "importPath": "server.dashboard.serializers",
        "description": "server.dashboard.serializers",
        "peekOfCode": "class DashboardResponseSerializer(serializers.Serializer):\n    \"\"\"Complete dashboard response serializer\"\"\"\n    stats = DashboardStatsSerializer()\n    active_jobs = ActiveJobSerializer(many=True)\n    new_jobs = NewJobSerializer(many=True)\n    recent_messages = RecentMessageSerializer(many=True)\n    recent_earnings = RecentEarningSerializer(many=True)\n    analytics = DashboardAnalyticsDataSerializer()\nclass ProfessionalDashboardSerializer(serializers.Serializer):\n    \"\"\"Professional dashboard specific serializer\"\"\"",
        "detail": "server.dashboard.serializers",
        "documentation": {}
    },
    {
        "label": "ProfessionalDashboardSerializer",
        "kind": 6,
        "importPath": "server.dashboard.serializers",
        "description": "server.dashboard.serializers",
        "peekOfCode": "class ProfessionalDashboardSerializer(serializers.Serializer):\n    \"\"\"Professional dashboard specific serializer\"\"\"\n    stats = DashboardStatsSerializer()\n    active_jobs = ActiveJobSerializer(many=True)\n    new_jobs = NewJobSerializer(many=True)\n    recent_messages = RecentMessageSerializer(many=True)\n    recent_earnings = RecentEarningSerializer(many=True)\n    analytics = DashboardAnalyticsDataSerializer()\n    performance_metrics = PerformanceMetricsSerializer()\n    pending_actions = PendingActionSerializer()",
        "detail": "server.dashboard.serializers",
        "documentation": {}
    },
    {
        "label": "ClientDashboardSerializer",
        "kind": 6,
        "importPath": "server.dashboard.serializers",
        "description": "server.dashboard.serializers",
        "peekOfCode": "class ClientDashboardSerializer(serializers.Serializer):\n    \"\"\"Client dashboard specific serializer\"\"\"\n    stats = DashboardStatsSerializer()\n    active_projects = ActiveJobSerializer(many=True)\n    recent_messages = RecentMessageSerializer(many=True)\n    analytics = DashboardAnalyticsDataSerializer()\n    pending_actions = PendingActionSerializer()\n    notifications = DashboardNotificationSerializer(many=True)\n    quick_actions = QuickActionSerializer(many=True)",
        "detail": "server.dashboard.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.dashboard.serializers",
        "description": "server.dashboard.serializers",
        "peekOfCode": "User = get_user_model()\nclass UserSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for user data\"\"\"\n    class Meta:\n        model = User\n        fields = ['id', 'first_name', 'last_name', 'email', 'avatar']\nclass DashboardStatsSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for dashboard statistics\"\"\"\n    class Meta:\n        model = DashboardStats",
        "detail": "server.dashboard.serializers",
        "documentation": {}
    },
    {
        "label": "test_view",
        "kind": 2,
        "importPath": "server.dashboard.urls",
        "description": "server.dashboard.urls",
        "peekOfCode": "def test_view(request):\n    return JsonResponse({\"message\": \"Dashboard URLs are working!\", \"status\": \"success\"})\nurlpatterns = [\n    # Test endpoint\n    path('test/', test_view, name='dashboard_test'),\n    # Dashboard endpoints\n    path('professional/', views.professional_dashboard, name='professional_dashboard'),\n    path('client/', views.client_dashboard, name='client_dashboard'),\n    path('stats/', views.dashboard_stats, name='dashboard_stats'),\n    path('active-jobs/', views.active_jobs, name='active_jobs'),",
        "detail": "server.dashboard.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.dashboard.urls",
        "description": "server.dashboard.urls",
        "peekOfCode": "urlpatterns = [\n    # Test endpoint\n    path('test/', test_view, name='dashboard_test'),\n    # Dashboard endpoints\n    path('professional/', views.professional_dashboard, name='professional_dashboard'),\n    path('client/', views.client_dashboard, name='client_dashboard'),\n    path('stats/', views.dashboard_stats, name='dashboard_stats'),\n    path('active-jobs/', views.active_jobs, name='active_jobs'),\n    path('new-jobs/', views.new_jobs, name='new_jobs'),\n    path('recent-messages/', views.recent_messages, name='recent_messages'),",
        "detail": "server.dashboard.urls",
        "documentation": {}
    },
    {
        "label": "professional_dashboard",
        "kind": 2,
        "importPath": "server.dashboard.views",
        "description": "server.dashboard.views",
        "peekOfCode": "def professional_dashboard(request):\n    \"\"\"Get professional dashboard data\"\"\"\n    try:\n        print(f\"🔍 Professional dashboard request for user: {request.user.email}\")\n        user = request.user\n        # Get or create dashboard stats\n        stats, created = DashboardStats.objects.get_or_create(user=user)\n        # Calculate stats from actual data\n        active_contracts = Contract.objects.filter(professional=user, status__in=['active', 'in_progress'])\n        completed_contracts = Contract.objects.filter(professional=user, status='completed')",
        "detail": "server.dashboard.views",
        "documentation": {}
    },
    {
        "label": "client_dashboard",
        "kind": 2,
        "importPath": "server.dashboard.views",
        "description": "server.dashboard.views",
        "peekOfCode": "def client_dashboard(request):\n    \"\"\"Get client dashboard data\"\"\"\n    print(\"🚀 CLIENT DASHBOARD VIEW CALLED!\")\n    print(f\"🔍 Request method: {request.method}\")\n    print(f\"🔍 Request path: {request.path}\")\n    try:\n        user = request.user\n        print(f\"🔍 Client dashboard request for user: {user.email}\")\n        # Get or create dashboard stats\n        stats, created = DashboardStats.objects.get_or_create(user=user)",
        "detail": "server.dashboard.views",
        "documentation": {}
    },
    {
        "label": "dashboard_stats",
        "kind": 2,
        "importPath": "server.dashboard.views",
        "description": "server.dashboard.views",
        "peekOfCode": "def dashboard_stats(request):\n    \"\"\"Get dashboard statistics\"\"\"\n    try:\n        user = request.user\n        stats, created = DashboardStats.objects.get_or_create(user=user)\n        return Response(DashboardStatsSerializer(stats).data, status=status.HTTP_200_OK)\n    except Exception as e:\n        return Response(\n            {'error': f'Failed to load stats: {str(e)}'}, \n            status=status.HTTP_500_INTERNAL_SERVER_ERROR",
        "detail": "server.dashboard.views",
        "documentation": {}
    },
    {
        "label": "active_jobs",
        "kind": 2,
        "importPath": "server.dashboard.views",
        "description": "server.dashboard.views",
        "peekOfCode": "def active_jobs(request):\n    \"\"\"Get active jobs for dashboard\"\"\"\n    try:\n        user = request.user\n        if hasattr(user, 'professional'):\n            # Professional view\n            active_contracts = Contract.objects.filter(professional=user, status__in=['active', 'in_progress'])\n        else:\n            # Client view\n            active_contracts = Contract.objects.filter(client=user, status__in=['active', 'in_progress'])",
        "detail": "server.dashboard.views",
        "documentation": {}
    },
    {
        "label": "new_jobs",
        "kind": 2,
        "importPath": "server.dashboard.views",
        "description": "server.dashboard.views",
        "peekOfCode": "def new_jobs(request):\n    \"\"\"Get new jobs for professionals\"\"\"\n    try:\n        user = request.user\n        if not hasattr(user, 'professional'):\n            return Response({'error': 'Only professionals can view new jobs'}, status=status.HTTP_403_FORBIDDEN)\n        recent_projects = Project.objects.filter(\n            status='open',\n            created_at__gte=timezone.now() - timedelta(days=30)\n        ).exclude(",
        "detail": "server.dashboard.views",
        "documentation": {}
    },
    {
        "label": "recent_messages",
        "kind": 2,
        "importPath": "server.dashboard.views",
        "description": "server.dashboard.views",
        "peekOfCode": "def recent_messages(request):\n    \"\"\"Get recent messages for dashboard\"\"\"\n    try:\n        user = request.user\n        user_conversations = Conversation.objects.filter(participants=user)\n        messages_data = []\n        for conversation in user_conversations[:5]:\n            last_message = conversation.messages.last()\n            if last_message and last_message.sender != user:\n                messages_data.append({",
        "detail": "server.dashboard.views",
        "documentation": {}
    },
    {
        "label": "recent_earnings",
        "kind": 2,
        "importPath": "server.dashboard.views",
        "description": "server.dashboard.views",
        "peekOfCode": "def recent_earnings(request):\n    \"\"\"Get recent earnings for professionals\"\"\"\n    try:\n        user = request.user\n        if not hasattr(user, 'professional'):\n            return Response({'error': 'Only professionals can view earnings'}, status=status.HTTP_403_FORBIDDEN)\n        recent_payments = Payment.objects.filter(\n            contract__professional=user,\n            status='completed'\n        ).order_by('-created_at')[:10]",
        "detail": "server.dashboard.views",
        "documentation": {}
    },
    {
        "label": "dashboard_analytics",
        "kind": 2,
        "importPath": "server.dashboard.views",
        "description": "server.dashboard.views",
        "peekOfCode": "def dashboard_analytics(request):\n    \"\"\"Get dashboard analytics data\"\"\"\n    try:\n        user = request.user\n        timeframe = request.GET.get('timeframe', 'month')\n        analytics = {\n            'earnings_chart': {\n                'labels': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n                'data': [1000, 1500, 2000, 1800, 2500, 3000]\n            },",
        "detail": "server.dashboard.views",
        "documentation": {}
    },
    {
        "label": "update_job_progress",
        "kind": 2,
        "importPath": "server.dashboard.views",
        "description": "server.dashboard.views",
        "peekOfCode": "def update_job_progress(request, job_id):\n    \"\"\"Update job progress\"\"\"\n    try:\n        user = request.user\n        contract = Contract.objects.get(id=job_id, professional=user)\n        progress = request.data.get('progress', 0)\n        status = request.data.get('status', contract.status)\n        notes = request.data.get('notes', '')\n        contract.progress = progress\n        contract.status = status",
        "detail": "server.dashboard.views",
        "documentation": {}
    },
    {
        "label": "mark_message_read",
        "kind": 2,
        "importPath": "server.dashboard.views",
        "description": "server.dashboard.views",
        "peekOfCode": "def mark_message_read(request, message_id):\n    \"\"\"Mark message as read\"\"\"\n    try:\n        user = request.user\n        message = Message.objects.get(id=message_id)\n        message.read_by.add(user)\n        return Response({'message': 'Message marked as read'}, status=status.HTTP_200_OK)\n    except Message.DoesNotExist:\n        return Response({'error': 'Message not found'}, status=status.HTTP_404_NOT_FOUND)\n    except Exception as e:",
        "detail": "server.dashboard.views",
        "documentation": {}
    },
    {
        "label": "job_recommendations",
        "kind": 2,
        "importPath": "server.dashboard.views",
        "description": "server.dashboard.views",
        "peekOfCode": "def job_recommendations(request):\n    \"\"\"Get job recommendations for professionals\"\"\"\n    try:\n        user = request.user\n        if not hasattr(user, 'professional'):\n            return Response({'error': 'Only professionals can view job recommendations'}, status=status.HTTP_403_FORBIDDEN)\n        # Get projects that match professional's skills\n        professional_skills = user.professional.skills.all() if hasattr(user, 'professional') else []\n        recommended_projects = Project.objects.filter(\n            status='open',",
        "detail": "server.dashboard.views",
        "documentation": {}
    },
    {
        "label": "performance_metrics",
        "kind": 2,
        "importPath": "server.dashboard.views",
        "description": "server.dashboard.views",
        "peekOfCode": "def performance_metrics(request):\n    \"\"\"Get performance metrics for professionals\"\"\"\n    try:\n        user = request.user\n        if not hasattr(user, 'professional'):\n            return Response({'error': 'Only professionals can view performance metrics'}, status=status.HTTP_403_FORBIDDEN)\n        metrics, created = PerformanceMetrics.objects.get_or_create(user=user)\n        # Calculate metrics from actual data\n        completed_contracts = Contract.objects.filter(professional=user, status='completed')\n        total_contracts = Contract.objects.filter(professional=user)",
        "detail": "server.dashboard.views",
        "documentation": {}
    },
    {
        "label": "upcoming_deadlines",
        "kind": 2,
        "importPath": "server.dashboard.views",
        "description": "server.dashboard.views",
        "peekOfCode": "def upcoming_deadlines(request):\n    \"\"\"Get upcoming deadlines\"\"\"\n    try:\n        user = request.user\n        if hasattr(user, 'professional'):\n            contracts = Contract.objects.filter(professional=user, status__in=['active', 'in_progress'])\n        else:\n            contracts = Contract.objects.filter(client=user, status__in=['active', 'in_progress'])\n        upcoming_deadlines = []\n        for contract in contracts:",
        "detail": "server.dashboard.views",
        "documentation": {}
    },
    {
        "label": "pending_actions",
        "kind": 2,
        "importPath": "server.dashboard.views",
        "description": "server.dashboard.views",
        "peekOfCode": "def pending_actions(request):\n    \"\"\"Get pending actions\"\"\"\n    try:\n        user = request.user\n        pending_actions, created = PendingAction.objects.get_or_create(user=user)\n        if hasattr(user, 'professional'):\n            # Professional view\n            pending_actions.pending_proposals = Proposal.objects.filter(professional=user, status='pending').count()\n            pending_actions.pending_contracts = Contract.objects.filter(professional=user, status='pending').count()\n            pending_actions.pending_payments = Payment.objects.filter(contract__professional=user, status='pending').count()",
        "detail": "server.dashboard.views",
        "documentation": {}
    },
    {
        "label": "notifications",
        "kind": 2,
        "importPath": "server.dashboard.views",
        "description": "server.dashboard.views",
        "peekOfCode": "def notifications(request):\n    \"\"\"Get dashboard notifications\"\"\"\n    try:\n        user = request.user\n        notifications = DashboardNotification.objects.filter(user=user).order_by('-created_at')[:20]\n        return Response(DashboardNotificationSerializer(notifications, many=True).data, status=status.HTTP_200_OK)\n    except Exception as e:\n        return Response(\n            {'error': f'Failed to load notifications: {str(e)}'}, \n            status=status.HTTP_500_INTERNAL_SERVER_ERROR",
        "detail": "server.dashboard.views",
        "documentation": {}
    },
    {
        "label": "mark_notification_read",
        "kind": 2,
        "importPath": "server.dashboard.views",
        "description": "server.dashboard.views",
        "peekOfCode": "def mark_notification_read(request, notification_id):\n    \"\"\"Mark notification as read\"\"\"\n    try:\n        user = request.user\n        notification = DashboardNotification.objects.get(id=notification_id, user=user)\n        notification.read = True\n        notification.save()\n        return Response({'message': 'Notification marked as read'}, status=status.HTTP_200_OK)\n    except DashboardNotification.DoesNotExist:\n        return Response({'error': 'Notification not found'}, status=status.HTTP_404_NOT_FOUND)",
        "detail": "server.dashboard.views",
        "documentation": {}
    },
    {
        "label": "quick_actions",
        "kind": 2,
        "importPath": "server.dashboard.views",
        "description": "server.dashboard.views",
        "peekOfCode": "def quick_actions(request):\n    \"\"\"Get quick actions for dashboard\"\"\"\n    try:\n        user = request.user\n        quick_actions = QuickAction.objects.filter(user=user, active=True).order_by('order')\n        return Response(QuickActionSerializer(quick_actions, many=True).data, status=status.HTTP_200_OK)\n    except Exception as e:\n        return Response(\n            {'error': f'Failed to load quick actions: {str(e)}'}, \n            status=status.HTTP_500_INTERNAL_SERVER_ERROR",
        "detail": "server.dashboard.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.dashboard.views",
        "description": "server.dashboard.views",
        "peekOfCode": "User = get_user_model()\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef professional_dashboard(request):\n    \"\"\"Get professional dashboard data\"\"\"\n    try:\n        print(f\"🔍 Professional dashboard request for user: {request.user.email}\")\n        user = request.user\n        # Get or create dashboard stats\n        stats, created = DashboardStats.objects.get_or_create(user=user)",
        "detail": "server.dashboard.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.file_management.migrations.0001_initial",
        "description": "server.file_management.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='FileCategory',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "server.file_management.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "FileCategoryAdmin",
        "kind": 6,
        "importPath": "server.file_management.admin",
        "description": "server.file_management.admin",
        "peekOfCode": "class FileCategoryAdmin(admin.ModelAdmin):\n    list_display = ['name', 'max_file_size', 'is_active', 'created_at']\n    list_filter = ['is_active', 'created_at']\n    search_fields = ['name', 'description']\n    readonly_fields = ['created_at']\n@admin.register(UploadedFile)\nclass UploadedFileAdmin(admin.ModelAdmin):\n    list_display = [\n        'original_filename', 'uploaded_by', 'file_type', \n        'file_size_formatted', 'upload_purpose', 'is_public', ",
        "detail": "server.file_management.admin",
        "documentation": {}
    },
    {
        "label": "UploadedFileAdmin",
        "kind": 6,
        "importPath": "server.file_management.admin",
        "description": "server.file_management.admin",
        "peekOfCode": "class UploadedFileAdmin(admin.ModelAdmin):\n    list_display = [\n        'original_filename', 'uploaded_by', 'file_type', \n        'file_size_formatted', 'upload_purpose', 'is_public', \n        'is_safe', 'created_at'\n    ]\n    list_filter = [\n        'file_type', 'upload_purpose', 'is_public', 'is_safe', \n        'is_temp', 'created_at'\n    ]",
        "detail": "server.file_management.admin",
        "documentation": {}
    },
    {
        "label": "FileShareAdmin",
        "kind": 6,
        "importPath": "server.file_management.admin",
        "description": "server.file_management.admin",
        "peekOfCode": "class FileShareAdmin(admin.ModelAdmin):\n    list_display = [\n        'file', 'shared_with', 'shared_by', 'permission', \n        'access_count', 'expires_at', 'shared_at'\n    ]\n    list_filter = ['permission', 'shared_at', 'expires_at']\n    search_fields = [\n        'file__original_filename', 'shared_with__username', 'shared_by__username'\n    ]\n    readonly_fields = ['access_count', 'last_accessed', 'shared_at']",
        "detail": "server.file_management.admin",
        "documentation": {}
    },
    {
        "label": "FileVersionAdmin",
        "kind": 6,
        "importPath": "server.file_management.admin",
        "description": "server.file_management.admin",
        "peekOfCode": "class FileVersionAdmin(admin.ModelAdmin):\n    list_display = [\n        'original_file', 'version_number', 'uploaded_by', \n        'file_size', 'created_at'\n    ]\n    list_filter = ['created_at']\n    search_fields = ['original_file__original_filename', 'uploaded_by__username']\n    readonly_fields = ['created_at']\n@admin.register(FileComment)\nclass FileCommentAdmin(admin.ModelAdmin):",
        "detail": "server.file_management.admin",
        "documentation": {}
    },
    {
        "label": "FileCommentAdmin",
        "kind": 6,
        "importPath": "server.file_management.admin",
        "description": "server.file_management.admin",
        "peekOfCode": "class FileCommentAdmin(admin.ModelAdmin):\n    list_display = ['file', 'commenter', 'comment', 'created_at']\n    list_filter = ['created_at']\n    search_fields = ['file__original_filename', 'commenter__username', 'comment']\n    readonly_fields = ['created_at', 'updated_at']\n@admin.register(FileActivityLog)\nclass FileActivityLogAdmin(admin.ModelAdmin):\n    list_display = [\n        'file', 'user', 'activity_type', 'ip_address', 'created_at'\n    ]",
        "detail": "server.file_management.admin",
        "documentation": {}
    },
    {
        "label": "FileActivityLogAdmin",
        "kind": 6,
        "importPath": "server.file_management.admin",
        "description": "server.file_management.admin",
        "peekOfCode": "class FileActivityLogAdmin(admin.ModelAdmin):\n    list_display = [\n        'file', 'user', 'activity_type', 'ip_address', 'created_at'\n    ]\n    list_filter = ['activity_type', 'created_at']\n    search_fields = [\n        'file__original_filename', 'user__username', 'description'\n    ]\n    readonly_fields = ['created_at']\n    date_hierarchy = 'created_at'",
        "detail": "server.file_management.admin",
        "documentation": {}
    },
    {
        "label": "FileFolderAdmin",
        "kind": 6,
        "importPath": "server.file_management.admin",
        "description": "server.file_management.admin",
        "peekOfCode": "class FileFolderAdmin(admin.ModelAdmin):\n    list_display = ['name', 'owner', 'parent', 'is_public', 'created_at']\n    list_filter = ['is_public', 'created_at']\n    search_fields = ['name', 'owner__username', 'description']\n    readonly_fields = ['created_at', 'updated_at']\n@admin.register(FileSettings)\nclass FileSettingsAdmin(admin.ModelAdmin):\n    list_display = [\n        'max_file_size_general', 'storage_limit_client', \n        'storage_limit_professional', 'is_active', 'updated_at'",
        "detail": "server.file_management.admin",
        "documentation": {}
    },
    {
        "label": "FileSettingsAdmin",
        "kind": 6,
        "importPath": "server.file_management.admin",
        "description": "server.file_management.admin",
        "peekOfCode": "class FileSettingsAdmin(admin.ModelAdmin):\n    list_display = [\n        'max_file_size_general', 'storage_limit_client', \n        'storage_limit_professional', 'is_active', 'updated_at'\n    ]\n    readonly_fields = ['created_at', 'updated_at']\n    fieldsets = (\n        ('File Size Limits', {\n            'fields': (\n                'max_file_size_general', 'max_file_size_image', ",
        "detail": "server.file_management.admin",
        "documentation": {}
    },
    {
        "label": "FileManagementConfig",
        "kind": 6,
        "importPath": "server.file_management.apps",
        "description": "server.file_management.apps",
        "peekOfCode": "class FileManagementConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'file_management'\n    verbose_name = 'File Management'",
        "detail": "server.file_management.apps",
        "documentation": {}
    },
    {
        "label": "FileCategory",
        "kind": 6,
        "importPath": "server.file_management.models",
        "description": "server.file_management.models",
        "peekOfCode": "class FileCategory(models.Model):\n    \"\"\"تصنيفات الملفات\"\"\"\n    name = models.CharField(max_length=100, unique=True)\n    description = models.TextField(blank=True)\n    allowed_extensions = models.JSONField(default=list, blank=True)\n    max_file_size = models.PositiveIntegerField(default=10485760)  # 10MB default\n    icon = models.CharField(max_length=50, blank=True)\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    class Meta:",
        "detail": "server.file_management.models",
        "documentation": {}
    },
    {
        "label": "UploadedFile",
        "kind": 6,
        "importPath": "server.file_management.models",
        "description": "server.file_management.models",
        "peekOfCode": "class UploadedFile(models.Model):\n    \"\"\"الملفات المرفوعة\"\"\"\n    FILE_TYPES = [\n        ('image', 'Image'),\n        ('document', 'Document'), \n        ('video', 'Video'),\n        ('audio', 'Audio'),\n        ('archive', 'Archive'),\n        ('other', 'Other'),\n    ]",
        "detail": "server.file_management.models",
        "documentation": {}
    },
    {
        "label": "FileShare",
        "kind": 6,
        "importPath": "server.file_management.models",
        "description": "server.file_management.models",
        "peekOfCode": "class FileShare(models.Model):\n    \"\"\"مشاركة الملفات\"\"\"\n    PERMISSION_TYPES = [\n        ('view', 'View Only'),\n        ('download', 'Download'),\n        ('edit', 'Edit'),\n    ]\n    file = models.ForeignKey(UploadedFile, on_delete=models.CASCADE, related_name='shares')\n    shared_with = models.ForeignKey(User, on_delete=models.CASCADE, related_name='shared_files')\n    shared_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='files_shared')",
        "detail": "server.file_management.models",
        "documentation": {}
    },
    {
        "label": "FileVersion",
        "kind": 6,
        "importPath": "server.file_management.models",
        "description": "server.file_management.models",
        "peekOfCode": "class FileVersion(models.Model):\n    \"\"\"إصدارات الملفات\"\"\"\n    original_file = models.ForeignKey(\n        UploadedFile, \n        on_delete=models.CASCADE, \n        related_name='versions'\n    )\n    version_number = models.PositiveIntegerField()\n    file = models.FileField(upload_to=user_file_path)\n    file_size = models.PositiveIntegerField()",
        "detail": "server.file_management.models",
        "documentation": {}
    },
    {
        "label": "FileComment",
        "kind": 6,
        "importPath": "server.file_management.models",
        "description": "server.file_management.models",
        "peekOfCode": "class FileComment(models.Model):\n    \"\"\"تعليقات على الملفات\"\"\"\n    file = models.ForeignKey(UploadedFile, on_delete=models.CASCADE, related_name='comments')\n    commenter = models.ForeignKey(User, on_delete=models.CASCADE, related_name='file_comments')\n    comment = models.TextField()\n    # Thread support\n    parent_comment = models.ForeignKey(\n        'self', \n        on_delete=models.CASCADE, \n        null=True, ",
        "detail": "server.file_management.models",
        "documentation": {}
    },
    {
        "label": "FileActivityLog",
        "kind": 6,
        "importPath": "server.file_management.models",
        "description": "server.file_management.models",
        "peekOfCode": "class FileActivityLog(models.Model):\n    \"\"\"سجل أنشطة الملفات\"\"\"\n    ACTIVITY_TYPES = [\n        ('upload', 'Upload'),\n        ('download', 'Download'),\n        ('view', 'View'),\n        ('share', 'Share'),\n        ('delete', 'Delete'),\n        ('edit', 'Edit'),\n        ('comment', 'Comment'),",
        "detail": "server.file_management.models",
        "documentation": {}
    },
    {
        "label": "FileFolder",
        "kind": 6,
        "importPath": "server.file_management.models",
        "description": "server.file_management.models",
        "peekOfCode": "class FileFolder(models.Model):\n    \"\"\"مجلدات الملفات\"\"\"\n    name = models.CharField(max_length=255)\n    description = models.TextField(blank=True)\n    # Hierarchy\n    parent = models.ForeignKey(\n        'self', \n        on_delete=models.CASCADE, \n        null=True, \n        blank=True,",
        "detail": "server.file_management.models",
        "documentation": {}
    },
    {
        "label": "FileSettings",
        "kind": 6,
        "importPath": "server.file_management.models",
        "description": "server.file_management.models",
        "peekOfCode": "class FileSettings(models.Model):\n    \"\"\"إعدادات الملفات\"\"\"\n    # File size limits (in bytes)\n    max_file_size_general = models.PositiveIntegerField(default=10485760)  # 10MB\n    max_file_size_image = models.PositiveIntegerField(default=5242880)    # 5MB\n    max_file_size_video = models.PositiveIntegerField(default=104857600)  # 100MB\n    max_file_size_document = models.PositiveIntegerField(default=10485760) # 10MB\n    # Storage limits per user\n    storage_limit_client = models.PositiveIntegerField(default=1073741824)      # 1GB\n    storage_limit_professional = models.PositiveIntegerField(default=5368709120) # 5GB",
        "detail": "server.file_management.models",
        "documentation": {}
    },
    {
        "label": "user_file_path",
        "kind": 2,
        "importPath": "server.file_management.models",
        "description": "server.file_management.models",
        "peekOfCode": "def user_file_path(instance, filename):\n    \"\"\"Generate file path for user uploads\"\"\"\n    # Extract file extension\n    ext = filename.split('.')[-1]\n    # Generate unique filename\n    filename = f\"{uuid.uuid4().hex}.{ext}\"\n    # Create path: files/user_id/year/month/filename\n    return f\"files/{instance.uploaded_by.id}/{timezone.now().year}/{timezone.now().month}/{filename}\"\nclass UploadedFile(models.Model):\n    \"\"\"الملفات المرفوعة\"\"\"",
        "detail": "server.file_management.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.file_management.models",
        "description": "server.file_management.models",
        "peekOfCode": "User = get_user_model()\nclass FileCategory(models.Model):\n    \"\"\"تصنيفات الملفات\"\"\"\n    name = models.CharField(max_length=100, unique=True)\n    description = models.TextField(blank=True)\n    allowed_extensions = models.JSONField(default=list, blank=True)\n    max_file_size = models.PositiveIntegerField(default=10485760)  # 10MB default\n    icon = models.CharField(max_length=50, blank=True)\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)",
        "detail": "server.file_management.models",
        "documentation": {}
    },
    {
        "label": "UserBasicSerializer",
        "kind": 6,
        "importPath": "server.file_management.serializers",
        "description": "server.file_management.serializers",
        "peekOfCode": "class UserBasicSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer أساسي للمستخدم\"\"\"\n    class Meta:\n        model = User\n        fields = ['id', 'username', 'first_name', 'last_name', 'avatar']\nclass FileCategorySerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لتصنيفات الملفات\"\"\"\n    class Meta:\n        model = FileCategory\n        fields = [",
        "detail": "server.file_management.serializers",
        "documentation": {}
    },
    {
        "label": "FileCategorySerializer",
        "kind": 6,
        "importPath": "server.file_management.serializers",
        "description": "server.file_management.serializers",
        "peekOfCode": "class FileCategorySerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لتصنيفات الملفات\"\"\"\n    class Meta:\n        model = FileCategory\n        fields = [\n            'id', 'name', 'description', 'allowed_extensions', \n            'max_file_size', 'icon', 'is_active', 'created_at'\n        ]\n        read_only_fields = ['id', 'created_at']\nclass UploadedFileSerializer(serializers.ModelSerializer):",
        "detail": "server.file_management.serializers",
        "documentation": {}
    },
    {
        "label": "UploadedFileSerializer",
        "kind": 6,
        "importPath": "server.file_management.serializers",
        "description": "server.file_management.serializers",
        "peekOfCode": "class UploadedFileSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer للملفات المرفوعة\"\"\"\n    uploaded_by = UserBasicSerializer(read_only=True)\n    file_size_formatted = serializers.ReadOnlyField()\n    file_extension = serializers.ReadOnlyField()\n    category_name = serializers.CharField(source='category.name', read_only=True)\n    class Meta:\n        model = UploadedFile\n        fields = [\n            'id', 'file_id', 'file', 'original_filename', 'file_size', ",
        "detail": "server.file_management.serializers",
        "documentation": {}
    },
    {
        "label": "FileUploadSerializer",
        "kind": 6,
        "importPath": "server.file_management.serializers",
        "description": "server.file_management.serializers",
        "peekOfCode": "class FileUploadSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لرفع الملفات\"\"\"\n    file = serializers.FileField()\n    class Meta:\n        model = UploadedFile\n        fields = [\n            'file', 'upload_purpose', 'category', 'description', \n            'tags', 'is_public', 'is_temp', 'expires_at'\n        ]\n    def validate_file(self, value):",
        "detail": "server.file_management.serializers",
        "documentation": {}
    },
    {
        "label": "FileShareSerializer",
        "kind": 6,
        "importPath": "server.file_management.serializers",
        "description": "server.file_management.serializers",
        "peekOfCode": "class FileShareSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لمشاركة الملفات\"\"\"\n    file = UploadedFileSerializer(read_only=True)\n    shared_with = UserBasicSerializer(read_only=True)\n    shared_by = UserBasicSerializer(read_only=True)\n    class Meta:\n        model = FileShare\n        fields = [\n            'id', 'file', 'shared_with', 'shared_by', 'permission',\n            'expires_at', 'access_count', 'max_access_count',",
        "detail": "server.file_management.serializers",
        "documentation": {}
    },
    {
        "label": "FileShareCreateSerializer",
        "kind": 6,
        "importPath": "server.file_management.serializers",
        "description": "server.file_management.serializers",
        "peekOfCode": "class FileShareCreateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لإنشاء مشاركة ملف\"\"\"\n    file_id = serializers.UUIDField(write_only=True)\n    user_id = serializers.IntegerField(write_only=True)\n    class Meta:\n        model = FileShare\n        fields = [\n            'file_id', 'user_id', 'permission', 'expires_at', 'max_access_count'\n        ]\n    def validate_file_id(self, value):",
        "detail": "server.file_management.serializers",
        "documentation": {}
    },
    {
        "label": "FileVersionSerializer",
        "kind": 6,
        "importPath": "server.file_management.serializers",
        "description": "server.file_management.serializers",
        "peekOfCode": "class FileVersionSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لإصدارات الملفات\"\"\"\n    uploaded_by = UserBasicSerializer(read_only=True)\n    class Meta:\n        model = FileVersion\n        fields = [\n            'id', 'version_number', 'file', 'file_size', \n            'change_description', 'uploaded_by', 'created_at'\n        ]\n        read_only_fields = ['id', 'version_number', 'file_size', 'uploaded_by', 'created_at']",
        "detail": "server.file_management.serializers",
        "documentation": {}
    },
    {
        "label": "FileCommentSerializer",
        "kind": 6,
        "importPath": "server.file_management.serializers",
        "description": "server.file_management.serializers",
        "peekOfCode": "class FileCommentSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لتعليقات الملفات\"\"\"\n    commenter = UserBasicSerializer(read_only=True)\n    replies = serializers.SerializerMethodField()\n    class Meta:\n        model = FileComment\n        fields = [\n            'id', 'comment', 'commenter', 'parent_comment', \n            'replies', 'created_at', 'updated_at'\n        ]",
        "detail": "server.file_management.serializers",
        "documentation": {}
    },
    {
        "label": "FileFolderSerializer",
        "kind": 6,
        "importPath": "server.file_management.serializers",
        "description": "server.file_management.serializers",
        "peekOfCode": "class FileFolderSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لمجلدات الملفات\"\"\"\n    owner = UserBasicSerializer(read_only=True)\n    full_path = serializers.ReadOnlyField(source='get_full_path')\n    files_count = serializers.SerializerMethodField()\n    subfolders_count = serializers.SerializerMethodField()\n    class Meta:\n        model = FileFolder\n        fields = [\n            'id', 'name', 'description', 'parent', 'owner', 'is_public',",
        "detail": "server.file_management.serializers",
        "documentation": {}
    },
    {
        "label": "FileSettingsSerializer",
        "kind": 6,
        "importPath": "server.file_management.serializers",
        "description": "server.file_management.serializers",
        "peekOfCode": "class FileSettingsSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لإعدادات الملفات\"\"\"\n    class Meta:\n        model = FileSettings\n        fields = [\n            'id', 'max_file_size_general', 'max_file_size_image', \n            'max_file_size_video', 'max_file_size_document',\n            'storage_limit_client', 'storage_limit_professional',\n            'allowed_image_extensions', 'allowed_document_extensions',\n            'allowed_video_extensions', 'enable_virus_scanning',",
        "detail": "server.file_management.serializers",
        "documentation": {}
    },
    {
        "label": "FileStatsSerializer",
        "kind": 6,
        "importPath": "server.file_management.serializers",
        "description": "server.file_management.serializers",
        "peekOfCode": "class FileStatsSerializer(serializers.Serializer):\n    \"\"\"Serializer لإحصائيات الملفات\"\"\"\n    total_files = serializers.IntegerField()\n    total_size = serializers.IntegerField()\n    total_size_formatted = serializers.CharField()\n    files_by_type = serializers.DictField()\n    files_by_purpose = serializers.DictField()\n    recent_uploads = serializers.IntegerField()\n    storage_used_percentage = serializers.FloatField()",
        "detail": "server.file_management.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.file_management.serializers",
        "description": "server.file_management.serializers",
        "peekOfCode": "User = get_user_model()\nclass UserBasicSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer أساسي للمستخدم\"\"\"\n    class Meta:\n        model = User\n        fields = ['id', 'username', 'first_name', 'last_name', 'avatar']\nclass FileCategorySerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لتصنيفات الملفات\"\"\"\n    class Meta:\n        model = FileCategory",
        "detail": "server.file_management.serializers",
        "documentation": {}
    },
    {
        "label": "FileCategoryModelTest",
        "kind": 6,
        "importPath": "server.file_management.tests",
        "description": "server.file_management.tests",
        "peekOfCode": "class FileCategoryModelTest(TestCase):\n    def test_file_category_creation(self):\n        \"\"\"Test creating a file category\"\"\"\n        category = FileCategory.objects.create(\n            name='Images',\n            description='Image files',\n            allowed_extensions=['.jpg', '.png', '.gif'],\n            max_file_size=5242880  # 5MB\n        )\n        self.assertEqual(category.name, 'Images')",
        "detail": "server.file_management.tests",
        "documentation": {}
    },
    {
        "label": "UploadedFileModelTest",
        "kind": 6,
        "importPath": "server.file_management.tests",
        "description": "server.file_management.tests",
        "peekOfCode": "class UploadedFileModelTest(TestCase):\n    def setUp(self):\n        \"\"\"Set up test data\"\"\"\n        self.user = User.objects.create_user(\n            username='testuser',\n            email='test@example.com',\n            password='testpass123'\n        )\n        self.category = FileCategory.objects.create(\n            name='Documents',",
        "detail": "server.file_management.tests",
        "documentation": {}
    },
    {
        "label": "FileShareModelTest",
        "kind": 6,
        "importPath": "server.file_management.tests",
        "description": "server.file_management.tests",
        "peekOfCode": "class FileShareModelTest(TestCase):\n    def setUp(self):\n        \"\"\"Set up test data\"\"\"\n        self.owner = User.objects.create_user(\n            username='owner',\n            email='owner@example.com',\n            password='testpass123'\n        )\n        self.recipient = User.objects.create_user(\n            username='recipient',",
        "detail": "server.file_management.tests",
        "documentation": {}
    },
    {
        "label": "FileFolderModelTest",
        "kind": 6,
        "importPath": "server.file_management.tests",
        "description": "server.file_management.tests",
        "peekOfCode": "class FileFolderModelTest(TestCase):\n    def setUp(self):\n        \"\"\"Set up test data\"\"\"\n        self.user = User.objects.create_user(\n            username='testuser',\n            email='test@example.com',\n            password='testpass123'\n        )\n    def test_folder_creation(self):\n        \"\"\"Test creating a file folder\"\"\"",
        "detail": "server.file_management.tests",
        "documentation": {}
    },
    {
        "label": "FileSettingsModelTest",
        "kind": 6,
        "importPath": "server.file_management.tests",
        "description": "server.file_management.tests",
        "peekOfCode": "class FileSettingsModelTest(TestCase):\n    def test_file_settings_creation(self):\n        \"\"\"Test creating file settings\"\"\"\n        settings = FileSettings.objects.create(\n            max_file_size_general=10485760,  # 10MB\n            storage_limit_client=1073741824,  # 1GB\n            enable_virus_scanning=True\n        )\n        self.assertEqual(settings.max_file_size_general, 10485760)\n        self.assertEqual(settings.storage_limit_client, 1073741824)",
        "detail": "server.file_management.tests",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.file_management.tests",
        "description": "server.file_management.tests",
        "peekOfCode": "User = get_user_model()\nclass FileCategoryModelTest(TestCase):\n    def test_file_category_creation(self):\n        \"\"\"Test creating a file category\"\"\"\n        category = FileCategory.objects.create(\n            name='Images',\n            description='Image files',\n            allowed_extensions=['.jpg', '.png', '.gif'],\n            max_file_size=5242880  # 5MB\n        )",
        "detail": "server.file_management.tests",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "server.file_management.urls",
        "description": "server.file_management.urls",
        "peekOfCode": "app_name = 'file_management'\nurlpatterns = [\n    # File categories\n    path('categories/', views.FileCategoryListView.as_view(), name='file_categories'),\n    # File management\n    path('files/', views.UploadedFileListView.as_view(), name='file_list'),\n    path('files/upload/', views.FileUploadView.as_view(), name='file_upload'),\n    path('files/<uuid:file_id>/', views.UploadedFileDetailView.as_view(), name='file_detail'),\n    path('files/<uuid:file_id>/download/', views.FileDownloadView.as_view(), name='file_download'),\n    # File sharing",
        "detail": "server.file_management.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.file_management.urls",
        "description": "server.file_management.urls",
        "peekOfCode": "urlpatterns = [\n    # File categories\n    path('categories/', views.FileCategoryListView.as_view(), name='file_categories'),\n    # File management\n    path('files/', views.UploadedFileListView.as_view(), name='file_list'),\n    path('files/upload/', views.FileUploadView.as_view(), name='file_upload'),\n    path('files/<uuid:file_id>/', views.UploadedFileDetailView.as_view(), name='file_detail'),\n    path('files/<uuid:file_id>/download/', views.FileDownloadView.as_view(), name='file_download'),\n    # File sharing\n    path('shares/', views.FileShareListView.as_view(), name='file_shares'),",
        "detail": "server.file_management.urls",
        "documentation": {}
    },
    {
        "label": "FileCategoryListView",
        "kind": 6,
        "importPath": "server.file_management.views",
        "description": "server.file_management.views",
        "peekOfCode": "class FileCategoryListView(generics.ListAPIView):\n    \"\"\"قائمة تصنيفات الملفات\"\"\"\n    serializer_class = FileCategorySerializer\n    permission_classes = [permissions.IsAuthenticated]\n    queryset = FileCategory.objects.filter(is_active=True)\n    @extend_schema(\n        operation_id=\"list_file_categories\",\n        summary=\"List File Categories\",\n        description=\"Get available file categories list\",\n        tags=[\"File Management\"],",
        "detail": "server.file_management.views",
        "documentation": {}
    },
    {
        "label": "UploadedFileListView",
        "kind": 6,
        "importPath": "server.file_management.views",
        "description": "server.file_management.views",
        "peekOfCode": "class UploadedFileListView(generics.ListAPIView):\n    \"\"\"قائمة الملفات المرفوعة\"\"\"\n    serializer_class = UploadedFileSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]\n    filterset_fields = ['file_type', 'upload_purpose', 'is_public', 'category']\n    search_fields = ['original_filename', 'description']\n    ordering_fields = ['created_at', 'file_size', 'download_count']\n    ordering = ['-created_at']\n    def get_queryset(self):",
        "detail": "server.file_management.views",
        "documentation": {}
    },
    {
        "label": "FileUploadView",
        "kind": 6,
        "importPath": "server.file_management.views",
        "description": "server.file_management.views",
        "peekOfCode": "class FileUploadView(generics.CreateAPIView):\n    \"\"\"رفع ملف جديد\"\"\"\n    serializer_class = FileUploadSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    @extend_schema(\n        operation_id=\"upload_file\",\n        summary=\"رفع ملف جديد\",\n        description=\"رفع ملف جديد إلى النظام\",\n        tags=[\"File Management\"],\n    )",
        "detail": "server.file_management.views",
        "documentation": {}
    },
    {
        "label": "UploadedFileDetailView",
        "kind": 6,
        "importPath": "server.file_management.views",
        "description": "server.file_management.views",
        "peekOfCode": "class UploadedFileDetailView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"تفاصيل الملف المرفوع\"\"\"\n    serializer_class = UploadedFileSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    lookup_field = 'file_id'\n    def get_queryset(self):\n        return UploadedFile.objects.filter(uploaded_by=self.request.user)\n    @extend_schema(\n        operation_id=\"get_file_detail\",\n        summary=\"File Details\",",
        "detail": "server.file_management.views",
        "documentation": {}
    },
    {
        "label": "FileDownloadView",
        "kind": 6,
        "importPath": "server.file_management.views",
        "description": "server.file_management.views",
        "peekOfCode": "class FileDownloadView(APIView):\n    \"\"\"تحميل الملف\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    @extend_schema(\n        operation_id=\"download_file\",\n        summary=\"تحميل الملف\",\n        description=\"تحميل ملف من النظام\",\n        tags=[\"File Management\"],\n    )\n    def get(self, request, file_id):",
        "detail": "server.file_management.views",
        "documentation": {}
    },
    {
        "label": "FileShareListView",
        "kind": 6,
        "importPath": "server.file_management.views",
        "description": "server.file_management.views",
        "peekOfCode": "class FileShareListView(generics.ListCreateAPIView):\n    \"\"\"قائمة مشاركات الملفات\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get_serializer_class(self):\n        if self.request.method == 'POST':\n            return FileShareCreateSerializer\n        return FileShareSerializer\n    def get_queryset(self):\n        \"\"\"Get user's file shares\"\"\"\n        return FileShare.objects.filter(",
        "detail": "server.file_management.views",
        "documentation": {}
    },
    {
        "label": "FileCommentListView",
        "kind": 6,
        "importPath": "server.file_management.views",
        "description": "server.file_management.views",
        "peekOfCode": "class FileCommentListView(generics.ListCreateAPIView):\n    \"\"\"قائمة تعليقات الملف\"\"\"\n    serializer_class = FileCommentSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        file_id = self.kwargs['file_id']\n        return FileComment.objects.filter(\n            file__file_id=file_id,\n            parent_comment__isnull=True  # Only top-level comments\n        ).select_related('commenter').prefetch_related('replies')",
        "detail": "server.file_management.views",
        "documentation": {}
    },
    {
        "label": "FileFolderListView",
        "kind": 6,
        "importPath": "server.file_management.views",
        "description": "server.file_management.views",
        "peekOfCode": "class FileFolderListView(generics.ListCreateAPIView):\n    \"\"\"قائمة مجلدات الملفات\"\"\"\n    serializer_class = FileFolderSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        return FileFolder.objects.filter(\n            owner=self.request.user\n        ).select_related('owner', 'parent')\n    def perform_create(self, serializer):\n        serializer.save(owner=self.request.user)",
        "detail": "server.file_management.views",
        "documentation": {}
    },
    {
        "label": "file_stats",
        "kind": 2,
        "importPath": "server.file_management.views",
        "description": "server.file_management.views",
        "peekOfCode": "def file_stats(request):\n    \"\"\"إحصائيات الملفات\"\"\"\n    user = request.user\n    # Get user's files\n    files = UploadedFile.objects.filter(uploaded_by=user)\n    # Calculate stats\n    total_files = files.count()\n    total_size = files.aggregate(total=Sum('file_size'))['total'] or 0\n    # Format total size\n    size = total_size",
        "detail": "server.file_management.views",
        "documentation": {}
    },
    {
        "label": "create_folder",
        "kind": 2,
        "importPath": "server.file_management.views",
        "description": "server.file_management.views",
        "peekOfCode": "def create_folder(request):\n    \"\"\"إنشاء مجلد جديد\"\"\"\n    serializer = FileFolderSerializer(data=request.data, context={'request': request})\n    if serializer.is_valid():\n        folder = serializer.save(owner=request.user)\n        return Response(\n            FileFolderSerializer(folder).data,\n            status=status.HTTP_201_CREATED\n        )\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "server.file_management.views",
        "documentation": {}
    },
    {
        "label": "delete_multiple_files",
        "kind": 2,
        "importPath": "server.file_management.views",
        "description": "server.file_management.views",
        "peekOfCode": "def delete_multiple_files(request):\n    \"\"\"حذف ملفات متعددة\"\"\"\n    file_ids = request.data.get('file_ids', [])\n    if not file_ids:\n        return Response({\n            'error': 'No file IDs provided'\n        }, status=status.HTTP_400_BAD_REQUEST)\n    # Get user's files\n    files = UploadedFile.objects.filter(\n        file_id__in=file_ids,",
        "detail": "server.file_management.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "server.location_services.management.commands.populate_locations",
        "description": "server.location_services.management.commands.populate_locations",
        "peekOfCode": "class Command(BaseCommand):\n    \"\"\"\n    أمر إدارة لتعبئة البيانات الأولية للدول والمدن\n    \"\"\"\n    help = 'تعبئة البيانات الأولية للدول والمدن'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--clear',\n            action='store_true',\n            help='مسح البيانات الموجودة قبل التعبئة',",
        "detail": "server.location_services.management.commands.populate_locations",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.location_services.migrations.0001_initial",
        "description": "server.location_services.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "server.location_services.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CountryAdmin",
        "kind": 6,
        "importPath": "server.location_services.admin",
        "description": "server.location_services.admin",
        "peekOfCode": "class CountryAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة الدول\n    \"\"\"\n    list_display = ['name', 'code', 'currency', 'cities_count', 'is_active', 'created_at']\n    list_filter = ['is_active', 'currency', 'created_at']\n    search_fields = ['name', 'code']\n    readonly_fields = ['created_at', 'updated_at']\n    ordering = ['name']\n    def cities_count(self, obj):",
        "detail": "server.location_services.admin",
        "documentation": {}
    },
    {
        "label": "CityAdmin",
        "kind": 6,
        "importPath": "server.location_services.admin",
        "description": "server.location_services.admin",
        "peekOfCode": "class CityAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة المدن\n    \"\"\"\n    list_display = ['name', 'country', 'latitude', 'longitude', 'timezone', 'is_active', 'created_at']\n    list_filter = ['country', 'is_active', 'created_at']\n    search_fields = ['name', 'country__name']\n    readonly_fields = ['created_at', 'updated_at']\n    autocomplete_fields = ['country']\n    ordering = ['country__name', 'name']",
        "detail": "server.location_services.admin",
        "documentation": {}
    },
    {
        "label": "AddressAdmin",
        "kind": 6,
        "importPath": "server.location_services.admin",
        "description": "server.location_services.admin",
        "peekOfCode": "class AddressAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة العناوين\n    \"\"\"\n    list_display = ['street_address', 'city', 'neighborhood', 'is_verified', 'users_count', 'created_at']\n    list_filter = ['is_verified', 'city__country', 'created_at']\n    search_fields = ['street_address', 'neighborhood', 'city__name', 'landmark']\n    readonly_fields = ['id', 'created_at', 'updated_at', 'full_address']\n    autocomplete_fields = ['city']\n    ordering = ['-created_at']",
        "detail": "server.location_services.admin",
        "documentation": {}
    },
    {
        "label": "UserLocationAdmin",
        "kind": 6,
        "importPath": "server.location_services.admin",
        "description": "server.location_services.admin",
        "peekOfCode": "class UserLocationAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة مواقع المستخدمين\n    \"\"\"\n    list_display = ['user', 'address_summary', 'location_type', 'privacy_level', 'is_primary', 'is_active', 'created_at']\n    list_filter = ['location_type', 'privacy_level', 'is_primary', 'is_active', 'created_at']\n    search_fields = ['user__username', 'user__email', 'address__street_address', 'label']\n    readonly_fields = ['id', 'created_at', 'updated_at']\n    autocomplete_fields = ['user', 'address']\n    ordering = ['-created_at']",
        "detail": "server.location_services.admin",
        "documentation": {}
    },
    {
        "label": "ServiceAreaAdmin",
        "kind": 6,
        "importPath": "server.location_services.admin",
        "description": "server.location_services.admin",
        "peekOfCode": "class ServiceAreaAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة مناطق الخدمة\n    \"\"\"\n    list_display = ['professional', 'city', 'max_distance_km', 'travel_cost_per_km', 'minimum_service_fee', 'is_active', 'created_at']\n    list_filter = ['is_active', 'city__country', 'created_at']\n    search_fields = ['professional__username', 'professional__email', 'city__name']\n    readonly_fields = ['id', 'created_at', 'updated_at']\n    autocomplete_fields = ['professional', 'city']\n    ordering = ['-created_at']",
        "detail": "server.location_services.admin",
        "documentation": {}
    },
    {
        "label": "LocationHistoryAdmin",
        "kind": 6,
        "importPath": "server.location_services.admin",
        "description": "server.location_services.admin",
        "peekOfCode": "class LocationHistoryAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة تاريخ المواقع\n    \"\"\"\n    list_display = ['user', 'action_type', 'latitude', 'longitude', 'accuracy', 'ip_address', 'created_at']\n    list_filter = ['action_type', 'created_at']\n    search_fields = ['user__username', 'user__email', 'ip_address']\n    readonly_fields = ['id', 'created_at', 'coordinates_link']\n    autocomplete_fields = ['user']\n    ordering = ['-created_at']",
        "detail": "server.location_services.admin",
        "documentation": {}
    },
    {
        "label": "LocationPermissionAdmin",
        "kind": 6,
        "importPath": "server.location_services.admin",
        "description": "server.location_services.admin",
        "peekOfCode": "class LocationPermissionAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة صلاحيات المواقع\n    \"\"\"\n    list_display = ['user', 'granted_to', 'permission_type', 'is_active', 'is_expired_status', 'granted_at', 'expires_at']\n    list_filter = ['permission_type', 'is_active', 'granted_at']\n    search_fields = ['user__username', 'granted_to__username']\n    readonly_fields = ['id', 'granted_at', 'is_expired_status']\n    autocomplete_fields = ['user', 'granted_to']\n    ordering = ['-granted_at']",
        "detail": "server.location_services.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.site_header",
        "kind": 5,
        "importPath": "server.location_services.admin",
        "description": "server.location_services.admin",
        "peekOfCode": "admin.site.site_header = 'إدارة نظام تتبع المواقع'\nadmin.site.site_title = 'نظام المواقع'\nadmin.site.index_title = 'لوحة تحكم المواقع الجغرافية'",
        "detail": "server.location_services.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.site_title",
        "kind": 5,
        "importPath": "server.location_services.admin",
        "description": "server.location_services.admin",
        "peekOfCode": "admin.site.site_title = 'نظام المواقع'\nadmin.site.index_title = 'لوحة تحكم المواقع الجغرافية'",
        "detail": "server.location_services.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.index_title",
        "kind": 5,
        "importPath": "server.location_services.admin",
        "description": "server.location_services.admin",
        "peekOfCode": "admin.site.index_title = 'لوحة تحكم المواقع الجغرافية'",
        "detail": "server.location_services.admin",
        "documentation": {}
    },
    {
        "label": "LocationServicesConfig",
        "kind": 6,
        "importPath": "server.location_services.apps",
        "description": "server.location_services.apps",
        "peekOfCode": "class LocationServicesConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'location_services'",
        "detail": "server.location_services.apps",
        "documentation": {}
    },
    {
        "label": "Country",
        "kind": 6,
        "importPath": "server.location_services.models",
        "description": "server.location_services.models",
        "peekOfCode": "class Country(models.Model):\n    \"\"\"\n    نموذج الدول\n    \"\"\"\n    name = models.CharField(\n        max_length=100,\n        unique=True,\n        help_text='اسم الدولة'\n    )\n    code = models.CharField(",
        "detail": "server.location_services.models",
        "documentation": {}
    },
    {
        "label": "City",
        "kind": 6,
        "importPath": "server.location_services.models",
        "description": "server.location_services.models",
        "peekOfCode": "class City(models.Model):\n    \"\"\"\n    نموذج المدن\n    \"\"\"\n    name = models.CharField(\n        max_length=100,\n        help_text='اسم المدينة'\n    )\n    country = models.ForeignKey(\n        Country,",
        "detail": "server.location_services.models",
        "documentation": {}
    },
    {
        "label": "Address",
        "kind": 6,
        "importPath": "server.location_services.models",
        "description": "server.location_services.models",
        "peekOfCode": "class Address(models.Model):\n    \"\"\"\n    نموذج العناوين المفصلة\n    \"\"\"\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    street_address = models.CharField(\n        max_length=255,\n        help_text='العنوان - الشارع'\n    )\n    apartment_number = models.CharField(",
        "detail": "server.location_services.models",
        "documentation": {}
    },
    {
        "label": "UserLocation",
        "kind": 6,
        "importPath": "server.location_services.models",
        "description": "server.location_services.models",
        "peekOfCode": "class UserLocation(models.Model):\n    \"\"\"\n    نموذج مواقع المستخدمين\n    \"\"\"\n    LOCATION_TYPE_CHOICES = [\n        ('primary', 'العنوان الرئيسي'),\n        ('secondary', 'عنوان ثانوي'),\n        ('work', 'عنوان العمل'),\n        ('service', 'منطقة خدمة'),\n    ]",
        "detail": "server.location_services.models",
        "documentation": {}
    },
    {
        "label": "ServiceArea",
        "kind": 6,
        "importPath": "server.location_services.models",
        "description": "server.location_services.models",
        "peekOfCode": "class ServiceArea(models.Model):\n    \"\"\"\n    نموذج مناطق الخدمة للمحترفين\n    \"\"\"\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    professional = models.ForeignKey(\n        User,\n        on_delete=models.CASCADE,\n        related_name='service_areas',\n        help_text='المحترف',",
        "detail": "server.location_services.models",
        "documentation": {}
    },
    {
        "label": "LocationHistory",
        "kind": 6,
        "importPath": "server.location_services.models",
        "description": "server.location_services.models",
        "peekOfCode": "class LocationHistory(models.Model):\n    \"\"\"\n    نموذج تاريخ المواقع (للتتبع والأمان)\n    \"\"\"\n    ACTION_CHOICES = [\n        ('login', 'تسجيل دخول'),\n        ('location_update', 'تحديث موقع'),\n        ('service_request', 'طلب خدمة'),\n        ('project_visit', 'زيارة مشروع'),\n    ]",
        "detail": "server.location_services.models",
        "documentation": {}
    },
    {
        "label": "LocationPermission",
        "kind": 6,
        "importPath": "server.location_services.models",
        "description": "server.location_services.models",
        "peekOfCode": "class LocationPermission(models.Model):\n    \"\"\"\n    نموذج صلاحيات المواقع\n    \"\"\"\n    PERMISSION_TYPE_CHOICES = [\n        ('view_location', 'عرض الموقع'),\n        ('track_location', 'تتبع الموقع'),\n        ('share_location', 'مشاركة الموقع'),\n    ]\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)",
        "detail": "server.location_services.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.location_services.models",
        "description": "server.location_services.models",
        "peekOfCode": "User = get_user_model()\nclass Country(models.Model):\n    \"\"\"\n    نموذج الدول\n    \"\"\"\n    name = models.CharField(\n        max_length=100,\n        unique=True,\n        help_text='اسم الدولة'\n    )",
        "detail": "server.location_services.models",
        "documentation": {}
    },
    {
        "label": "CountrySerializer",
        "kind": 6,
        "importPath": "server.location_services.serializers",
        "description": "server.location_services.serializers",
        "peekOfCode": "class CountrySerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer للدول\n    \"\"\"\n    cities_count = serializers.SerializerMethodField()\n    class Meta:\n        model = Country\n        fields = [\n            'id', 'name', 'code', 'currency', 'is_active',\n            'cities_count', 'created_at', 'updated_at'",
        "detail": "server.location_services.serializers",
        "documentation": {}
    },
    {
        "label": "CitySerializer",
        "kind": 6,
        "importPath": "server.location_services.serializers",
        "description": "server.location_services.serializers",
        "peekOfCode": "class CitySerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer للمدن\n    \"\"\"\n    country_name = serializers.CharField(source='country.name', read_only=True)\n    country_code = serializers.CharField(source='country.code', read_only=True)\n    class Meta:\n        model = City\n        fields = [\n            'id', 'name', 'country', 'country_name', 'country_code',",
        "detail": "server.location_services.serializers",
        "documentation": {}
    },
    {
        "label": "AddressSerializer",
        "kind": 6,
        "importPath": "server.location_services.serializers",
        "description": "server.location_services.serializers",
        "peekOfCode": "class AddressSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer للعناوين\n    \"\"\"\n    city_name = serializers.CharField(source='city.name', read_only=True)\n    country_name = serializers.CharField(source='city.country.name', read_only=True)\n    full_address = serializers.ReadOnlyField()\n    coordinates = serializers.SerializerMethodField()\n    class Meta:\n        model = Address",
        "detail": "server.location_services.serializers",
        "documentation": {}
    },
    {
        "label": "AddressCreateSerializer",
        "kind": 6,
        "importPath": "server.location_services.serializers",
        "description": "server.location_services.serializers",
        "peekOfCode": "class AddressCreateSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer لإنشاء العناوين مع التحقق المتقدم\n    \"\"\"\n    class Meta:\n        model = Address\n        fields = [\n            'street_address', 'apartment_number', 'neighborhood',\n            'postal_code', 'city', 'latitude', 'longitude',\n            'landmark', 'notes'",
        "detail": "server.location_services.serializers",
        "documentation": {}
    },
    {
        "label": "UserLocationSerializer",
        "kind": 6,
        "importPath": "server.location_services.serializers",
        "description": "server.location_services.serializers",
        "peekOfCode": "class UserLocationSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer لمواقع المستخدمين\n    \"\"\"\n    address = AddressSerializer(read_only=True)\n    user_name = serializers.CharField(source='user.username', read_only=True)\n    class Meta:\n        model = UserLocation\n        fields = [\n            'id', 'user', 'user_name', 'address', 'location_type',",
        "detail": "server.location_services.serializers",
        "documentation": {}
    },
    {
        "label": "UserLocationCreateSerializer",
        "kind": 6,
        "importPath": "server.location_services.serializers",
        "description": "server.location_services.serializers",
        "peekOfCode": "class UserLocationCreateSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer لإنشاء مواقع المستخدمين\n    \"\"\"\n    address_data = AddressCreateSerializer(write_only=True)\n    class Meta:\n        model = UserLocation\n        fields = [\n            'address_data', 'location_type', 'label', \n            'privacy_level', 'is_primary'",
        "detail": "server.location_services.serializers",
        "documentation": {}
    },
    {
        "label": "ServiceAreaSerializer",
        "kind": 6,
        "importPath": "server.location_services.serializers",
        "description": "server.location_services.serializers",
        "peekOfCode": "class ServiceAreaSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer لمناطق الخدمة\n    \"\"\"\n    professional_name = serializers.CharField(source='professional.username', read_only=True)\n    city_name = serializers.CharField(source='city.name', read_only=True)\n    country_name = serializers.CharField(source='city.country.name', read_only=True)\n    class Meta:\n        model = ServiceArea\n        fields = [",
        "detail": "server.location_services.serializers",
        "documentation": {}
    },
    {
        "label": "LocationHistorySerializer",
        "kind": 6,
        "importPath": "server.location_services.serializers",
        "description": "server.location_services.serializers",
        "peekOfCode": "class LocationHistorySerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer لتاريخ المواقع\n    \"\"\"\n    user_name = serializers.CharField(source='user.username', read_only=True)\n    class Meta:\n        model = LocationHistory\n        fields = [\n            'id', 'user', 'user_name', 'latitude', 'longitude',\n            'action_type', 'ip_address', 'user_agent', 'accuracy',",
        "detail": "server.location_services.serializers",
        "documentation": {}
    },
    {
        "label": "LocationPermissionSerializer",
        "kind": 6,
        "importPath": "server.location_services.serializers",
        "description": "server.location_services.serializers",
        "peekOfCode": "class LocationPermissionSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer لصلاحيات المواقع\n    \"\"\"\n    user_name = serializers.CharField(source='user.username', read_only=True)\n    granted_to_name = serializers.CharField(source='granted_to.username', read_only=True)\n    is_expired = serializers.ReadOnlyField()\n    class Meta:\n        model = LocationPermission\n        fields = [",
        "detail": "server.location_services.serializers",
        "documentation": {}
    },
    {
        "label": "NearbyProfessionalsSerializer",
        "kind": 6,
        "importPath": "server.location_services.serializers",
        "description": "server.location_services.serializers",
        "peekOfCode": "class NearbyProfessionalsSerializer(serializers.Serializer):\n    \"\"\"\n    Serializer للبحث عن المحترفين القريبين\n    \"\"\"\n    latitude = serializers.DecimalField(\n        max_digits=10, \n        decimal_places=8,\n        min_value=-90,\n        max_value=90\n    )",
        "detail": "server.location_services.serializers",
        "documentation": {}
    },
    {
        "label": "DistanceCalculationSerializer",
        "kind": 6,
        "importPath": "server.location_services.serializers",
        "description": "server.location_services.serializers",
        "peekOfCode": "class DistanceCalculationSerializer(serializers.Serializer):\n    \"\"\"\n    Serializer لحساب المسافات\n    \"\"\"\n    from_latitude = serializers.DecimalField(max_digits=10, decimal_places=8)\n    from_longitude = serializers.DecimalField(max_digits=11, decimal_places=8)\n    to_latitude = serializers.DecimalField(max_digits=10, decimal_places=8)\n    to_longitude = serializers.DecimalField(max_digits=11, decimal_places=8)\n    def calculate_distance(self):\n        \"\"\"حساب المسافة بالكيلومتر باستخدام معادلة Haversine\"\"\"",
        "detail": "server.location_services.serializers",
        "documentation": {}
    },
    {
        "label": "LocationSearchSerializer",
        "kind": 6,
        "importPath": "server.location_services.serializers",
        "description": "server.location_services.serializers",
        "peekOfCode": "class LocationSearchSerializer(serializers.Serializer):\n    \"\"\"\n    Serializer للبحث في المواقع\n    \"\"\"\n    query = serializers.CharField(max_length=255)\n    country_code = serializers.CharField(max_length=3, required=False)\n    city_id = serializers.IntegerField(required=False)\n    latitude = serializers.DecimalField(\n        max_digits=10, \n        decimal_places=8, ",
        "detail": "server.location_services.serializers",
        "documentation": {}
    },
    {
        "label": "ProfessionalLocationSerializer",
        "kind": 6,
        "importPath": "server.location_services.serializers",
        "description": "server.location_services.serializers",
        "peekOfCode": "class ProfessionalLocationSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer لمواقع المحترفين مع معلومات إضافية\n    \"\"\"\n    user_type = serializers.CharField(source='user.user_type', read_only=True)\n    full_name = serializers.SerializerMethodField()\n    avatar = serializers.CharField(source='user.avatar.url', read_only=True)\n    rating = serializers.SerializerMethodField()\n    service_areas = ServiceAreaSerializer(source='user.service_areas', many=True, read_only=True)\n    class Meta:",
        "detail": "server.location_services.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.location_services.serializers",
        "description": "server.location_services.serializers",
        "peekOfCode": "User = get_user_model()\nclass CountrySerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer للدول\n    \"\"\"\n    cities_count = serializers.SerializerMethodField()\n    class Meta:\n        model = Country\n        fields = [\n            'id', 'name', 'code', 'currency', 'is_active',",
        "detail": "server.location_services.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "server.location_services.urls",
        "description": "server.location_services.urls",
        "peekOfCode": "router = DefaultRouter()\n# تسجيل ViewSets\nrouter.register(r'countries', CountryViewSet, basename='country')\nrouter.register(r'cities', CityViewSet, basename='city')\nrouter.register(r'addresses', AddressViewSet, basename='address')\nrouter.register(r'user-locations', UserLocationViewSet, basename='user-location')\nrouter.register(r'service-areas', ServiceAreaViewSet, basename='service-area')\nrouter.register(r'location-history', LocationHistoryViewSet, basename='location-history')\nrouter.register(r'location-permissions', LocationPermissionViewSet, basename='location-permission')\nrouter.register(r'search', LocationSearchViewSet, basename='location-search')",
        "detail": "server.location_services.urls",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "server.location_services.urls",
        "description": "server.location_services.urls",
        "peekOfCode": "app_name = 'location_services'\nurlpatterns = [\n    # تضمين جميع URLs الخاصة بالـ router\n    path('api/v1/locations/', include(router.urls)),\n]",
        "detail": "server.location_services.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.location_services.urls",
        "description": "server.location_services.urls",
        "peekOfCode": "urlpatterns = [\n    # تضمين جميع URLs الخاصة بالـ router\n    path('api/v1/locations/', include(router.urls)),\n]",
        "detail": "server.location_services.urls",
        "documentation": {}
    },
    {
        "label": "CountryViewSet",
        "kind": 6,
        "importPath": "server.location_services.views",
        "description": "server.location_services.views",
        "peekOfCode": "class CountryViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n    ViewSet للدول - قراءة فقط\n    \"\"\"\n    queryset = Country.objects.filter(is_active=True)\n    serializer_class = CountrySerializer\n    permission_classes = [permissions.AllowAny]\n    @action(detail=True, methods=['get'])\n    def cities(self, request, pk=None):\n        \"\"\"الحصول على مدن دولة معينة\"\"\"",
        "detail": "server.location_services.views",
        "documentation": {}
    },
    {
        "label": "CityViewSet",
        "kind": 6,
        "importPath": "server.location_services.views",
        "description": "server.location_services.views",
        "peekOfCode": "class CityViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n    ViewSet للمدن - قراءة فقط\n    \"\"\"\n    queryset = City.objects.filter(is_active=True).select_related('country')\n    serializer_class = CitySerializer\n    permission_classes = [permissions.AllowAny]\n    filterset_fields = ['country']\n    search_fields = ['name', 'country__name']\n    def get_queryset(self):",
        "detail": "server.location_services.views",
        "documentation": {}
    },
    {
        "label": "AddressViewSet",
        "kind": 6,
        "importPath": "server.location_services.views",
        "description": "server.location_services.views",
        "peekOfCode": "class AddressViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    ViewSet للعناوين\n    \"\"\"\n    serializer_class = AddressSerializer\n    permission_classes = [IsAuthenticated]\n    def get_queryset(self):\n        # المستخدمون يرون عناوينهم فقط\n        if self.request.user.is_staff:\n            return Address.objects.all()",
        "detail": "server.location_services.views",
        "documentation": {}
    },
    {
        "label": "UserLocationViewSet",
        "kind": 6,
        "importPath": "server.location_services.views",
        "description": "server.location_services.views",
        "peekOfCode": "class UserLocationViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    ViewSet لمواقع المستخدمين\n    \"\"\"\n    serializer_class = UserLocationSerializer\n    permission_classes = [IsAuthenticated]\n    def get_queryset(self):\n        return UserLocation.objects.filter(\n            user=self.request.user,\n            is_active=True",
        "detail": "server.location_services.views",
        "documentation": {}
    },
    {
        "label": "ServiceAreaViewSet",
        "kind": 6,
        "importPath": "server.location_services.views",
        "description": "server.location_services.views",
        "peekOfCode": "class ServiceAreaViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    ViewSet لمناطق الخدمة\n    \"\"\"\n    serializer_class = ServiceAreaSerializer\n    permission_classes = [IsAuthenticated]\n    def get_queryset(self):\n        if self.request.user.user_type in ['home_pro', 'specialist', 'crew_member']:\n            return ServiceArea.objects.filter(\n                professional=self.request.user,",
        "detail": "server.location_services.views",
        "documentation": {}
    },
    {
        "label": "LocationHistoryViewSet",
        "kind": 6,
        "importPath": "server.location_services.views",
        "description": "server.location_services.views",
        "peekOfCode": "class LocationHistoryViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n    ViewSet لتاريخ المواقع - قراءة فقط\n    \"\"\"\n    serializer_class = LocationHistorySerializer\n    permission_classes = [IsAuthenticated]\n    def get_queryset(self):\n        return LocationHistory.objects.filter(\n            user=self.request.user\n        ).order_by('-created_at')",
        "detail": "server.location_services.views",
        "documentation": {}
    },
    {
        "label": "LocationPermissionViewSet",
        "kind": 6,
        "importPath": "server.location_services.views",
        "description": "server.location_services.views",
        "peekOfCode": "class LocationPermissionViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    ViewSet لصلاحيات المواقع\n    \"\"\"\n    serializer_class = LocationPermissionSerializer\n    permission_classes = [IsAuthenticated]\n    def get_queryset(self):\n        return LocationPermission.objects.filter(\n            Q(user=self.request.user) | Q(granted_to=self.request.user)\n        ).select_related('user', 'granted_to')",
        "detail": "server.location_services.views",
        "documentation": {}
    },
    {
        "label": "LocationSearchViewSet",
        "kind": 6,
        "importPath": "server.location_services.views",
        "description": "server.location_services.views",
        "peekOfCode": "class LocationSearchViewSet(viewsets.ViewSet):\n    \"\"\"\n    ViewSet للبحث الجغرافي المتقدم\n    \"\"\"\n    permission_classes = [IsAuthenticated]\n    @action(detail=False, methods=['post'])\n    def nearby_professionals(self, request):\n        \"\"\"البحث عن المحترفين القريبين\"\"\"\n        serializer = NearbyProfessionalsSerializer(data=request.data)\n        if not serializer.is_valid():",
        "detail": "server.location_services.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.location_services.views",
        "description": "server.location_services.views",
        "peekOfCode": "User = get_user_model()\nclass CountryViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n    ViewSet للدول - قراءة فقط\n    \"\"\"\n    queryset = Country.objects.filter(is_active=True)\n    serializer_class = CountrySerializer\n    permission_classes = [permissions.AllowAny]\n    @action(detail=True, methods=['get'])\n    def cities(self, request, pk=None):",
        "detail": "server.location_services.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.messaging.migrations.0001_initial",
        "description": "server.messaging.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('contracts', '0001_initial'),\n        ('projects', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Conversation',",
        "detail": "server.messaging.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ConversationAdmin",
        "kind": 6,
        "importPath": "server.messaging.admin",
        "description": "server.messaging.admin",
        "peekOfCode": "class ConversationAdmin(admin.ModelAdmin):\n    list_display = ['title', 'display_participants', 'project', 'last_message_at', 'is_group', 'is_archived']\n    list_filter = ['is_group', 'is_archived', 'created_at', 'last_message_at']\n    search_fields = ['title', 'participants__username', 'project__title']\n    readonly_fields = ['conversation_id', 'created_at', 'updated_at', 'last_message_at']\n    autocomplete_fields = ['participants', 'project', 'contract', 'last_message_sender']\n    def display_participants(self, obj):\n        participants = obj.participants.all()[:3]\n        names = [p.get_full_name() or p.username for p in participants]\n        display = \", \".join(names)",
        "detail": "server.messaging.admin",
        "documentation": {}
    },
    {
        "label": "MessageAdmin",
        "kind": 6,
        "importPath": "server.messaging.admin",
        "description": "server.messaging.admin",
        "peekOfCode": "class MessageAdmin(admin.ModelAdmin):\n    list_display = ['sender', 'conversation', 'content_preview', 'message_type', 'is_edited', 'created_at']\n    list_filter = ['message_type', 'is_edited', 'is_deleted', 'created_at']\n    search_fields = ['content', 'sender__username', 'conversation__title']\n    readonly_fields = ['message_id', 'created_at', 'updated_at', 'edited_at']\n    autocomplete_fields = ['conversation', 'sender', 'reply_to']\n    def content_preview(self, obj):\n        return obj.content[:50] + \"...\" if len(obj.content) > 50 else obj.content\n    content_preview.short_description = \"Content\"\n@admin.register(MessageAttachment)",
        "detail": "server.messaging.admin",
        "documentation": {}
    },
    {
        "label": "MessageAttachmentAdmin",
        "kind": 6,
        "importPath": "server.messaging.admin",
        "description": "server.messaging.admin",
        "peekOfCode": "class MessageAttachmentAdmin(admin.ModelAdmin):\n    list_display = ['original_filename', 'file_type', 'file_size_display', 'is_scanned', 'is_safe', 'created_at']\n    list_filter = ['file_type', 'is_scanned', 'is_safe', 'created_at']\n    search_fields = ['original_filename', 'message__content']\n    readonly_fields = ['file_size_display', 'created_at']\n    autocomplete_fields = ['message']\n    def file_size_display(self, obj):\n        return obj.file_size_formatted\n    file_size_display.short_description = \"File Size\"\n@admin.register(MessageReadStatus)",
        "detail": "server.messaging.admin",
        "documentation": {}
    },
    {
        "label": "MessageReadStatusAdmin",
        "kind": 6,
        "importPath": "server.messaging.admin",
        "description": "server.messaging.admin",
        "peekOfCode": "class MessageReadStatusAdmin(admin.ModelAdmin):\n    list_display = ['user', 'message', 'read_at']\n    list_filter = ['read_at']\n    search_fields = ['user__username', 'message__content']\n    readonly_fields = ['read_at']\n    autocomplete_fields = ['user', 'message']\n@admin.register(ConversationReadTime)\nclass ConversationReadTimeAdmin(admin.ModelAdmin):\n    list_display = ['user', 'conversation', 'last_read_at']\n    list_filter = ['last_read_at']",
        "detail": "server.messaging.admin",
        "documentation": {}
    },
    {
        "label": "ConversationReadTimeAdmin",
        "kind": 6,
        "importPath": "server.messaging.admin",
        "description": "server.messaging.admin",
        "peekOfCode": "class ConversationReadTimeAdmin(admin.ModelAdmin):\n    list_display = ['user', 'conversation', 'last_read_at']\n    list_filter = ['last_read_at']\n    search_fields = ['user__username', 'conversation__title']\n    autocomplete_fields = ['user', 'conversation']\n@admin.register(MessageReaction)\nclass MessageReactionAdmin(admin.ModelAdmin):\n    list_display = ['user', 'message', 'reaction', 'created_at']\n    list_filter = ['reaction', 'created_at']\n    search_fields = ['user__username', 'message__content']",
        "detail": "server.messaging.admin",
        "documentation": {}
    },
    {
        "label": "MessageReactionAdmin",
        "kind": 6,
        "importPath": "server.messaging.admin",
        "description": "server.messaging.admin",
        "peekOfCode": "class MessageReactionAdmin(admin.ModelAdmin):\n    list_display = ['user', 'message', 'reaction', 'created_at']\n    list_filter = ['reaction', 'created_at']\n    search_fields = ['user__username', 'message__content']\n    readonly_fields = ['created_at']\n    autocomplete_fields = ['message', 'user']\n@admin.register(BlockedUser)\nclass BlockedUserAdmin(admin.ModelAdmin):\n    list_display = ['blocker', 'blocked', 'blocked_at']\n    list_filter = ['blocked_at']",
        "detail": "server.messaging.admin",
        "documentation": {}
    },
    {
        "label": "BlockedUserAdmin",
        "kind": 6,
        "importPath": "server.messaging.admin",
        "description": "server.messaging.admin",
        "peekOfCode": "class BlockedUserAdmin(admin.ModelAdmin):\n    list_display = ['blocker', 'blocked', 'blocked_at']\n    list_filter = ['blocked_at']\n    search_fields = ['blocker__username', 'blocked__username']\n    readonly_fields = ['blocked_at']\n    autocomplete_fields = ['blocker', 'blocked']\n@admin.register(ConversationSettings)\nclass ConversationSettingsAdmin(admin.ModelAdmin):\n    list_display = ['user', 'conversation', 'notifications_enabled', 'is_pinned', 'is_muted']\n    list_filter = ['notifications_enabled', 'is_pinned', 'is_muted', 'sound_enabled']",
        "detail": "server.messaging.admin",
        "documentation": {}
    },
    {
        "label": "ConversationSettingsAdmin",
        "kind": 6,
        "importPath": "server.messaging.admin",
        "description": "server.messaging.admin",
        "peekOfCode": "class ConversationSettingsAdmin(admin.ModelAdmin):\n    list_display = ['user', 'conversation', 'notifications_enabled', 'is_pinned', 'is_muted']\n    list_filter = ['notifications_enabled', 'is_pinned', 'is_muted', 'sound_enabled']\n    search_fields = ['user__username', 'conversation__title']\n    readonly_fields = ['created_at', 'updated_at']\n    autocomplete_fields = ['user', 'conversation']\n@admin.register(TypingIndicator)\nclass TypingIndicatorAdmin(admin.ModelAdmin):\n    list_display = ['user', 'conversation', 'started_at', 'last_activity']\n    list_filter = ['started_at', 'last_activity']",
        "detail": "server.messaging.admin",
        "documentation": {}
    },
    {
        "label": "TypingIndicatorAdmin",
        "kind": 6,
        "importPath": "server.messaging.admin",
        "description": "server.messaging.admin",
        "peekOfCode": "class TypingIndicatorAdmin(admin.ModelAdmin):\n    list_display = ['user', 'conversation', 'started_at', 'last_activity']\n    list_filter = ['started_at', 'last_activity']\n    search_fields = ['user__username', 'conversation__title']\n    readonly_fields = ['started_at', 'last_activity']\n    autocomplete_fields = ['conversation', 'user']\n# تخصيص موقع الإدارة\nadmin.site.site_header = 'A-List Messaging Admin'\nadmin.site.site_title = 'Messaging Management'\nadmin.site.index_title = 'إدارة الرسائل'",
        "detail": "server.messaging.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.site_header",
        "kind": 5,
        "importPath": "server.messaging.admin",
        "description": "server.messaging.admin",
        "peekOfCode": "admin.site.site_header = 'A-List Messaging Admin'\nadmin.site.site_title = 'Messaging Management'\nadmin.site.index_title = 'إدارة الرسائل'",
        "detail": "server.messaging.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.site_title",
        "kind": 5,
        "importPath": "server.messaging.admin",
        "description": "server.messaging.admin",
        "peekOfCode": "admin.site.site_title = 'Messaging Management'\nadmin.site.index_title = 'إدارة الرسائل'",
        "detail": "server.messaging.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.index_title",
        "kind": 5,
        "importPath": "server.messaging.admin",
        "description": "server.messaging.admin",
        "peekOfCode": "admin.site.index_title = 'إدارة الرسائل'",
        "detail": "server.messaging.admin",
        "documentation": {}
    },
    {
        "label": "MessagingConfig",
        "kind": 6,
        "importPath": "server.messaging.apps",
        "description": "server.messaging.apps",
        "peekOfCode": "class MessagingConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'messaging'",
        "detail": "server.messaging.apps",
        "documentation": {}
    },
    {
        "label": "ChatConsumer",
        "kind": 6,
        "importPath": "server.messaging.consumers",
        "description": "server.messaging.consumers",
        "peekOfCode": "class ChatConsumer(AsyncWebsocketConsumer):\n    \"\"\"WebSocket consumer for real-time messaging\"\"\"\n    async def connect(self):\n        \"\"\"Handle WebSocket connection\"\"\"\n        # Get user from token or session\n        self.user = self.scope.get('user')\n        if not self.user or self.user.is_anonymous:\n            await self.close()\n            return\n        # Get conversation ID from URL",
        "detail": "server.messaging.consumers",
        "documentation": {}
    },
    {
        "label": "NotificationConsumer",
        "kind": 6,
        "importPath": "server.messaging.consumers",
        "description": "server.messaging.consumers",
        "peekOfCode": "class NotificationConsumer(AsyncWebsocketConsumer):\n    \"\"\"WebSocket consumer for real-time notifications\"\"\"\n    async def connect(self):\n        \"\"\"Handle WebSocket connection for notifications\"\"\"\n        self.user = self.scope.get('user')\n        if not self.user or self.user.is_anonymous:\n            await self.close()\n            return\n        # Join user-specific notification group\n        self.notification_group_name = f'notifications_{self.user.id}'",
        "detail": "server.messaging.consumers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.messaging.consumers",
        "description": "server.messaging.consumers",
        "peekOfCode": "User = get_user_model()\nclass ChatConsumer(AsyncWebsocketConsumer):\n    \"\"\"WebSocket consumer for real-time messaging\"\"\"\n    async def connect(self):\n        \"\"\"Handle WebSocket connection\"\"\"\n        # Get user from token or session\n        self.user = self.scope.get('user')\n        if not self.user or self.user.is_anonymous:\n            await self.close()\n            return",
        "detail": "server.messaging.consumers",
        "documentation": {}
    },
    {
        "label": "JWTAuthMiddleware",
        "kind": 6,
        "importPath": "server.messaging.middleware",
        "description": "server.messaging.middleware",
        "peekOfCode": "class JWTAuthMiddleware(BaseMiddleware):\n    \"\"\"JWT Authentication middleware for WebSocket connections\"\"\"\n    def __init__(self, inner):\n        super().__init__(inner)\n    async def __call__(self, scope, receive, send):\n        # Get token from query string or headers\n        token = None\n        # Try to get token from query string\n        query_string = scope.get('query_string', b'').decode()\n        if query_string:",
        "detail": "server.messaging.middleware",
        "documentation": {}
    },
    {
        "label": "JWTAuthMiddlewareStack",
        "kind": 2,
        "importPath": "server.messaging.middleware",
        "description": "server.messaging.middleware",
        "peekOfCode": "def JWTAuthMiddlewareStack(inner):\n    \"\"\"Stack JWT auth middleware\"\"\"\n    return JWTAuthMiddleware(inner)",
        "detail": "server.messaging.middleware",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "kind": 6,
        "importPath": "server.messaging.models",
        "description": "server.messaging.models",
        "peekOfCode": "class Conversation(models.Model):\n    \"\"\"المحادثات\"\"\"\n    conversation_id = models.UUIDField(default=uuid.uuid4, unique=True, editable=False)\n    # Participants\n    participants = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='conversations')\n    # Project reference (optional)\n    project = models.ForeignKey(\n        'projects.Project', \n        on_delete=models.CASCADE, \n        related_name='conversations',",
        "detail": "server.messaging.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "server.messaging.models",
        "description": "server.messaging.models",
        "peekOfCode": "class Message(models.Model):\n    \"\"\"الرسائل\"\"\"\n    MESSAGE_TYPES = [\n        ('text', 'Text'),\n        ('image', 'Image'),\n        ('file', 'File'),\n        ('voice', 'Voice'),\n        ('video', 'Video'),\n        ('system', 'System'),\n        ('payment_request', 'Payment Request'),",
        "detail": "server.messaging.models",
        "documentation": {}
    },
    {
        "label": "MessageAttachment",
        "kind": 6,
        "importPath": "server.messaging.models",
        "description": "server.messaging.models",
        "peekOfCode": "class MessageAttachment(models.Model):\n    \"\"\"مرفقات الرسائل\"\"\"\n    ATTACHMENT_TYPES = [\n        ('image', 'Image'),\n        ('document', 'Document'),\n        ('video', 'Video'),\n        ('audio', 'Audio'),\n        ('other', 'Other'),\n    ]\n    message = models.ForeignKey(Message, on_delete=models.CASCADE, related_name='attachments')",
        "detail": "server.messaging.models",
        "documentation": {}
    },
    {
        "label": "MessageReadStatus",
        "kind": 6,
        "importPath": "server.messaging.models",
        "description": "server.messaging.models",
        "peekOfCode": "class MessageReadStatus(models.Model):\n    \"\"\"حالة قراءة الرسائل\"\"\"\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='read_statuses')\n    message = models.ForeignKey(Message, on_delete=models.CASCADE, related_name='read_statuses')\n    read_at = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        db_table = 'message_read_status'\n        verbose_name = 'Message Read Status'\n        verbose_name_plural = 'Message Read Statuses'\n        unique_together = ['user', 'message']",
        "detail": "server.messaging.models",
        "documentation": {}
    },
    {
        "label": "ConversationReadTime",
        "kind": 6,
        "importPath": "server.messaging.models",
        "description": "server.messaging.models",
        "peekOfCode": "class ConversationReadTime(models.Model):\n    \"\"\"آخر وقت قراءة للمحادثة\"\"\"\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='last_read_times')\n    conversation = models.ForeignKey(Conversation, on_delete=models.CASCADE, related_name='read_times')\n    last_read_at = models.DateTimeField(default=timezone.now)\n    class Meta:\n        db_table = 'conversation_read_times'\n        verbose_name = 'Conversation Read Time'\n        verbose_name_plural = 'Conversation Read Times'\n        unique_together = ['user', 'conversation']",
        "detail": "server.messaging.models",
        "documentation": {}
    },
    {
        "label": "MessageReaction",
        "kind": 6,
        "importPath": "server.messaging.models",
        "description": "server.messaging.models",
        "peekOfCode": "class MessageReaction(models.Model):\n    \"\"\"تفاعلات الرسائل\"\"\"\n    REACTION_TYPES = [\n        ('👍', 'Thumbs Up'),\n        ('❤️', 'Heart'),\n        ('😂', 'Laugh'),\n        ('😮', 'Wow'),\n        ('😢', 'Sad'),\n        ('😠', 'Angry'),\n        ('✅', 'Check'),",
        "detail": "server.messaging.models",
        "documentation": {}
    },
    {
        "label": "BlockedUser",
        "kind": 6,
        "importPath": "server.messaging.models",
        "description": "server.messaging.models",
        "peekOfCode": "class BlockedUser(models.Model):\n    \"\"\"المستخدمون المحظورون\"\"\"\n    blocker = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='blocked_users')\n    blocked = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='blocked_by')\n    reason = models.TextField(blank=True)\n    blocked_at = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        db_table = 'blocked_users'\n        verbose_name = 'Blocked User'\n        verbose_name_plural = 'Blocked Users'",
        "detail": "server.messaging.models",
        "documentation": {}
    },
    {
        "label": "ConversationSettings",
        "kind": 6,
        "importPath": "server.messaging.models",
        "description": "server.messaging.models",
        "peekOfCode": "class ConversationSettings(models.Model):\n    \"\"\"إعدادات المحادثة\"\"\"\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='conversation_settings')\n    conversation = models.ForeignKey(Conversation, on_delete=models.CASCADE, related_name='user_settings')\n    # Notification settings\n    notifications_enabled = models.BooleanField(default=True)\n    sound_enabled = models.BooleanField(default=True)\n    # Display settings\n    is_pinned = models.BooleanField(default=False)\n    is_muted = models.BooleanField(default=False)",
        "detail": "server.messaging.models",
        "documentation": {}
    },
    {
        "label": "TypingIndicator",
        "kind": 6,
        "importPath": "server.messaging.models",
        "description": "server.messaging.models",
        "peekOfCode": "class TypingIndicator(models.Model):\n    \"\"\"مؤشر الكتابة\"\"\"\n    conversation = models.ForeignKey(Conversation, on_delete=models.CASCADE, related_name='typing_indicators')\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='typing_indicators')\n    started_at = models.DateTimeField(auto_now_add=True)\n    last_activity = models.DateTimeField(auto_now=True)\n    class Meta:\n        db_table = 'typing_indicators'\n        verbose_name = 'Typing Indicator'\n        verbose_name_plural = 'Typing Indicators'",
        "detail": "server.messaging.models",
        "documentation": {}
    },
    {
        "label": "websocket_urlpatterns",
        "kind": 5,
        "importPath": "server.messaging.routing",
        "description": "server.messaging.routing",
        "peekOfCode": "websocket_urlpatterns = [\n    re_path(r'^ws/chat/(?P<conversation_id>\\d+)/$', consumers.ChatConsumer.as_asgi()),\n    re_path(r'^ws/notifications/$', consumers.NotificationConsumer.as_asgi()),\n]",
        "detail": "server.messaging.routing",
        "documentation": {}
    },
    {
        "label": "UserBasicSerializer",
        "kind": 6,
        "importPath": "server.messaging.serializers",
        "description": "server.messaging.serializers",
        "peekOfCode": "class UserBasicSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer أساسي لبيانات المستخدم\"\"\"\n    class Meta:\n        model = User\n        fields = [\n            'id', 'username', 'first_name', 'last_name', \n            'avatar', 'user_type', 'is_verified', 'is_available'\n        ]\nclass MessageAttachmentSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لمرفقات الرسائل\"\"\"",
        "detail": "server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "MessageAttachmentSerializer",
        "kind": 6,
        "importPath": "server.messaging.serializers",
        "description": "server.messaging.serializers",
        "peekOfCode": "class MessageAttachmentSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لمرفقات الرسائل\"\"\"\n    file_url = serializers.SerializerMethodField()\n    file_size_formatted = serializers.CharField(read_only=True)\n    class Meta:\n        model = MessageAttachment\n        fields = [\n            'id', 'file', 'file_url', 'original_filename', 'file_size', \n            'file_size_formatted', 'file_type', 'mime_type', 'width', \n            'height', 'duration', 'thumbnail', 'created_at'",
        "detail": "server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "MessageReactionSerializer",
        "kind": 6,
        "importPath": "server.messaging.serializers",
        "description": "server.messaging.serializers",
        "peekOfCode": "class MessageReactionSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لتفاعلات الرسائل\"\"\"\n    user = UserBasicSerializer(read_only=True)\n    class Meta:\n        model = MessageReaction\n        fields = ['id', 'reaction', 'user', 'created_at']\n        read_only_fields = ['id', 'user', 'created_at']\nclass MessageSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer للرسائل\"\"\"\n    sender = UserBasicSerializer(read_only=True)",
        "detail": "server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "MessageSerializer",
        "kind": 6,
        "importPath": "server.messaging.serializers",
        "description": "server.messaging.serializers",
        "peekOfCode": "class MessageSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer للرسائل\"\"\"\n    sender = UserBasicSerializer(read_only=True)\n    is_read = serializers.SerializerMethodField()\n    attachments = serializers.SerializerMethodField()\n    reactions = serializers.SerializerMethodField()\n    reply_to = serializers.SerializerMethodField()\n    class Meta:\n        model = Message\n        fields = [",
        "detail": "server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "MessageResponseSerializer",
        "kind": 6,
        "importPath": "server.messaging.serializers",
        "description": "server.messaging.serializers",
        "peekOfCode": "class MessageResponseSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for message response after creation\"\"\"\n    sender = UserBasicSerializer(read_only=True)\n    is_read = serializers.SerializerMethodField()\n    attachments = serializers.SerializerMethodField()\n    reactions = serializers.SerializerMethodField()\n    reply_to = serializers.SerializerMethodField()\n    class Meta:\n        model = Message\n        fields = [",
        "detail": "server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "MessageCreateSerializer",
        "kind": 6,
        "importPath": "server.messaging.serializers",
        "description": "server.messaging.serializers",
        "peekOfCode": "class MessageCreateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لإنشاء الرسائل مع دعم المرفقات\"\"\"\n    attachments = serializers.ListField(\n        child=serializers.FileField(),\n        required=False,\n        max_length=5  # Maximum 5 attachments per message\n    )\n    reply_to_id = serializers.IntegerField(required=False)\n    class Meta:\n        model = Message",
        "detail": "server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "ConversationSerializer",
        "kind": 6,
        "importPath": "server.messaging.serializers",
        "description": "server.messaging.serializers",
        "peekOfCode": "class ConversationSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer للمحادثات\"\"\"\n    participants = UserBasicSerializer(many=True, read_only=True)\n    project_info = serializers.SerializerMethodField()\n    last_message = serializers.SerializerMethodField()\n    unread_count = serializers.SerializerMethodField()\n    other_participant = serializers.SerializerMethodField()\n    class Meta:\n        model = Conversation\n        fields = [",
        "detail": "server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "ConversationDetailSerializer",
        "kind": 6,
        "importPath": "server.messaging.serializers",
        "description": "server.messaging.serializers",
        "peekOfCode": "class ConversationDetailSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer تفصيلي للمحادثة\"\"\"\n    participants = UserBasicSerializer(many=True, read_only=True)\n    messages = MessageSerializer(many=True, read_only=True)\n    project_info = serializers.SerializerMethodField()\n    other_participant = serializers.SerializerMethodField()\n    class Meta:\n        model = Conversation\n        fields = [\n            'id', 'participants', 'messages', 'project_info',",
        "detail": "server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "ConversationCreateSerializer",
        "kind": 6,
        "importPath": "server.messaging.serializers",
        "description": "server.messaging.serializers",
        "peekOfCode": "class ConversationCreateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لإنشاء محادثة جديدة\"\"\"\n    recipient_id = serializers.IntegerField(write_only=True)\n    project_id = serializers.IntegerField(required=False, write_only=True)\n    initial_message = serializers.CharField(write_only=True)\n    class Meta:\n        model = Conversation\n        fields = ['recipient_id', 'project_id', 'initial_message']\n    def validate_recipient_id(self, value):\n        \"\"\"Validate recipient exists and is not the current user\"\"\"",
        "detail": "server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "ConversationStatsSerializer",
        "kind": 6,
        "importPath": "server.messaging.serializers",
        "description": "server.messaging.serializers",
        "peekOfCode": "class ConversationStatsSerializer(serializers.Serializer):\n    \"\"\"Serializer لإحصائيات المحادثات\"\"\"\n    total_conversations = serializers.IntegerField()\n    unread_conversations = serializers.IntegerField()\n    total_messages = serializers.IntegerField()\n    unread_messages = serializers.IntegerField()\n    active_conversations = serializers.IntegerField()\n    recent_activity = serializers.DictField()\nclass MessageBulkActionSerializer(serializers.Serializer):\n    \"\"\"Serializer لإجراءات متعددة على الرسائل\"\"\"",
        "detail": "server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "MessageBulkActionSerializer",
        "kind": 6,
        "importPath": "server.messaging.serializers",
        "description": "server.messaging.serializers",
        "peekOfCode": "class MessageBulkActionSerializer(serializers.Serializer):\n    \"\"\"Serializer لإجراءات متعددة على الرسائل\"\"\"\n    message_ids = serializers.ListField(\n        child=serializers.IntegerField(),\n        min_length=1,\n        max_length=100\n    )\n    action = serializers.ChoiceField(choices=['mark_read', 'mark_unread', 'delete'])\n    def validate_message_ids(self, value):\n        \"\"\"Validate message IDs belong to user's conversations\"\"\"",
        "detail": "server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "ConversationSearchSerializer",
        "kind": 6,
        "importPath": "server.messaging.serializers",
        "description": "server.messaging.serializers",
        "peekOfCode": "class ConversationSearchSerializer(serializers.Serializer):\n    \"\"\"Serializer للبحث في المحادثات\"\"\"\n    query = serializers.CharField(required=False)\n    participant = serializers.CharField(required=False)\n    project_id = serializers.IntegerField(required=False)\n    has_unread = serializers.BooleanField(required=False)\n    date_from = serializers.DateField(required=False)\n    date_to = serializers.DateField(required=False)\n    def validate(self, attrs):\n        \"\"\"Validate search parameters\"\"\"",
        "detail": "server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.messaging.serializers",
        "description": "server.messaging.serializers",
        "peekOfCode": "User = get_user_model()\nclass UserBasicSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer أساسي لبيانات المستخدم\"\"\"\n    class Meta:\n        model = User\n        fields = [\n            'id', 'username', 'first_name', 'last_name', \n            'avatar', 'user_type', 'is_verified', 'is_available'\n        ]\nclass MessageAttachmentSerializer(serializers.ModelSerializer):",
        "detail": "server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "server.messaging.urls",
        "description": "server.messaging.urls",
        "peekOfCode": "app_name = 'messaging'\nurlpatterns = [\n    # Conversations\n    path('conversations/', views.ConversationListView.as_view(), name='conversation_list'),\n    path('conversations/create/', views.ConversationCreateView.as_view(), name='conversation_create'),\n    path('conversations/<int:pk>/', views.ConversationDetailView.as_view(), name='conversation_detail'),\n    path('conversations/<int:conversation_id>/delete/', views.delete_conversation, name='delete_conversation'),\n    path('conversations/search/', views.conversation_search, name='conversation_search'),\n    path('conversations/stats/', views.conversation_stats, name='conversation_stats'),\n    # Messages",
        "detail": "server.messaging.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.messaging.urls",
        "description": "server.messaging.urls",
        "peekOfCode": "urlpatterns = [\n    # Conversations\n    path('conversations/', views.ConversationListView.as_view(), name='conversation_list'),\n    path('conversations/create/', views.ConversationCreateView.as_view(), name='conversation_create'),\n    path('conversations/<int:pk>/', views.ConversationDetailView.as_view(), name='conversation_detail'),\n    path('conversations/<int:conversation_id>/delete/', views.delete_conversation, name='delete_conversation'),\n    path('conversations/search/', views.conversation_search, name='conversation_search'),\n    path('conversations/stats/', views.conversation_stats, name='conversation_stats'),\n    # Messages\n    path('conversations/<int:conversation_id>/messages/', views.MessageListView.as_view(), name='message_list'),",
        "detail": "server.messaging.urls",
        "documentation": {}
    },
    {
        "label": "ConversationListView",
        "kind": 6,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "class ConversationListView(generics.ListAPIView):\n    \"\"\"قائمة المحادثات\"\"\"\n    serializer_class = ConversationSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]\n    search_fields = ['participants__first_name', 'participants__last_name', 'project__title']\n    ordering = ['-updated_at']\n    def get_queryset(self):\n        \"\"\"Get user's conversations with optimized queries\"\"\"\n        return Conversation.objects.filter(",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "ConversationDetailView",
        "kind": 6,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "class ConversationDetailView(generics.RetrieveAPIView):\n    \"\"\"تفاصيل المحادثة\"\"\"\n    serializer_class = ConversationDetailSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        return Conversation.objects.filter(\n            participants=self.request.user\n        ).select_related('project').prefetch_related(\n            'participants',\n            Prefetch(",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "ConversationCreateView",
        "kind": 6,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "class ConversationCreateView(generics.CreateAPIView):\n    \"\"\"إنشاء محادثة جديدة\"\"\"\n    serializer_class = ConversationCreateSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    @extend_schema(\n        operation_id=\"create_conversation\",\n        summary=\"Create New Conversation\",\n        description=\"Create new conversation with another user\",\n        tags=[\"Messaging\"],\n    )",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "MessageListView",
        "kind": 6,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "class MessageListView(generics.ListAPIView):\n    \"\"\"قائمة رسائل المحادثة\"\"\"\n    serializer_class = MessageSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [OrderingFilter]\n    ordering = ['-created_at']\n    def get_queryset(self):\n        conversation_id = self.kwargs['conversation_id']\n        return Message.objects.filter(\n            conversation_id=conversation_id,",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "MessageCreateView",
        "kind": 6,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "class MessageCreateView(generics.CreateAPIView):\n    \"\"\"إنشاء رسالة جديدة\"\"\"\n    serializer_class = MessageCreateSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_serializer_context(self):\n        context = super().get_serializer_context()\n        # Get conversation and validate user access\n        conversation_id = self.kwargs['conversation_id']\n        try:\n            conversation = Conversation.objects.get(",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "MessageUpdateView",
        "kind": 6,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "class MessageUpdateView(generics.UpdateAPIView):\n    \"\"\"تحديث الرسالة\"\"\"\n    serializer_class = MessageSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        return Message.objects.filter(\n            sender=self.request.user,\n            conversation__participants=self.request.user\n        )\n    def update(self, request, *args, **kwargs):",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "MessageDeleteView",
        "kind": 6,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "class MessageDeleteView(generics.DestroyAPIView):\n    \"\"\"حذف الرسالة\"\"\"\n    serializer_class = MessageSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        return Message.objects.filter(\n            sender=self.request.user,\n            conversation__participants=self.request.user\n        )\n    def destroy(self, request, *args, **kwargs):",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "MarkMessagesReadView",
        "kind": 6,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "class MarkMessagesReadView(APIView):\n    \"\"\"وضع علامة مقروء على الرسائل\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    serializer_class = MessageSerializer\n    @extend_schema(\n        operation_id=\"mark_messages_read\",\n        summary=\"وضع علامة مقروء على الرسائل\",\n        description=\"وضع علامة مقروء على جميع رسائل المحادثة\",\n        tags=[\"Messages\"],\n    )",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "MessageBulkActionView",
        "kind": 6,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "class MessageBulkActionView(APIView):\n    \"\"\"إجراءات متعددة على الرسائل\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    serializer_class = MessageBulkActionSerializer\n    @extend_schema(\n        operation_id=\"message_bulk_action\",\n        summary=\"إجراءات متعددة على الرسائل\",\n        description=\"تنفيذ إجراءات متعددة على مجموعة من الرسائل\",\n        tags=[\"Messages\"],\n        request=MessageBulkActionSerializer,",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "conversation_stats",
        "kind": 2,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "def conversation_stats(request):\n    \"\"\"إحصائيات المحادثات\"\"\"\n    user = request.user\n    # Get user's conversations\n    conversations = Conversation.objects.filter(participants=user)\n    # Calculate stats\n    total_conversations = conversations.count()\n    # Conversations with unread messages\n    unread_conversations = conversations.filter(\n        messages__isnull=False",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "conversation_search",
        "kind": 2,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "def conversation_search(request):\n    \"\"\"البحث في المحادثات\"\"\"\n    serializer = ConversationSearchSerializer(data=request.query_params)\n    if serializer.is_valid():\n        data = serializer.validated_data\n        # Start with user's conversations\n        queryset = Conversation.objects.filter(\n            participants=request.user\n        ).select_related('project').prefetch_related('participants')\n        # Apply search filters",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "start_conversation_with_user",
        "kind": 2,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "def start_conversation_with_user(request, user_id):\n    \"\"\"بدء محادثة مع مستخدم محدد\"\"\"\n    try:\n        recipient = User.objects.get(id=user_id)\n        project_id = request.data.get('project_id')\n        if recipient == request.user:\n            return Response({\n                'error': 'Cannot start conversation with yourself'\n            }, status=status.HTTP_400_BAD_REQUEST)\n        # Check if conversation already exists for this project",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "delete_conversation",
        "kind": 2,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "def delete_conversation(request, conversation_id):\n    \"\"\"حذف المحادثة\"\"\"\n    try:\n        conversation = Conversation.objects.get(\n            id=conversation_id,\n            participants=request.user\n        )\n        # Delete all messages first\n        Message.objects.filter(conversation=conversation).delete()\n        # Delete the conversation",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "message_stats",
        "kind": 2,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "def message_stats(request):\n    \"\"\"Get message statistics for current user\"\"\"\n    try:\n        user = request.user\n        # Get basic stats\n        total_messages = Message.objects.filter(sender=user).count()\n        unread_messages = Message.objects.filter(\n            conversation__participants=user\n        ).exclude(sender=user).exclude(\n            read_statuses__user=user",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "send_message",
        "kind": 2,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "def send_message(request):\n    \"\"\"إرسال رسالة لمستخدم محدد مع دعم المرفقات\"\"\"\n    try:\n        print(f\"DEBUG: Request data: {request.data}\")\n        print(f\"DEBUG: Request files: {request.FILES}\")\n        print(f\"DEBUG: Request user: {request.user}\")\n        recipient_id = request.data.get('recipient')\n        conversation_id = request.data.get('conversation_id')\n        message_text = request.data.get('message', '')\n        project_id = request.data.get('project_id')",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "add_message_reaction",
        "kind": 2,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "def add_message_reaction(request, message_id):\n    \"\"\"Add reaction to a message\"\"\"\n    try:\n        message = Message.objects.get(id=message_id)\n        # Check if user is participant in conversation\n        if request.user not in message.conversation.participants.all():\n            return Response(\n                {'error': 'You are not a participant in this conversation'}, \n                status=status.HTTP_403_FORBIDDEN\n            )",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "remove_message_reaction",
        "kind": 2,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "def remove_message_reaction(request, message_id, reaction_id):\n    \"\"\"Remove reaction from a message\"\"\"\n    try:\n        reaction = MessageReaction.objects.get(id=reaction_id, message_id=message_id)\n        # Check if user owns the reaction\n        if reaction.user != request.user:\n            return Response(\n                {'error': 'You can only remove your own reactions'}, \n                status=status.HTTP_403_FORBIDDEN\n            )",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "upload_message_attachment",
        "kind": 2,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "def upload_message_attachment(request, conversation_id):\n    \"\"\"Upload attachment for a message\"\"\"\n    try:\n        conversation = Conversation.objects.get(id=conversation_id)\n        # Check if user is participant\n        if request.user not in conversation.participants.all():\n            return Response(\n                {'error': 'You are not a participant in this conversation'}, \n                status=status.HTTP_403_FORBIDDEN\n            )",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "mark_conversation_as_read",
        "kind": 2,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "def mark_conversation_as_read(request, conversation_id):\n    \"\"\"Mark all messages in a conversation as read for the current user\"\"\"\n    try:\n        conversation = Conversation.objects.get(id=conversation_id)\n        # Check if user is a participant\n        if request.user not in conversation.participants.all():\n            return Response(\n                {'error': 'You are not a participant in this conversation'}, \n                status=status.HTTP_403_FORBIDDEN\n            )",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "User = get_user_model()\nclass ConversationListView(generics.ListAPIView):\n    \"\"\"قائمة المحادثات\"\"\"\n    serializer_class = ConversationSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]\n    search_fields = ['participants__first_name', 'participants__last_name', 'project__title']\n    ordering = ['-updated_at']\n    def get_queryset(self):\n        \"\"\"Get user's conversations with optimized queries\"\"\"",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.notifications.migrations.0001_initial",
        "description": "server.notifications.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Notification',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "server.notifications.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "NotificationsConfig",
        "kind": 6,
        "importPath": "server.notifications.apps",
        "description": "server.notifications.apps",
        "peekOfCode": "class NotificationsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'notifications'",
        "detail": "server.notifications.apps",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "server.notifications.models",
        "description": "server.notifications.models",
        "peekOfCode": "class Notification(models.Model):\n    \"\"\"الإشعارات\"\"\"\n    TYPE_CHOICES = [\n        ('project_update', 'Project Update'),\n        ('new_message', 'New Message'),\n        ('payment_received', 'Payment Received'),\n        ('contract_signed', 'Contract Signed'),\n        ('review_received', 'Review Received'),\n        ('system', 'System Notification'),\n    ]",
        "detail": "server.notifications.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.notifications.models",
        "description": "server.notifications.models",
        "peekOfCode": "User = get_user_model()\nclass Notification(models.Model):\n    \"\"\"الإشعارات\"\"\"\n    TYPE_CHOICES = [\n        ('project_update', 'Project Update'),\n        ('new_message', 'New Message'),\n        ('payment_received', 'Payment Received'),\n        ('contract_signed', 'Contract Signed'),\n        ('review_received', 'Review Received'),\n        ('system', 'System Notification'),",
        "detail": "server.notifications.models",
        "documentation": {}
    },
    {
        "label": "NotificationSerializer",
        "kind": 6,
        "importPath": "server.notifications.serializers",
        "description": "server.notifications.serializers",
        "peekOfCode": "class NotificationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Notification\n        fields = [\n            'id', 'type', 'title', 'message', 'is_read', \n            'data', 'created_at', 'read_at'\n        ]\n        read_only_fields = ['id', 'created_at', 'read_at']\nclass NotificationCreateSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "server.notifications.serializers",
        "documentation": {}
    },
    {
        "label": "NotificationCreateSerializer",
        "kind": 6,
        "importPath": "server.notifications.serializers",
        "description": "server.notifications.serializers",
        "peekOfCode": "class NotificationCreateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Notification\n        fields = ['type', 'title', 'message', 'data']\nclass NotificationUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Notification\n        fields = ['is_read']",
        "detail": "server.notifications.serializers",
        "documentation": {}
    },
    {
        "label": "NotificationUpdateSerializer",
        "kind": 6,
        "importPath": "server.notifications.serializers",
        "description": "server.notifications.serializers",
        "peekOfCode": "class NotificationUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Notification\n        fields = ['is_read']",
        "detail": "server.notifications.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "server.notifications.urls",
        "description": "server.notifications.urls",
        "peekOfCode": "app_name = 'notifications'\nurlpatterns = [\n    # Notifications\n    path('', views.NotificationListView.as_view(), name='notification_list'),\n    path('<int:pk>/', views.NotificationDetailView.as_view(), name='notification_detail'),\n    path('<int:pk>/update/', views.NotificationUpdateView.as_view(), name='notification_update'),\n    # Actions\n    path('mark-all-read/', views.mark_all_read, name='mark_all_read'),\n    path('stats/', views.notification_stats, name='notification_stats'),\n]",
        "detail": "server.notifications.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.notifications.urls",
        "description": "server.notifications.urls",
        "peekOfCode": "urlpatterns = [\n    # Notifications\n    path('', views.NotificationListView.as_view(), name='notification_list'),\n    path('<int:pk>/', views.NotificationDetailView.as_view(), name='notification_detail'),\n    path('<int:pk>/update/', views.NotificationUpdateView.as_view(), name='notification_update'),\n    # Actions\n    path('mark-all-read/', views.mark_all_read, name='mark_all_read'),\n    path('stats/', views.notification_stats, name='notification_stats'),\n]",
        "detail": "server.notifications.urls",
        "documentation": {}
    },
    {
        "label": "NotificationListView",
        "kind": 6,
        "importPath": "server.notifications.views",
        "description": "server.notifications.views",
        "peekOfCode": "class NotificationListView(generics.ListAPIView):\n    \"\"\"قائمة الإشعارات\"\"\"\n    serializer_class = NotificationSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, OrderingFilter]\n    filterset_fields = ['type', 'is_read']\n    ordering = ['-created_at']\n    def get_queryset(self):\n        return Notification.objects.filter(user=self.request.user)\n    @extend_schema(",
        "detail": "server.notifications.views",
        "documentation": {}
    },
    {
        "label": "NotificationDetailView",
        "kind": 6,
        "importPath": "server.notifications.views",
        "description": "server.notifications.views",
        "peekOfCode": "class NotificationDetailView(generics.RetrieveAPIView):\n    \"\"\"تفاصيل الإشعار\"\"\"\n    serializer_class = NotificationSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        return Notification.objects.filter(user=self.request.user)\n    @extend_schema(\n        operation_id=\"get_notification_detail\",\n        summary=\"Notification Details\",\n        description=\"Get specific notification details\",",
        "detail": "server.notifications.views",
        "documentation": {}
    },
    {
        "label": "NotificationUpdateView",
        "kind": 6,
        "importPath": "server.notifications.views",
        "description": "server.notifications.views",
        "peekOfCode": "class NotificationUpdateView(generics.UpdateAPIView):\n    \"\"\"تحديث الإشعار\"\"\"\n    serializer_class = NotificationUpdateSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        return Notification.objects.filter(user=self.request.user)\n    def perform_update(self, serializer):\n        if serializer.validated_data.get('is_read'):\n            serializer.save(read_at=timezone.now())\n        else:",
        "detail": "server.notifications.views",
        "documentation": {}
    },
    {
        "label": "mark_all_read",
        "kind": 2,
        "importPath": "server.notifications.views",
        "description": "server.notifications.views",
        "peekOfCode": "def mark_all_read(request):\n    \"\"\"وضع علامة مقروء على جميع الإشعارات\"\"\"\n    updated_count = Notification.objects.filter(\n        user=request.user,\n        is_read=False\n    ).update(is_read=True, read_at=timezone.now())\n    return Response({\n        'message': f'{updated_count} notifications marked as read',\n        'updated_count': updated_count\n    })",
        "detail": "server.notifications.views",
        "documentation": {}
    },
    {
        "label": "notification_stats",
        "kind": 2,
        "importPath": "server.notifications.views",
        "description": "server.notifications.views",
        "peekOfCode": "def notification_stats(request):\n    \"\"\"إحصائيات الإشعارات\"\"\"\n    notifications = Notification.objects.filter(user=request.user)\n    stats = {\n        'total_notifications': notifications.count(),\n        'unread_notifications': notifications.filter(is_read=False).count(),\n        'read_notifications': notifications.filter(is_read=True).count(),\n        'notifications_by_type': {}\n    }\n    # Group by type",
        "detail": "server.notifications.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.payments.migrations.0001_initial",
        "description": "server.payments.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('contracts', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Currency',\n            fields=[",
        "detail": "server.payments.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CurrencyAdmin",
        "kind": 6,
        "importPath": "server.payments.admin",
        "description": "server.payments.admin",
        "peekOfCode": "class CurrencyAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة العملات\n    \"\"\"\n    list_display = (\n        'code', 'name', 'symbol', 'exchange_rate', \n        'is_active', 'created_at'\n    )\n    list_filter = ('is_active', 'created_at')\n    search_fields = ('code', 'name')",
        "detail": "server.payments.admin",
        "documentation": {}
    },
    {
        "label": "WalletAdmin",
        "kind": 6,
        "importPath": "server.payments.admin",
        "description": "server.payments.admin",
        "peekOfCode": "class WalletAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة المحافظ الرقمية\n    \"\"\"\n    list_display = (\n        'user', 'available_balance_formatted', 'pending_balance_formatted',\n        'total_earned_formatted', 'currency', 'is_active', 'created_at'\n    )\n    list_filter = ('currency', 'is_active', 'created_at')\n    search_fields = (",
        "detail": "server.payments.admin",
        "documentation": {}
    },
    {
        "label": "WalletTransactionAdmin",
        "kind": 6,
        "importPath": "server.payments.admin",
        "description": "server.payments.admin",
        "peekOfCode": "class WalletTransactionAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة معاملات المحافظ\n    \"\"\"\n    list_display = (\n        'wallet_user', 'amount_formatted', 'transaction_type',\n        'source', 'payment_link', 'created_at'\n    )\n    list_filter = (\n        'transaction_type', 'source', 'created_at'",
        "detail": "server.payments.admin",
        "documentation": {}
    },
    {
        "label": "EscrowAccountAdmin",
        "kind": 6,
        "importPath": "server.payments.admin",
        "description": "server.payments.admin",
        "peekOfCode": "class EscrowAccountAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة حسابات الضمان\n    \"\"\"\n    list_display = (\n        'escrow_id', 'client', 'professional', 'amount_formatted',\n        'status', 'funded_at', 'auto_release_date'\n    )\n    list_filter = (\n        'status', 'funded_at', 'released_at', 'auto_release_date'",
        "detail": "server.payments.admin",
        "documentation": {}
    },
    {
        "label": "PaymentMethodAdmin",
        "kind": 6,
        "importPath": "server.payments.admin",
        "description": "server.payments.admin",
        "peekOfCode": "class PaymentMethodAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة طرق الدفع\n    \"\"\"\n    list_display = (\n        'user', 'type', 'provider', 'last4_display',\n        'is_default', 'is_verified', 'created_at'\n    )\n    list_filter = ('type', 'provider', 'is_default', 'is_verified', 'created_at')\n    search_fields = (",
        "detail": "server.payments.admin",
        "documentation": {}
    },
    {
        "label": "PaymentAdmin",
        "kind": 6,
        "importPath": "server.payments.admin",
        "description": "server.payments.admin",
        "peekOfCode": "class PaymentAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة المدفوعات\n    \"\"\"\n    list_display = (\n        'payment_id', 'payer', 'payee', 'amount_formatted',\n        'payment_type', 'status', 'created_at'\n    )\n    list_filter = (\n        'status', 'payment_type', 'currency', 'created_at', 'processed_at'",
        "detail": "server.payments.admin",
        "documentation": {}
    },
    {
        "label": "WithdrawalAdmin",
        "kind": 6,
        "importPath": "server.payments.admin",
        "description": "server.payments.admin",
        "peekOfCode": "class WithdrawalAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة طلبات السحب\n    \"\"\"\n    list_display = (\n        'user', 'amount_formatted', 'status', 'payment_method',\n        'requested_at', 'processed_at'\n    )\n    list_filter = ('status', 'currency', 'requested_at', 'processed_at')\n    search_fields = (",
        "detail": "server.payments.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.site_header",
        "kind": 5,
        "importPath": "server.payments.admin",
        "description": "server.payments.admin",
        "peekOfCode": "admin.site.site_header = 'A-List Payments Admin'\nadmin.site.site_title = 'Payments Management'\nadmin.site.index_title = 'إدارة المدفوعات'",
        "detail": "server.payments.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.site_title",
        "kind": 5,
        "importPath": "server.payments.admin",
        "description": "server.payments.admin",
        "peekOfCode": "admin.site.site_title = 'Payments Management'\nadmin.site.index_title = 'إدارة المدفوعات'",
        "detail": "server.payments.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.index_title",
        "kind": 5,
        "importPath": "server.payments.admin",
        "description": "server.payments.admin",
        "peekOfCode": "admin.site.index_title = 'إدارة المدفوعات'",
        "detail": "server.payments.admin",
        "documentation": {}
    },
    {
        "label": "PaymentsConfig",
        "kind": 6,
        "importPath": "server.payments.apps",
        "description": "server.payments.apps",
        "peekOfCode": "class PaymentsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'payments'",
        "detail": "server.payments.apps",
        "documentation": {}
    },
    {
        "label": "Currency",
        "kind": 6,
        "importPath": "server.payments.models",
        "description": "server.payments.models",
        "peekOfCode": "class Currency(models.Model):\n    \"\"\"العملات المدعومة\"\"\"\n    code = models.CharField(max_length=3, unique=True)  # USD, EUR, etc.\n    name = models.CharField(max_length=50)\n    symbol = models.CharField(max_length=5)\n    exchange_rate = models.DecimalField(max_digits=10, decimal_places=6, default=1.0)\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:",
        "detail": "server.payments.models",
        "documentation": {}
    },
    {
        "label": "Wallet",
        "kind": 6,
        "importPath": "server.payments.models",
        "description": "server.payments.models",
        "peekOfCode": "class Wallet(models.Model):\n    \"\"\"محفظة المستخدم الرقمية\"\"\"\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='wallet')\n    # Available balance (can be withdrawn)\n    available_balance = models.DecimalField(\n        max_digits=15, \n        decimal_places=2, \n        default=0,\n        validators=[MinValueValidator(0)]\n    )",
        "detail": "server.payments.models",
        "documentation": {}
    },
    {
        "label": "WalletTransaction",
        "kind": 6,
        "importPath": "server.payments.models",
        "description": "server.payments.models",
        "peekOfCode": "class WalletTransaction(models.Model):\n    \"\"\"معاملات المحفظة\"\"\"\n    TRANSACTION_TYPES = [\n        ('credit', 'Credit'),\n        ('debit', 'Debit'),\n    ]\n    wallet = models.ForeignKey(Wallet, on_delete=models.CASCADE, related_name='transactions')\n    amount = models.DecimalField(max_digits=15, decimal_places=2)\n    transaction_type = models.CharField(max_length=10, choices=TRANSACTION_TYPES)\n    source = models.CharField(max_length=100)  # payment, withdrawal, refund, etc.",
        "detail": "server.payments.models",
        "documentation": {}
    },
    {
        "label": "EscrowAccount",
        "kind": 6,
        "importPath": "server.payments.models",
        "description": "server.payments.models",
        "peekOfCode": "class EscrowAccount(models.Model):\n    \"\"\"حساب Escrow لحماية الدفعات\"\"\"\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('funded', 'Funded'),\n        ('released', 'Released'),\n        ('disputed', 'Disputed'),\n        ('refunded', 'Refunded'),\n        ('expired', 'Expired'),\n    ]",
        "detail": "server.payments.models",
        "documentation": {}
    },
    {
        "label": "PaymentMethod",
        "kind": 6,
        "importPath": "server.payments.models",
        "description": "server.payments.models",
        "peekOfCode": "class PaymentMethod(models.Model):\n    \"\"\"طرق الدفع\"\"\"\n    TYPE_CHOICES = [\n        ('card', 'Credit/Debit Card'),\n        ('bank', 'Bank Transfer'),\n        ('paypal', 'PayPal'),\n        ('stripe', 'Stripe'),\n        ('wallet', 'Wallet Balance'),\n    ]\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='payment_methods')",
        "detail": "server.payments.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "kind": 6,
        "importPath": "server.payments.models",
        "description": "server.payments.models",
        "peekOfCode": "class Payment(models.Model):\n    \"\"\"المدفوعات المحسنة\"\"\"\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('processing', 'Processing'),\n        ('succeeded', 'Succeeded'),\n        ('failed', 'Failed'),\n        ('cancelled', 'Cancelled'),\n        ('refunded', 'Refunded'),\n    ]",
        "detail": "server.payments.models",
        "documentation": {}
    },
    {
        "label": "Withdrawal",
        "kind": 6,
        "importPath": "server.payments.models",
        "description": "server.payments.models",
        "peekOfCode": "class Withdrawal(models.Model):\n    \"\"\"طلبات السحب\"\"\"\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('processing', 'Processing'),\n        ('completed', 'Completed'),\n        ('failed', 'Failed'),\n        ('cancelled', 'Cancelled'),\n    ]\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='withdrawals')",
        "detail": "server.payments.models",
        "documentation": {}
    },
    {
        "label": "PlatformFeeSettings",
        "kind": 6,
        "importPath": "server.payments.models",
        "description": "server.payments.models",
        "peekOfCode": "class PlatformFeeSettings(models.Model):\n    \"\"\"إعدادات عمولة المنصة\"\"\"\n    # Fee rates\n    platform_fee_rate = models.DecimalField(\n        max_digits=5, \n        decimal_places=4, \n        default=0.10,  # 10%\n        validators=[MinValueValidator(0), MaxValueValidator(1)]\n    )\n    processing_fee_rate = models.DecimalField(",
        "detail": "server.payments.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.payments.models",
        "description": "server.payments.models",
        "peekOfCode": "User = get_user_model()\nclass Currency(models.Model):\n    \"\"\"العملات المدعومة\"\"\"\n    code = models.CharField(max_length=3, unique=True)  # USD, EUR, etc.\n    name = models.CharField(max_length=50)\n    symbol = models.CharField(max_length=5)\n    exchange_rate = models.DecimalField(max_digits=10, decimal_places=6, default=1.0)\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "server.payments.models",
        "documentation": {}
    },
    {
        "label": "PaymentMethodSerializer",
        "kind": 6,
        "importPath": "server.payments.serializers",
        "description": "server.payments.serializers",
        "peekOfCode": "class PaymentMethodSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لطرق الدفع\"\"\"\n    class Meta:\n        model = PaymentMethod\n        fields = [\n            'id', 'type', 'provider', 'last4', 'expiry_date',\n            'cardholder_name', 'is_default', 'is_verified',\n            'created_at', 'updated_at'\n        ]\n        read_only_fields = [",
        "detail": "server.payments.serializers",
        "documentation": {}
    },
    {
        "label": "PaymentMethodCreateSerializer",
        "kind": 6,
        "importPath": "server.payments.serializers",
        "description": "server.payments.serializers",
        "peekOfCode": "class PaymentMethodCreateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لإنشاء طريقة دفع جديدة\"\"\"\n    stripe_token = serializers.CharField(write_only=True)\n    class Meta:\n        model = PaymentMethod\n        fields = [\n            'type', 'stripe_token', 'cardholder_name', 'is_default'\n        ]\n    def create(self, validated_data):\n        stripe_token = validated_data.pop('stripe_token')",
        "detail": "server.payments.serializers",
        "documentation": {}
    },
    {
        "label": "PaymentSerializer",
        "kind": 6,
        "importPath": "server.payments.serializers",
        "description": "server.payments.serializers",
        "peekOfCode": "class PaymentSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer للمدفوعات\"\"\"\n    payer_info = serializers.SerializerMethodField()\n    payee_info = serializers.SerializerMethodField()\n    contract_info = serializers.SerializerMethodField()\n    payment_method_info = serializers.SerializerMethodField()\n    class Meta:\n        model = Payment\n        fields = [\n            'id', 'payment_id', 'amount', 'currency', 'status', 'payment_type',",
        "detail": "server.payments.serializers",
        "documentation": {}
    },
    {
        "label": "PaymentCreateSerializer",
        "kind": 6,
        "importPath": "server.payments.serializers",
        "description": "server.payments.serializers",
        "peekOfCode": "class PaymentCreateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لإنشاء دفعة جديدة\"\"\"\n    class Meta:\n        model = Payment\n        fields = [\n            'amount', 'currency', 'payee', 'contract', 'milestone',\n            'payment_method', 'description'\n        ]\n    def validate_amount(self, value):\n        \"\"\"Validate payment amount\"\"\"",
        "detail": "server.payments.serializers",
        "documentation": {}
    },
    {
        "label": "PaymentProcessSerializer",
        "kind": 6,
        "importPath": "server.payments.serializers",
        "description": "server.payments.serializers",
        "peekOfCode": "class PaymentProcessSerializer(serializers.Serializer):\n    \"\"\"Serializer لمعالجة الدفع\"\"\"\n    payment_id = serializers.IntegerField()\n    stripe_payment_intent_id = serializers.CharField(required=False)\n    def validate_payment_id(self, value):\n        \"\"\"Validate payment exists and belongs to user\"\"\"\n        try:\n            payment = Payment.objects.get(id=value)\n            if payment.payer != self.context['request'].user:\n                raise serializers.ValidationError(\"Payment not found\")",
        "detail": "server.payments.serializers",
        "documentation": {}
    },
    {
        "label": "PaymentStatsSerializer",
        "kind": 6,
        "importPath": "server.payments.serializers",
        "description": "server.payments.serializers",
        "peekOfCode": "class PaymentStatsSerializer(serializers.Serializer):\n    \"\"\"Serializer لإحصائيات المدفوعات\"\"\"\n    total_payments = serializers.IntegerField()\n    total_amount_paid = serializers.DecimalField(max_digits=15, decimal_places=2)\n    total_amount_received = serializers.DecimalField(max_digits=15, decimal_places=2)\n    pending_payments = serializers.IntegerField()\n    succeeded_payments = serializers.IntegerField()\n    failed_payments = serializers.IntegerField()\n    total_refunds = serializers.DecimalField(max_digits=15, decimal_places=2)\n    current_month_payments = serializers.DecimalField(max_digits=15, decimal_places=2)",
        "detail": "server.payments.serializers",
        "documentation": {}
    },
    {
        "label": "PaymentHistorySerializer",
        "kind": 6,
        "importPath": "server.payments.serializers",
        "description": "server.payments.serializers",
        "peekOfCode": "class PaymentHistorySerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لتاريخ المدفوعات\"\"\"\n    payment_type_display = serializers.SerializerMethodField()\n    related_user = serializers.SerializerMethodField()\n    class Meta:\n        model = Payment\n        fields = [\n            'id', 'payment_id', 'amount', 'currency', 'status', 'payment_type',\n            'payment_type_display', 'related_user', 'description',\n            'created_at', 'processed_at'",
        "detail": "server.payments.serializers",
        "documentation": {}
    },
    {
        "label": "PaymentSummarySerializer",
        "kind": 6,
        "importPath": "server.payments.serializers",
        "description": "server.payments.serializers",
        "peekOfCode": "class PaymentSummarySerializer(serializers.Serializer):\n    \"\"\"Serializer لملخص المدفوعات\"\"\"\n    contract_id = serializers.IntegerField()\n    contract_title = serializers.CharField()\n    total_amount = serializers.DecimalField(max_digits=15, decimal_places=2)\n    paid_amount = serializers.DecimalField(max_digits=15, decimal_places=2)\n    remaining_amount = serializers.DecimalField(max_digits=15, decimal_places=2)\n    payment_count = serializers.IntegerField()\n    last_payment_date = serializers.DateTimeField()\n    completion_percentage = serializers.DecimalField(max_digits=5, decimal_places=2)",
        "detail": "server.payments.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.payments.serializers",
        "description": "server.payments.serializers",
        "peekOfCode": "User = get_user_model()\nclass PaymentMethodSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لطرق الدفع\"\"\"\n    class Meta:\n        model = PaymentMethod\n        fields = [\n            'id', 'type', 'provider', 'last4', 'expiry_date',\n            'cardholder_name', 'is_default', 'is_verified',\n            'created_at', 'updated_at'\n        ]",
        "detail": "server.payments.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "server.payments.urls",
        "description": "server.payments.urls",
        "peekOfCode": "app_name = 'payments'\nurlpatterns = [\n    # Payment methods\n    path('methods/', views.PaymentMethodListView.as_view(), name='payment_method_list'),\n    path('methods/create/', views.PaymentMethodCreateView.as_view(), name='create_payment_method'),\n    path('methods/<int:pk>/update/', views.PaymentMethodUpdateView.as_view(), name='update_payment_method'),\n    path('methods/<int:pk>/delete/', views.PaymentMethodDeleteView.as_view(), name='delete_payment_method'),\n    # Payments\n    path('', views.PaymentListView.as_view(), name='payment_list'),\n    path('<int:pk>/', views.PaymentDetailView.as_view(), name='payment_detail'),",
        "detail": "server.payments.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.payments.urls",
        "description": "server.payments.urls",
        "peekOfCode": "urlpatterns = [\n    # Payment methods\n    path('methods/', views.PaymentMethodListView.as_view(), name='payment_method_list'),\n    path('methods/create/', views.PaymentMethodCreateView.as_view(), name='create_payment_method'),\n    path('methods/<int:pk>/update/', views.PaymentMethodUpdateView.as_view(), name='update_payment_method'),\n    path('methods/<int:pk>/delete/', views.PaymentMethodDeleteView.as_view(), name='delete_payment_method'),\n    # Payments\n    path('', views.PaymentListView.as_view(), name='payment_list'),\n    path('<int:pk>/', views.PaymentDetailView.as_view(), name='payment_detail'),\n    path('create/', views.PaymentCreateView.as_view(), name='create_payment'),",
        "detail": "server.payments.urls",
        "documentation": {}
    },
    {
        "label": "PaymentMethodListView",
        "kind": 6,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "class PaymentMethodListView(generics.ListAPIView):\n    \"\"\"قائمة طرق الدفع\"\"\"\n    serializer_class = PaymentMethodSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        return PaymentMethod.objects.filter(user=self.request.user)\n    @extend_schema(\n        operation_id=\"list_payment_methods\",\n        summary=\"List Payment Methods\",\n        description=\"Get current user's payment methods list\",",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "PaymentMethodCreateView",
        "kind": 6,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "class PaymentMethodCreateView(generics.CreateAPIView):\n    \"\"\"إضافة طريقة دفع جديدة\"\"\"\n    serializer_class = PaymentMethodCreateSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    @extend_schema(\n        operation_id=\"create_payment_method\",\n        summary=\"إضافة طريقة دفع جديدة\",\n        description=\"إضافة طريقة دفع جديدة للمستخدم\",\n        tags=[\"Payment Methods\"],\n    )",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "PaymentMethodUpdateView",
        "kind": 6,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "class PaymentMethodUpdateView(generics.UpdateAPIView):\n    \"\"\"تحديث طريقة الدفع\"\"\"\n    serializer_class = PaymentMethodSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        return PaymentMethod.objects.filter(user=self.request.user)\n    @extend_schema(\n        operation_id=\"update_payment_method\",\n        summary=\"تحديث طريقة الدفع\",\n        description=\"تحديث طريقة دفع موجودة\",",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "PaymentMethodDeleteView",
        "kind": 6,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "class PaymentMethodDeleteView(generics.DestroyAPIView):\n    \"\"\"حذف طريقة الدفع\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        return PaymentMethod.objects.filter(user=self.request.user)\n    def destroy(self, request, *args, **kwargs):\n        instance = self.get_object()\n        if instance.is_default:\n            # Find another payment method to set as default\n            other_method = PaymentMethod.objects.filter(",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "PaymentListView",
        "kind": 6,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "class PaymentListView(generics.ListAPIView):\n    \"\"\"قائمة المدفوعات\"\"\"\n    serializer_class = PaymentHistorySerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, OrderingFilter]\n    filterset_fields = ['status', 'currency']\n    ordering_fields = ['created_at', 'amount']\n    ordering = ['-created_at']\n    def get_queryset(self):\n        user = self.request.user",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "PaymentDetailView",
        "kind": 6,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "class PaymentDetailView(generics.RetrieveAPIView):\n    \"\"\"تفاصيل الدفع\"\"\"\n    serializer_class = PaymentSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        user = self.request.user\n        return Payment.objects.filter(\n            Q(payer=user) | Q(payee=user)\n        ).select_related('payer', 'payee', 'contract', 'payment_method')\n    @extend_schema(",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "PaymentCreateView",
        "kind": 6,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "class PaymentCreateView(generics.CreateAPIView):\n    \"\"\"إنشاء دفع جديد\"\"\"\n    serializer_class = PaymentCreateSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def perform_create(self, serializer):\n        payment = serializer.save()\n        # Here you would integrate with Stripe or other payment processor\n        # For now, we'll just set it as pending\n        payment.status = 'pending'\n        payment.save()",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "PaymentProcessView",
        "kind": 6,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "class PaymentProcessView(APIView):\n    \"\"\"معالجة الدفع\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    @extend_schema(\n        operation_id=\"process_payment\",\n        summary=\"معالجة الدفع\",\n        description=\"معالجة الدفع مع Stripe أو مقدم الدفع\",\n        tags=[\"Payments\"],\n        request=PaymentProcessSerializer,\n    )",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "payment_stats",
        "kind": 2,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "def payment_stats(request):\n    \"\"\"إحصائيات المدفوعات\"\"\"\n    user = request.user\n    # Get payments where user is involved\n    payments = Payment.objects.filter(Q(payer=user) | Q(payee=user))\n    # Calculate stats\n    total_payments = payments.count()\n    total_amount_paid = payments.filter(payer=user, status='succeeded').aggregate(\n        total=Sum('amount')\n    )['total'] or 0",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "payment_summary",
        "kind": 2,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "def payment_summary(request):\n    \"\"\"ملخص المدفوعات حسب العقد\"\"\"\n    user = request.user\n    # Get contracts where user is involved\n    from contracts.models import Contract\n    contracts = Contract.objects.filter(\n        Q(client=user) | Q(professional=user)\n    )\n    summaries = []\n    for contract in contracts:",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "payment_analytics",
        "kind": 2,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "def payment_analytics(request):\n    \"\"\"تحليلات المدفوعات\"\"\"\n    user = request.user\n    # Get date range from query params\n    days = int(request.query_params.get('days', 30))\n    start_date = timezone.now() - timedelta(days=days)\n    payments = Payment.objects.filter(\n        Q(payer=user) | Q(payee=user),\n        processed_at__gte=start_date,\n        status='succeeded'",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "set_default_payment_method",
        "kind": 2,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "def set_default_payment_method(request, method_id):\n    \"\"\"تعيين طريقة الدفع الافتراضية\"\"\"\n    try:\n        # Remove default from all user's payment methods\n        PaymentMethod.objects.filter(\n            user=request.user,\n            is_default=True\n        ).update(is_default=False)\n        # Set the new default\n        payment_method = PaymentMethod.objects.get(",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "User = get_user_model()\nclass PaymentMethodListView(generics.ListAPIView):\n    \"\"\"قائمة طرق الدفع\"\"\"\n    serializer_class = PaymentMethodSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        return PaymentMethod.objects.filter(user=self.request.user)\n    @extend_schema(\n        operation_id=\"list_payment_methods\",\n        summary=\"List Payment Methods\",",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.portfolio.migrations.0001_initial",
        "description": "server.portfolio.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='PortfolioItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "server.portfolio.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "PortfolioItemAdmin",
        "kind": 6,
        "importPath": "server.portfolio.admin",
        "description": "server.portfolio.admin",
        "peekOfCode": "class PortfolioItemAdmin(admin.ModelAdmin):\n    list_display = ['title', 'professional', 'category', 'completion_date', 'featured', 'views', 'likes']\n    list_filter = ['featured', 'category', 'completion_date', 'created_at']\n    search_fields = ['title', 'description', 'professional__username', 'category']\n    readonly_fields = ['created_at', 'updated_at']\n    autocomplete_fields = ['professional']\n    list_editable = ['featured']\n    fieldsets = [\n        ('معلومات أساسية', {\n            'fields': ('professional', 'title', 'description')",
        "detail": "server.portfolio.admin",
        "documentation": {}
    },
    {
        "label": "PortfolioImageAdmin",
        "kind": 6,
        "importPath": "server.portfolio.admin",
        "description": "server.portfolio.admin",
        "peekOfCode": "class PortfolioImageAdmin(admin.ModelAdmin):\n    list_display = ['portfolio_item', 'caption', 'is_primary', 'order', 'image_preview', 'created_at']\n    list_filter = ['is_primary', 'created_at']\n    search_fields = ['portfolio_item__title', 'caption']\n    readonly_fields = ['image_preview', 'created_at']\n    autocomplete_fields = ['portfolio_item']\n    list_editable = ['is_primary', 'order']\n    def image_preview(self, obj):\n        if obj.image:\n            return mark_safe(f'<img src=\"{obj.image.url}\" style=\"max-width: 100px; max-height: 100px;\" />')",
        "detail": "server.portfolio.admin",
        "documentation": {}
    },
    {
        "label": "PortfolioConfig",
        "kind": 6,
        "importPath": "server.portfolio.apps",
        "description": "server.portfolio.apps",
        "peekOfCode": "class PortfolioConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'portfolio'",
        "detail": "server.portfolio.apps",
        "documentation": {}
    },
    {
        "label": "PortfolioItem",
        "kind": 6,
        "importPath": "server.portfolio.models",
        "description": "server.portfolio.models",
        "peekOfCode": "class PortfolioItem(models.Model):\n    \"\"\"معرض الأعمال\"\"\"\n    professional = models.ForeignKey(User, on_delete=models.CASCADE, related_name='portfolio_items')\n    title = models.CharField(max_length=255)\n    description = models.TextField()\n    category = models.CharField(max_length=100)\n    project_duration = models.CharField(max_length=100, blank=True)\n    project_cost = models.CharField(max_length=100, blank=True)\n    completion_date = models.DateField()\n    featured = models.BooleanField(default=False)",
        "detail": "server.portfolio.models",
        "documentation": {}
    },
    {
        "label": "PortfolioImage",
        "kind": 6,
        "importPath": "server.portfolio.models",
        "description": "server.portfolio.models",
        "peekOfCode": "class PortfolioImage(models.Model):\n    \"\"\"صور المعرض\"\"\"\n    portfolio_item = models.ForeignKey(PortfolioItem, on_delete=models.CASCADE, related_name='images')\n    image = models.ImageField(upload_to='portfolio/')\n    caption = models.CharField(max_length=255, blank=True)\n    is_primary = models.BooleanField(default=False)\n    order = models.PositiveIntegerField(default=0)\n    created_at = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        db_table = 'portfolio_images'",
        "detail": "server.portfolio.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.portfolio.models",
        "description": "server.portfolio.models",
        "peekOfCode": "User = get_user_model()\nclass PortfolioItem(models.Model):\n    \"\"\"معرض الأعمال\"\"\"\n    professional = models.ForeignKey(User, on_delete=models.CASCADE, related_name='portfolio_items')\n    title = models.CharField(max_length=255)\n    description = models.TextField()\n    category = models.CharField(max_length=100)\n    project_duration = models.CharField(max_length=100, blank=True)\n    project_cost = models.CharField(max_length=100, blank=True)\n    completion_date = models.DateField()",
        "detail": "server.portfolio.models",
        "documentation": {}
    },
    {
        "label": "PortfolioImageSerializer",
        "kind": 6,
        "importPath": "server.portfolio.serializers",
        "description": "server.portfolio.serializers",
        "peekOfCode": "class PortfolioImageSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = PortfolioImage\n        fields = ['id', 'image', 'caption', 'is_primary', 'order']\nclass PortfolioItemSerializer(serializers.ModelSerializer):\n    images = PortfolioImageSerializer(many=True, read_only=True)\n    professional_info = serializers.SerializerMethodField()\n    class Meta:\n        model = PortfolioItem\n        fields = [",
        "detail": "server.portfolio.serializers",
        "documentation": {}
    },
    {
        "label": "PortfolioItemSerializer",
        "kind": 6,
        "importPath": "server.portfolio.serializers",
        "description": "server.portfolio.serializers",
        "peekOfCode": "class PortfolioItemSerializer(serializers.ModelSerializer):\n    images = PortfolioImageSerializer(many=True, read_only=True)\n    professional_info = serializers.SerializerMethodField()\n    class Meta:\n        model = PortfolioItem\n        fields = [\n            'id', 'title', 'description', 'category', 'project_duration',\n            'project_cost', 'completion_date', 'featured', 'likes',\n            'views', 'images', 'professional_info', 'created_at'\n        ]",
        "detail": "server.portfolio.serializers",
        "documentation": {}
    },
    {
        "label": "PortfolioItemCreateSerializer",
        "kind": 6,
        "importPath": "server.portfolio.serializers",
        "description": "server.portfolio.serializers",
        "peekOfCode": "class PortfolioItemCreateSerializer(serializers.ModelSerializer):\n    project_url = serializers.URLField(required=False, allow_blank=True)\n    technologies = serializers.ListField(\n        child=serializers.CharField(max_length=100),\n        required=False,\n        allow_empty=True\n    )\n    class Meta:\n        model = PortfolioItem\n        fields = [",
        "detail": "server.portfolio.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "server.portfolio.urls",
        "description": "server.portfolio.urls",
        "peekOfCode": "app_name = 'portfolio'\nurlpatterns = [\n    # Portfolio\n    path('', views.PortfolioListView.as_view(), name='portfolio_list'),\n    path('<int:pk>/', views.PortfolioDetailView.as_view(), name='portfolio_detail'),\n    path('create/', views.PortfolioCreateView.as_view(), name='portfolio_create'),\n    path('<int:pk>/update/', views.PortfolioUpdateView.as_view(), name='portfolio_update'),\n    path('<int:pk>/delete/', views.PortfolioDeleteView.as_view(), name='portfolio_delete'),\n    # Portfolio Images\n    path('<int:portfolio_id>/images/', views.PortfolioImageCreateView.as_view(), name='portfolio_image_create'),",
        "detail": "server.portfolio.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.portfolio.urls",
        "description": "server.portfolio.urls",
        "peekOfCode": "urlpatterns = [\n    # Portfolio\n    path('', views.PortfolioListView.as_view(), name='portfolio_list'),\n    path('<int:pk>/', views.PortfolioDetailView.as_view(), name='portfolio_detail'),\n    path('create/', views.PortfolioCreateView.as_view(), name='portfolio_create'),\n    path('<int:pk>/update/', views.PortfolioUpdateView.as_view(), name='portfolio_update'),\n    path('<int:pk>/delete/', views.PortfolioDeleteView.as_view(), name='portfolio_delete'),\n    # Portfolio Images\n    path('<int:portfolio_id>/images/', views.PortfolioImageCreateView.as_view(), name='portfolio_image_create'),\n    path('<int:portfolio_id>/images/<int:pk>/', views.PortfolioImageUpdateView.as_view(), name='portfolio_image_update'),",
        "detail": "server.portfolio.urls",
        "documentation": {}
    },
    {
        "label": "PortfolioListView",
        "kind": 6,
        "importPath": "server.portfolio.views",
        "description": "server.portfolio.views",
        "peekOfCode": "class PortfolioListView(generics.ListAPIView):\n    \"\"\"قائمة معرض الأعمال\"\"\"\n    serializer_class = PortfolioItemSerializer\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly]\n    filter_backends = [DjangoFilterBackend, OrderingFilter]\n    filterset_fields = ['category', 'featured']\n    ordering = ['-created_at']\n    def get_queryset(self):\n        return PortfolioItem.objects.select_related('professional')\n    @extend_schema(",
        "detail": "server.portfolio.views",
        "documentation": {}
    },
    {
        "label": "PortfolioDetailView",
        "kind": 6,
        "importPath": "server.portfolio.views",
        "description": "server.portfolio.views",
        "peekOfCode": "class PortfolioDetailView(generics.RetrieveAPIView):\n    \"\"\"تفاصيل عنصر المعرض\"\"\"\n    serializer_class = PortfolioItemSerializer\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly]\n    queryset = PortfolioItem.objects.prefetch_related('images')\n    @extend_schema(\n        operation_id=\"get_portfolio_detail\",\n        summary=\"Portfolio Item Details\", \n        description=\"Get specific portfolio item details\",\n        tags=[\"Portfolio\"],",
        "detail": "server.portfolio.views",
        "documentation": {}
    },
    {
        "label": "PortfolioCreateView",
        "kind": 6,
        "importPath": "server.portfolio.views",
        "description": "server.portfolio.views",
        "peekOfCode": "class PortfolioCreateView(generics.CreateAPIView):\n    \"\"\"إنشاء عنصر معرض جديد\"\"\"\n    serializer_class = PortfolioItemCreateSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    @extend_schema(\n        operation_id=\"create_portfolio_item\",\n        summary=\"Create New Portfolio Item\",\n        description=\"Create new portfolio item\",\n        tags=[\"Portfolio\"],\n    )",
        "detail": "server.portfolio.views",
        "documentation": {}
    },
    {
        "label": "PortfolioUpdateView",
        "kind": 6,
        "importPath": "server.portfolio.views",
        "description": "server.portfolio.views",
        "peekOfCode": "class PortfolioUpdateView(generics.UpdateAPIView):\n    \"\"\"تحديث عنصر المعرض\"\"\"\n    serializer_class = PortfolioItemCreateSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        return PortfolioItem.objects.filter(professional=self.request.user)\n    @extend_schema(\n        operation_id=\"update_portfolio_item\",\n        summary=\"Update Portfolio Item\",\n        description=\"Update existing portfolio item\",",
        "detail": "server.portfolio.views",
        "documentation": {}
    },
    {
        "label": "PortfolioDeleteView",
        "kind": 6,
        "importPath": "server.portfolio.views",
        "description": "server.portfolio.views",
        "peekOfCode": "class PortfolioDeleteView(generics.DestroyAPIView):\n    \"\"\"حذف عنصر المعرض\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        return PortfolioItem.objects.filter(professional=self.request.user)\n    @extend_schema(\n        operation_id=\"delete_portfolio_item\",\n        summary=\"Delete Portfolio Item\",\n        description=\"Delete existing portfolio item\",\n        tags=[\"Portfolio\"],",
        "detail": "server.portfolio.views",
        "documentation": {}
    },
    {
        "label": "MyPortfolioView",
        "kind": 6,
        "importPath": "server.portfolio.views",
        "description": "server.portfolio.views",
        "peekOfCode": "class MyPortfolioView(generics.ListAPIView):\n    \"\"\"معرض أعمالي\"\"\"\n    serializer_class = PortfolioItemSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        return PortfolioItem.objects.filter(\n            professional=self.request.user\n        ).prefetch_related('images')\n    @extend_schema(\n        operation_id=\"get_my_portfolio\",",
        "detail": "server.portfolio.views",
        "documentation": {}
    },
    {
        "label": "PortfolioImageCreateView",
        "kind": 6,
        "importPath": "server.portfolio.views",
        "description": "server.portfolio.views",
        "peekOfCode": "class PortfolioImageCreateView(generics.CreateAPIView):\n    \"\"\"رفع صورة للمعرض\"\"\"\n    serializer_class = PortfolioImageSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def perform_create(self, serializer):\n        portfolio_id = self.kwargs.get('portfolio_id')\n        portfolio_item = PortfolioItem.objects.get(\n            id=portfolio_id,\n            professional=self.request.user\n        )",
        "detail": "server.portfolio.views",
        "documentation": {}
    },
    {
        "label": "PortfolioImageUpdateView",
        "kind": 6,
        "importPath": "server.portfolio.views",
        "description": "server.portfolio.views",
        "peekOfCode": "class PortfolioImageUpdateView(generics.UpdateAPIView):\n    \"\"\"تحديث صورة المعرض\"\"\"\n    serializer_class = PortfolioImageSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        portfolio_id = self.kwargs.get('portfolio_id')\n        return PortfolioImage.objects.filter(\n            portfolio_item_id=portfolio_id,\n            portfolio_item__professional=self.request.user\n        )",
        "detail": "server.portfolio.views",
        "documentation": {}
    },
    {
        "label": "PortfolioImageDeleteView",
        "kind": 6,
        "importPath": "server.portfolio.views",
        "description": "server.portfolio.views",
        "peekOfCode": "class PortfolioImageDeleteView(generics.DestroyAPIView):\n    \"\"\"حذف صورة المعرض\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        portfolio_id = self.kwargs.get('portfolio_id')\n        return PortfolioImage.objects.filter(\n            portfolio_item_id=portfolio_id,\n            portfolio_item__professional=self.request.user\n        )\n    @extend_schema(",
        "detail": "server.portfolio.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "server.projects.management.commands.create_categories",
        "description": "server.projects.management.commands.create_categories",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Create default project categories'\n    def handle(self, *args, **options):\n        categories_data = [\n            {\n                'name': 'Kitchen Remodeling',\n                'description': 'Complete kitchen renovations and upgrades',\n                'icon': 'fas fa-utensils',\n                'order': 1\n            },",
        "detail": "server.projects.management.commands.create_categories",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.projects.migrations.0001_initial",
        "description": "server.projects.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "server.projects.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.projects.migrations.0002_project_additional_requirements",
        "description": "server.projects.migrations.0002_project_additional_requirements",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('projects', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='project',\n            name='additional_requirements',\n            field=models.TextField(blank=True, help_text='Additional requirements and special instructions'),\n        ),",
        "detail": "server.projects.migrations.0002_project_additional_requirements",
        "documentation": {}
    },
    {
        "label": "CategoryAdmin",
        "kind": 6,
        "importPath": "server.projects.admin",
        "description": "server.projects.admin",
        "peekOfCode": "class CategoryAdmin(admin.ModelAdmin):\n    list_display = ['name', 'slug', 'is_active', 'order', 'projects_count']\n    list_filter = ['is_active', 'created_at']\n    search_fields = ['name', 'description']\n    prepopulated_fields = {'slug': ('name',)}\n    readonly_fields = ['created_at', 'updated_at']\n    def projects_count(self, obj):\n        return obj.projects.count()\n    projects_count.short_description = \"Projects Count\"\n@admin.register(Project)",
        "detail": "server.projects.admin",
        "documentation": {}
    },
    {
        "label": "ProjectAdmin",
        "kind": 6,
        "importPath": "server.projects.admin",
        "description": "server.projects.admin",
        "peekOfCode": "class ProjectAdmin(admin.ModelAdmin):\n    list_display = [\n        'title', 'client', 'category', 'status', 'urgency', \n        'budget_display', 'views_count', 'progress_bar', 'created_at'\n    ]\n    list_filter = ['status', 'urgency', 'category', 'is_featured', 'budget_type', 'created_at']\n    search_fields = ['title', 'description', 'client__username', 'location']\n    readonly_fields = ['slug', 'views_count', 'favorites_count', 'proposals_count', 'created_at', 'updated_at', 'published_at']\n    autocomplete_fields = ['client', 'category', 'assigned_professional']\n    fieldsets = [",
        "detail": "server.projects.admin",
        "documentation": {}
    },
    {
        "label": "ProjectImageAdmin",
        "kind": 6,
        "importPath": "server.projects.admin",
        "description": "server.projects.admin",
        "peekOfCode": "class ProjectImageAdmin(admin.ModelAdmin):\n    list_display = ['project', 'caption', 'is_primary', 'order', 'image_preview']\n    list_filter = ['is_primary', 'created_at']\n    search_fields = ['project__title', 'caption']\n    autocomplete_fields = ['project']\n    readonly_fields = ['image_preview', 'created_at']\n    def image_preview(self, obj):\n        if obj.image:\n            return mark_safe(f'<img src=\"{obj.image.url}\" style=\"max-width: 100px; max-height: 100px;\" />')\n        return \"No Image\"",
        "detail": "server.projects.admin",
        "documentation": {}
    },
    {
        "label": "ProjectFileAdmin",
        "kind": 6,
        "importPath": "server.projects.admin",
        "description": "server.projects.admin",
        "peekOfCode": "class ProjectFileAdmin(admin.ModelAdmin):\n    list_display = ['filename', 'project', 'file_type', 'file_size_display', 'created_at']\n    list_filter = ['file_type', 'created_at']\n    search_fields = ['filename', 'project__title']\n    autocomplete_fields = ['project']\n    readonly_fields = ['file_size_display', 'created_at']\n    def file_size_display(self, obj):\n        return obj.get_file_size_display()\n    file_size_display.short_description = \"File Size\"\n@admin.register(ProjectFavorite)",
        "detail": "server.projects.admin",
        "documentation": {}
    },
    {
        "label": "ProjectFavoriteAdmin",
        "kind": 6,
        "importPath": "server.projects.admin",
        "description": "server.projects.admin",
        "peekOfCode": "class ProjectFavoriteAdmin(admin.ModelAdmin):\n    list_display = ['user', 'project', 'created_at']\n    list_filter = ['created_at']\n    search_fields = ['user__username', 'project__title']\n    autocomplete_fields = ['user', 'project']\n@admin.register(ProjectView)\nclass ProjectViewAdmin(admin.ModelAdmin):\n    list_display = ['project', 'user', 'ip_address', 'created_at']\n    list_filter = ['created_at']\n    search_fields = ['project__title', 'user__username', 'ip_address']",
        "detail": "server.projects.admin",
        "documentation": {}
    },
    {
        "label": "ProjectViewAdmin",
        "kind": 6,
        "importPath": "server.projects.admin",
        "description": "server.projects.admin",
        "peekOfCode": "class ProjectViewAdmin(admin.ModelAdmin):\n    list_display = ['project', 'user', 'ip_address', 'created_at']\n    list_filter = ['created_at']\n    search_fields = ['project__title', 'user__username', 'ip_address']\n    readonly_fields = ['created_at']\n    autocomplete_fields = ['project', 'user']\n@admin.register(ProjectUpdate)\nclass ProjectUpdateAdmin(admin.ModelAdmin):\n    list_display = ['title', 'project', 'user', 'update_type', 'created_at']\n    list_filter = ['update_type', 'created_at']",
        "detail": "server.projects.admin",
        "documentation": {}
    },
    {
        "label": "ProjectUpdateAdmin",
        "kind": 6,
        "importPath": "server.projects.admin",
        "description": "server.projects.admin",
        "peekOfCode": "class ProjectUpdateAdmin(admin.ModelAdmin):\n    list_display = ['title', 'project', 'user', 'update_type', 'created_at']\n    list_filter = ['update_type', 'created_at']\n    search_fields = ['title', 'project__title', 'user__username']\n    readonly_fields = ['created_at']\n    autocomplete_fields = ['project', 'user']\n    fieldsets = [\n        ('معلومات التحديث', {\n            'fields': ('project', 'user', 'update_type', 'title', 'description')\n        }),",
        "detail": "server.projects.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.site_header",
        "kind": 5,
        "importPath": "server.projects.admin",
        "description": "server.projects.admin",
        "peekOfCode": "admin.site.site_header = 'A-List Projects Admin'\nadmin.site.site_title = 'Projects Management'\nadmin.site.index_title = 'إدارة المشاريع'",
        "detail": "server.projects.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.site_title",
        "kind": 5,
        "importPath": "server.projects.admin",
        "description": "server.projects.admin",
        "peekOfCode": "admin.site.site_title = 'Projects Management'\nadmin.site.index_title = 'إدارة المشاريع'",
        "detail": "server.projects.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.index_title",
        "kind": 5,
        "importPath": "server.projects.admin",
        "description": "server.projects.admin",
        "peekOfCode": "admin.site.index_title = 'إدارة المشاريع'",
        "detail": "server.projects.admin",
        "documentation": {}
    },
    {
        "label": "ProjectsConfig",
        "kind": 6,
        "importPath": "server.projects.apps",
        "description": "server.projects.apps",
        "peekOfCode": "class ProjectsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'projects'\n    verbose_name = 'Projects'",
        "detail": "server.projects.apps",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "server.projects.models",
        "description": "server.projects.models",
        "peekOfCode": "class Category(models.Model):\n    \"\"\"\n    تصنيفات المشاريع\n    \"\"\"\n    name = models.CharField(max_length=255, unique=True)\n    slug = models.SlugField(unique=True)\n    description = models.TextField(blank=True)\n    icon = models.CharField(max_length=100, blank=True, help_text='CSS class for icon')\n    is_active = models.BooleanField(default=True)\n    order = models.PositiveIntegerField(default=0)",
        "detail": "server.projects.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "kind": 6,
        "importPath": "server.projects.models",
        "description": "server.projects.models",
        "peekOfCode": "class Project(models.Model):\n    \"\"\"\n    نموذج المشاريع\n    \"\"\"\n    STATUS_CHOICES = [\n        ('draft', 'Draft'),\n        ('published', 'Published'),\n        ('in_progress', 'In Progress'),\n        ('completed', 'Completed'),\n        ('cancelled', 'Cancelled'),",
        "detail": "server.projects.models",
        "documentation": {}
    },
    {
        "label": "ProjectImage",
        "kind": 6,
        "importPath": "server.projects.models",
        "description": "server.projects.models",
        "peekOfCode": "class ProjectImage(models.Model):\n    \"\"\"\n    صور المشاريع\n    \"\"\"\n    project = models.ForeignKey(\n        Project,\n        on_delete=models.CASCADE,\n        related_name='images'\n    )\n    image = models.ImageField(upload_to='projects/')",
        "detail": "server.projects.models",
        "documentation": {}
    },
    {
        "label": "ProjectFile",
        "kind": 6,
        "importPath": "server.projects.models",
        "description": "server.projects.models",
        "peekOfCode": "class ProjectFile(models.Model):\n    \"\"\"\n    ملفات المشاريع\n    \"\"\"\n    FILE_TYPE_CHOICES = [\n        ('document', 'Document'),\n        ('image', 'Image'),\n        ('video', 'Video'),\n        ('audio', 'Audio'),\n        ('other', 'Other'),",
        "detail": "server.projects.models",
        "documentation": {}
    },
    {
        "label": "ProjectFavorite",
        "kind": 6,
        "importPath": "server.projects.models",
        "description": "server.projects.models",
        "peekOfCode": "class ProjectFavorite(models.Model):\n    \"\"\"\n    المشاريع المفضلة\n    \"\"\"\n    user = models.ForeignKey(\n        User,\n        on_delete=models.CASCADE,\n        related_name='favorite_projects'\n    )\n    project = models.ForeignKey(",
        "detail": "server.projects.models",
        "documentation": {}
    },
    {
        "label": "ProjectView",
        "kind": 6,
        "importPath": "server.projects.models",
        "description": "server.projects.models",
        "peekOfCode": "class ProjectView(models.Model):\n    \"\"\"\n    مشاهدات المشاريع\n    \"\"\"\n    project = models.ForeignKey(\n        Project,\n        on_delete=models.CASCADE,\n        related_name='project_views'\n    )\n    user = models.ForeignKey(",
        "detail": "server.projects.models",
        "documentation": {}
    },
    {
        "label": "ProjectUpdate",
        "kind": 6,
        "importPath": "server.projects.models",
        "description": "server.projects.models",
        "peekOfCode": "class ProjectUpdate(models.Model):\n    \"\"\"\n    تحديثات المشاريع\n    \"\"\"\n    UPDATE_TYPE_CHOICES = [\n        ('status', 'Status Change'),\n        ('progress', 'Progress Update'),\n        ('milestone', 'Milestone'),\n        ('general', 'General Update'),\n    ]",
        "detail": "server.projects.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.projects.models",
        "description": "server.projects.models",
        "peekOfCode": "User = get_user_model()\nclass Category(models.Model):\n    \"\"\"\n    تصنيفات المشاريع\n    \"\"\"\n    name = models.CharField(max_length=255, unique=True)\n    slug = models.SlugField(unique=True)\n    description = models.TextField(blank=True)\n    icon = models.CharField(max_length=100, blank=True, help_text='CSS class for icon')\n    is_active = models.BooleanField(default=True)",
        "detail": "server.projects.models",
        "documentation": {}
    },
    {
        "label": "CategorySerializer",
        "kind": 6,
        "importPath": "server.projects.serializers",
        "description": "server.projects.serializers",
        "peekOfCode": "class CategorySerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لتصنيفات المشاريع\"\"\"\n    projects_count = serializers.SerializerMethodField()\n    class Meta:\n        model = Category\n        fields = [\n            'id', 'name', 'slug', 'description', 'icon', \n            'is_active', 'order', 'projects_count', 'created_at', 'updated_at'\n        ]\n        read_only_fields = ['id', 'created_at', 'updated_at']",
        "detail": "server.projects.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectImageSerializer",
        "kind": 6,
        "importPath": "server.projects.serializers",
        "description": "server.projects.serializers",
        "peekOfCode": "class ProjectImageSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لصور المشاريع\"\"\"\n    class Meta:\n        model = ProjectImage\n        fields = [\n            'id', 'project', 'image', 'caption', \n            'is_primary', 'order', 'created_at'\n        ]\n        read_only_fields = ['id', 'created_at']\nclass ProjectFileSerializer(serializers.ModelSerializer):",
        "detail": "server.projects.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectFileSerializer",
        "kind": 6,
        "importPath": "server.projects.serializers",
        "description": "server.projects.serializers",
        "peekOfCode": "class ProjectFileSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لملفات المشاريع\"\"\"\n    file_size_display = serializers.SerializerMethodField()\n    class Meta:\n        model = ProjectFile\n        fields = [\n            'id', 'project', 'file', 'filename', 'file_type', \n            'file_size', 'file_size_display', 'description', 'created_at'\n        ]\n        read_only_fields = ['id', 'filename', 'file_size', 'created_at']",
        "detail": "server.projects.serializers",
        "documentation": {}
    },
    {
        "label": "UserBasicSerializer",
        "kind": 6,
        "importPath": "server.projects.serializers",
        "description": "server.projects.serializers",
        "peekOfCode": "class UserBasicSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer أساسي لبيانات المستخدم\"\"\"\n    class Meta:\n        model = User\n        fields = [\n            'id', 'username', 'first_name', 'last_name', \n            'avatar', 'rating_average', 'rating_count', \n            'projects_completed', 'is_verified'\n        ]\nclass ProjectListSerializer(serializers.ModelSerializer):",
        "detail": "server.projects.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectListSerializer",
        "kind": 6,
        "importPath": "server.projects.serializers",
        "description": "server.projects.serializers",
        "peekOfCode": "class ProjectListSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لقائمة المشاريع\"\"\"\n    client = UserBasicSerializer(read_only=True)\n    category = CategorySerializer(read_only=True)\n    budget_display = serializers.SerializerMethodField()\n    class Meta:\n        model = Project\n        fields = [\n            'id', 'title', 'slug', 'description', 'client', 'category',\n            'location', 'budget_display', 'timeline', 'status', 'urgency',",
        "detail": "server.projects.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectDetailSerializer",
        "kind": 6,
        "importPath": "server.projects.serializers",
        "description": "server.projects.serializers",
        "peekOfCode": "class ProjectDetailSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer تفصيلي للمشاريع\"\"\"\n    client = UserBasicSerializer(read_only=True)\n    category = CategorySerializer(read_only=True)\n    assigned_professional = UserBasicSerializer(read_only=True)\n    images = ProjectImageSerializer(many=True, read_only=True)\n    files = ProjectFileSerializer(many=True, read_only=True)\n    budget_display = serializers.SerializerMethodField()\n    is_favorited = serializers.SerializerMethodField()\n    class Meta:",
        "detail": "server.projects.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectCreateSerializer",
        "kind": 6,
        "importPath": "server.projects.serializers",
        "description": "server.projects.serializers",
        "peekOfCode": "class ProjectCreateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لإنشاء المشاريع\"\"\"\n    image_ids = serializers.ListField(\n        child=serializers.IntegerField(allow_null=False),\n        required=False,\n        allow_empty=True,\n        write_only=True,\n        help_text=\"List of uploaded file IDs to associate with this project\"\n    )\n    class Meta:",
        "detail": "server.projects.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectUpdateSerializer",
        "kind": 6,
        "importPath": "server.projects.serializers",
        "description": "server.projects.serializers",
        "peekOfCode": "class ProjectUpdateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لتحديث المشاريع\"\"\"\n    class Meta:\n        model = Project\n        fields = [\n            'title', 'description', 'category', 'location', \n            'budget_type', 'budget_min', 'budget_max', 'budget_display',\n            'timeline', 'start_date', 'end_date', 'required_skills',\n            'required_roles', 'urgency', 'is_remote_allowed',\n            'requires_license', 'requires_insurance', 'status'",
        "detail": "server.projects.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectFavoriteSerializer",
        "kind": 6,
        "importPath": "server.projects.serializers",
        "description": "server.projects.serializers",
        "peekOfCode": "class ProjectFavoriteSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لمفضلة المشاريع\"\"\"\n    project = ProjectListSerializer(read_only=True)\n    class Meta:\n        model = ProjectFavorite\n        fields = ['id', 'project', 'created_at']\n        read_only_fields = ['id', 'created_at']\nclass ProjectUpdateHistorySerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لتاريخ تحديثات المشاريع\"\"\"\n    user = UserBasicSerializer(read_only=True)",
        "detail": "server.projects.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectUpdateHistorySerializer",
        "kind": 6,
        "importPath": "server.projects.serializers",
        "description": "server.projects.serializers",
        "peekOfCode": "class ProjectUpdateHistorySerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لتاريخ تحديثات المشاريع\"\"\"\n    user = UserBasicSerializer(read_only=True)\n    class Meta:\n        model = ProjectUpdate\n        fields = [\n            'id', 'project', 'user', 'update_type', 'title', \n            'description', 'previous_status', 'new_status',\n            'previous_completion', 'new_completion', 'created_at'\n        ]",
        "detail": "server.projects.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectStatsSerializer",
        "kind": 6,
        "importPath": "server.projects.serializers",
        "description": "server.projects.serializers",
        "peekOfCode": "class ProjectStatsSerializer(serializers.Serializer):\n    \"\"\"Serializer لإحصائيات المشاريع\"\"\"\n    total_projects = serializers.IntegerField()\n    published_projects = serializers.IntegerField()\n    in_progress_projects = serializers.IntegerField()\n    completed_projects = serializers.IntegerField()\n    cancelled_projects = serializers.IntegerField()\n    total_budget = serializers.DecimalField(max_digits=15, decimal_places=2)\n    average_budget = serializers.DecimalField(max_digits=10, decimal_places=2)\n    total_views = serializers.IntegerField()",
        "detail": "server.projects.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectSearchSerializer",
        "kind": 6,
        "importPath": "server.projects.serializers",
        "description": "server.projects.serializers",
        "peekOfCode": "class ProjectSearchSerializer(serializers.Serializer):\n    \"\"\"Serializer للبحث في المشاريع\"\"\"\n    query = serializers.CharField(required=False)\n    category = serializers.CharField(required=False)\n    location = serializers.CharField(required=False)\n    budget_min = serializers.DecimalField(max_digits=10, decimal_places=2, required=False)\n    budget_max = serializers.DecimalField(max_digits=10, decimal_places=2, required=False)\n    status = serializers.CharField(required=False)\n    urgency = serializers.CharField(required=False)\n    is_remote_allowed = serializers.BooleanField(required=False)",
        "detail": "server.projects.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.projects.serializers",
        "description": "server.projects.serializers",
        "peekOfCode": "User = get_user_model()\nclass CategorySerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لتصنيفات المشاريع\"\"\"\n    projects_count = serializers.SerializerMethodField()\n    class Meta:\n        model = Category\n        fields = [\n            'id', 'name', 'slug', 'description', 'icon', \n            'is_active', 'order', 'projects_count', 'created_at', 'updated_at'\n        ]",
        "detail": "server.projects.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "server.projects.urls",
        "description": "server.projects.urls",
        "peekOfCode": "app_name = 'projects'\nurlpatterns = [\n    # Project management\n    path('', views.ProjectListView.as_view(), name='project_list'),\n    path('create/', views.ProjectCreateView.as_view(), name='project_create'),\n    path('my/', views.MyProjectsView.as_view(), name='my_projects'),\n    path('search/', views.project_search, name='project_search'),\n    path('stats/', views.project_stats, name='project_stats'),\n    # Categories (يجب أن يكون قبل slug pattern)\n    path('categories/', views.CategoryListView.as_view(), name='category_list'),",
        "detail": "server.projects.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.projects.urls",
        "description": "server.projects.urls",
        "peekOfCode": "urlpatterns = [\n    # Project management\n    path('', views.ProjectListView.as_view(), name='project_list'),\n    path('create/', views.ProjectCreateView.as_view(), name='project_create'),\n    path('my/', views.MyProjectsView.as_view(), name='my_projects'),\n    path('search/', views.project_search, name='project_search'),\n    path('stats/', views.project_stats, name='project_stats'),\n    # Categories (يجب أن يكون قبل slug pattern)\n    path('categories/', views.CategoryListView.as_view(), name='category_list'),\n    # Project details and actions (يجب أن يكون قبل slug pattern)",
        "detail": "server.projects.urls",
        "documentation": {}
    },
    {
        "label": "ProjectListView",
        "kind": 6,
        "importPath": "server.projects.views",
        "description": "server.projects.views",
        "peekOfCode": "class ProjectListView(generics.ListAPIView):\n    \"\"\"قائمة المشاريع مع فلترة وبحث\"\"\"\n    serializer_class = ProjectListSerializer\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    search_fields = ['title', 'description', 'location']\n    ordering_fields = ['created_at', 'published_at', 'budget_min', 'budget_max']\n    ordering = ['-published_at']\n    def get_queryset(self):\n        \"\"\"Get filtered queryset\"\"\"",
        "detail": "server.projects.views",
        "documentation": {}
    },
    {
        "label": "ProjectDetailView",
        "kind": 6,
        "importPath": "server.projects.views",
        "description": "server.projects.views",
        "peekOfCode": "class ProjectDetailView(generics.RetrieveAPIView):\n    \"\"\"تفاصيل المشروع\"\"\"\n    serializer_class = ProjectDetailSerializer\n    permission_classes = [permissions.AllowAny]  # Allow anyone to view project details\n    lookup_field = 'slug'\n    def get_queryset(self):\n        # Allow access to all projects including drafts\n        return Project.objects.all().select_related('client', 'category')\nclass CategoryListView(generics.ListAPIView):\n    \"\"\"قائمة تصنيفات المشاريع\"\"\"",
        "detail": "server.projects.views",
        "documentation": {}
    },
    {
        "label": "CategoryListView",
        "kind": 6,
        "importPath": "server.projects.views",
        "description": "server.projects.views",
        "peekOfCode": "class CategoryListView(generics.ListAPIView):\n    \"\"\"قائمة تصنيفات المشاريع\"\"\"\n    serializer_class = CategorySerializer\n    permission_classes = [permissions.AllowAny]\n    def get_queryset(self):\n        return Category.objects.filter(is_active=True).order_by('order', 'name')\n@api_view(['GET'])\n@permission_classes([permissions.IsAuthenticatedOrReadOnly])\n@extend_schema(\n    operation_id=\"get_project_stats\",",
        "detail": "server.projects.views",
        "documentation": {}
    },
    {
        "label": "ProjectCreateView",
        "kind": 6,
        "importPath": "server.projects.views",
        "description": "server.projects.views",
        "peekOfCode": "class ProjectCreateView(generics.CreateAPIView):\n    \"\"\"إنشاء مشروع جديد\"\"\"\n    serializer_class = ProjectCreateSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def perform_create(self, serializer):\n        # Set the client to the current user\n        serializer.save(client=self.request.user)\n    def create(self, request, *args, **kwargs):\n        # Validate user is a client\n        if request.user.user_type != 'client':",
        "detail": "server.projects.views",
        "documentation": {}
    },
    {
        "label": "MyProjectsView",
        "kind": 6,
        "importPath": "server.projects.views",
        "description": "server.projects.views",
        "peekOfCode": "class MyProjectsView(generics.ListAPIView):\n    \"\"\"عرض مشاريع المستخدم الحالي\"\"\"\n    serializer_class = ProjectListSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    search_fields = ['title', 'description', 'location']\n    ordering_fields = ['created_at', 'published_at', 'deadline', 'budget_min', 'budget_max']\n    ordering = ['-created_at']\n    def get_queryset(self):\n        \"\"\"إرجاع مشاريع المستخدم الحالي فقط\"\"\"",
        "detail": "server.projects.views",
        "documentation": {}
    },
    {
        "label": "ProjectImageViewSet",
        "kind": 6,
        "importPath": "server.projects.views",
        "description": "server.projects.views",
        "peekOfCode": "class ProjectImageViewSet(ModelViewSet):\n    \"\"\"ViewSet لصور المشاريع\"\"\"\n    serializer_class = ProjectImageSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        slug = self.kwargs.get('slug')\n        return ProjectImage.objects.filter(project__slug=slug)\n    def perform_create(self, serializer):\n        slug = self.kwargs.get('slug')\n        project = Project.objects.get(slug=slug)",
        "detail": "server.projects.views",
        "documentation": {}
    },
    {
        "label": "ProjectFileViewSet",
        "kind": 6,
        "importPath": "server.projects.views",
        "description": "server.projects.views",
        "peekOfCode": "class ProjectFileViewSet(ModelViewSet):\n    \"\"\"ViewSet لملفات المشاريع\"\"\"\n    serializer_class = ProjectFileSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        slug = self.kwargs.get('slug')\n        return ProjectFile.objects.filter(project__slug=slug)\n    def perform_create(self, serializer):\n        slug = self.kwargs.get('slug')\n        project = Project.objects.get(slug=slug)",
        "detail": "server.projects.views",
        "documentation": {}
    },
    {
        "label": "project_stats",
        "kind": 2,
        "importPath": "server.projects.views",
        "description": "server.projects.views",
        "peekOfCode": "def project_stats(request):\n    \"\"\"Get project statistics\"\"\"\n    # Basic stats\n    total_projects = Project.objects.filter(status__in=['published', 'in_progress']).count()\n    active_projects = Project.objects.filter(status='published').count()\n    # Budget stats\n    budget_stats = Project.objects.filter(\n        status__in=['published', 'in_progress'],\n        budget_min__isnull=False\n    ).aggregate(",
        "detail": "server.projects.views",
        "documentation": {}
    },
    {
        "label": "project_search",
        "kind": 2,
        "importPath": "server.projects.views",
        "description": "server.projects.views",
        "peekOfCode": "def project_search(request):\n    \"\"\"Search projects with suggestions\"\"\"\n    query = request.data.get('q', '').strip()\n    if not query:\n        return Response({\n            'results': [],\n            'suggestions': []\n        })\n    # Search projects\n    projects = Project.objects.filter(",
        "detail": "server.projects.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.projects.views",
        "description": "server.projects.views",
        "peekOfCode": "User = get_user_model()\nclass ProjectListView(generics.ListAPIView):\n    \"\"\"قائمة المشاريع مع فلترة وبحث\"\"\"\n    serializer_class = ProjectListSerializer\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    search_fields = ['title', 'description', 'location']\n    ordering_fields = ['created_at', 'published_at', 'budget_min', 'budget_max']\n    ordering = ['-published_at']\n    def get_queryset(self):",
        "detail": "server.projects.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.proposals.migrations.0001_initial",
        "description": "server.proposals.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('projects', '0002_project_additional_requirements'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Proposal',\n            fields=[",
        "detail": "server.proposals.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.proposals.migrations.0002_alter_proposal_options_and_more",
        "description": "server.proposals.migrations.0002_alter_proposal_options_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('projects', '0002_project_additional_requirements'),\n        ('proposals', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='proposal',\n            options={'ordering': ['-created_at'], 'verbose_name': 'Proposal', 'verbose_name_plural': 'Proposals'},",
        "detail": "server.proposals.migrations.0002_alter_proposal_options_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.proposals.migrations.0003_proposal_contract",
        "description": "server.proposals.migrations.0003_proposal_contract",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('contracts', '0003_contractpayment'),\n        ('proposals', '0002_alter_proposal_options_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='proposal',\n            name='contract',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='proposal', to='contracts.contract', verbose_name='Contract'),",
        "detail": "server.proposals.migrations.0003_proposal_contract",
        "documentation": {}
    },
    {
        "label": "ProposalAdmin",
        "kind": 6,
        "importPath": "server.proposals.admin",
        "description": "server.proposals.admin",
        "peekOfCode": "class ProposalAdmin(admin.ModelAdmin):\n    list_display = [\n        'get_professional_name',\n        'get_project_title', \n        'get_amount',\n        'status',\n        'priority',\n        'timeline',\n        'created_at',\n    ]",
        "detail": "server.proposals.admin",
        "documentation": {}
    },
    {
        "label": "ProposalMilestoneAdmin",
        "kind": 6,
        "importPath": "server.proposals.admin",
        "description": "server.proposals.admin",
        "peekOfCode": "class ProposalMilestoneAdmin(admin.ModelAdmin):\n    list_display = ['title', 'amount', 'timeline', 'order']\n    ordering = ['proposal', 'order']\n@admin.register(ProposalAttachment)\nclass ProposalAttachmentAdmin(admin.ModelAdmin):\n    list_display = ['name', 'file_type', 'created_at']\n    list_filter = ['file_type']\n@admin.register(ProposalView)\nclass ProposalViewAdmin(admin.ModelAdmin):\n    list_display = ['proposal', 'viewer', 'viewed_at']",
        "detail": "server.proposals.admin",
        "documentation": {}
    },
    {
        "label": "ProposalAttachmentAdmin",
        "kind": 6,
        "importPath": "server.proposals.admin",
        "description": "server.proposals.admin",
        "peekOfCode": "class ProposalAttachmentAdmin(admin.ModelAdmin):\n    list_display = ['name', 'file_type', 'created_at']\n    list_filter = ['file_type']\n@admin.register(ProposalView)\nclass ProposalViewAdmin(admin.ModelAdmin):\n    list_display = ['proposal', 'viewer', 'viewed_at']\n    list_filter = ['viewed_at']",
        "detail": "server.proposals.admin",
        "documentation": {}
    },
    {
        "label": "ProposalViewAdmin",
        "kind": 6,
        "importPath": "server.proposals.admin",
        "description": "server.proposals.admin",
        "peekOfCode": "class ProposalViewAdmin(admin.ModelAdmin):\n    list_display = ['proposal', 'viewer', 'viewed_at']\n    list_filter = ['viewed_at']",
        "detail": "server.proposals.admin",
        "documentation": {}
    },
    {
        "label": "ProposalAdmin",
        "kind": 6,
        "importPath": "server.proposals.admin_simple",
        "description": "server.proposals.admin_simple",
        "peekOfCode": "class ProposalAdmin(admin.ModelAdmin):\n    list_display = [\n        'professional_name',\n        'project_title', \n        'amount_simple',\n        'status',\n        'priority',\n        'timeline',\n        'created_at',\n    ]",
        "detail": "server.proposals.admin_simple",
        "documentation": {}
    },
    {
        "label": "ProposalMilestoneAdmin",
        "kind": 6,
        "importPath": "server.proposals.admin_simple",
        "description": "server.proposals.admin_simple",
        "peekOfCode": "class ProposalMilestoneAdmin(admin.ModelAdmin):\n    list_display = ['title', 'amount', 'timeline', 'order', 'created_at']\n    list_filter = ['created_at']\n    search_fields = ['title', 'description']\n    ordering = ['proposal', 'order']\n@admin.register(ProposalAttachment)\nclass ProposalAttachmentAdmin(admin.ModelAdmin):\n    list_display = ['name', 'file_type', 'created_at']\n    list_filter = ['file_type', 'created_at']\n    search_fields = ['name', 'description']",
        "detail": "server.proposals.admin_simple",
        "documentation": {}
    },
    {
        "label": "ProposalAttachmentAdmin",
        "kind": 6,
        "importPath": "server.proposals.admin_simple",
        "description": "server.proposals.admin_simple",
        "peekOfCode": "class ProposalAttachmentAdmin(admin.ModelAdmin):\n    list_display = ['name', 'file_type', 'created_at']\n    list_filter = ['file_type', 'created_at']\n    search_fields = ['name', 'description']\n@admin.register(ProposalView)\nclass ProposalViewAdmin(admin.ModelAdmin):\n    list_display = ['proposal', 'viewer', 'viewed_at', 'ip_address']\n    list_filter = ['viewed_at']\n    date_hierarchy = 'viewed_at'\n# Set admin site headers",
        "detail": "server.proposals.admin_simple",
        "documentation": {}
    },
    {
        "label": "ProposalViewAdmin",
        "kind": 6,
        "importPath": "server.proposals.admin_simple",
        "description": "server.proposals.admin_simple",
        "peekOfCode": "class ProposalViewAdmin(admin.ModelAdmin):\n    list_display = ['proposal', 'viewer', 'viewed_at', 'ip_address']\n    list_filter = ['viewed_at']\n    date_hierarchy = 'viewed_at'\n# Set admin site headers\nadmin.site.site_header = 'A-List Home Professionals Admin'\nadmin.site.site_title = 'A-List Admin'\nadmin.site.index_title = 'Platform Administration'",
        "detail": "server.proposals.admin_simple",
        "documentation": {}
    },
    {
        "label": "admin.site.site_header",
        "kind": 5,
        "importPath": "server.proposals.admin_simple",
        "description": "server.proposals.admin_simple",
        "peekOfCode": "admin.site.site_header = 'A-List Home Professionals Admin'\nadmin.site.site_title = 'A-List Admin'\nadmin.site.index_title = 'Platform Administration'",
        "detail": "server.proposals.admin_simple",
        "documentation": {}
    },
    {
        "label": "admin.site.site_title",
        "kind": 5,
        "importPath": "server.proposals.admin_simple",
        "description": "server.proposals.admin_simple",
        "peekOfCode": "admin.site.site_title = 'A-List Admin'\nadmin.site.index_title = 'Platform Administration'",
        "detail": "server.proposals.admin_simple",
        "documentation": {}
    },
    {
        "label": "admin.site.index_title",
        "kind": 5,
        "importPath": "server.proposals.admin_simple",
        "description": "server.proposals.admin_simple",
        "peekOfCode": "admin.site.index_title = 'Platform Administration'",
        "detail": "server.proposals.admin_simple",
        "documentation": {}
    },
    {
        "label": "ProposalsConfig",
        "kind": 6,
        "importPath": "server.proposals.apps",
        "description": "server.proposals.apps",
        "peekOfCode": "class ProposalsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'proposals'\n    verbose_name = 'العروض والمقترحات'",
        "detail": "server.proposals.apps",
        "documentation": {}
    },
    {
        "label": "ProposalFilter",
        "kind": 6,
        "importPath": "server.proposals.filters",
        "description": "server.proposals.filters",
        "peekOfCode": "class ProposalFilter(django_filters.FilterSet):\n    \"\"\"فلاتر للعروض\"\"\"\n    # تصفية حسب الحالة\n    status = django_filters.ChoiceFilter(choices=Proposal.STATUS_CHOICES)\n    # تصفية حسب الأولوية\n    priority = django_filters.ChoiceFilter(choices=Proposal.PRIORITY_CHOICES)\n    # تصفية حسب المبلغ\n    amount_min = django_filters.NumberFilter(field_name='amount', lookup_expr='gte')\n    amount_max = django_filters.NumberFilter(field_name='amount', lookup_expr='lte')\n    # تصفية حسب التاريخ",
        "detail": "server.proposals.filters",
        "documentation": {}
    },
    {
        "label": "Proposal",
        "kind": 6,
        "importPath": "server.proposals.models",
        "description": "server.proposals.models",
        "peekOfCode": "class Proposal(models.Model):\n    \"\"\"\n    Model for project proposals\n    \"\"\"\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('accepted', 'Accepted'),\n        ('rejected', 'Rejected'),\n        ('withdrawn', 'Withdrawn'),\n        ('expired', 'Expired'),",
        "detail": "server.proposals.models",
        "documentation": {}
    },
    {
        "label": "ProposalMilestone",
        "kind": 6,
        "importPath": "server.proposals.models",
        "description": "server.proposals.models",
        "peekOfCode": "class ProposalMilestone(models.Model):\n    \"\"\"\n    Proposal milestones - dividing project into phases\n    \"\"\"\n    proposal = models.ForeignKey(\n        Proposal,\n        on_delete=models.CASCADE,\n        related_name='milestones',\n        verbose_name='Proposal'\n    )",
        "detail": "server.proposals.models",
        "documentation": {}
    },
    {
        "label": "ProposalAttachment",
        "kind": 6,
        "importPath": "server.proposals.models",
        "description": "server.proposals.models",
        "peekOfCode": "class ProposalAttachment(models.Model):\n    \"\"\"\n    Proposal attachments\n    \"\"\"\n    FILE_TYPE_CHOICES = [\n        ('image', 'Image'),\n        ('document', 'Document'),\n        ('video', 'Video'),\n        ('other', 'Other'),\n    ]",
        "detail": "server.proposals.models",
        "documentation": {}
    },
    {
        "label": "ProposalView",
        "kind": 6,
        "importPath": "server.proposals.models",
        "description": "server.proposals.models",
        "peekOfCode": "class ProposalView(models.Model):\n    \"\"\"\n    Track proposal views\n    \"\"\"\n    proposal = models.ForeignKey(\n        Proposal,\n        on_delete=models.CASCADE,\n        related_name='views',\n        verbose_name='Proposal'\n    )",
        "detail": "server.proposals.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.proposals.models",
        "description": "server.proposals.models",
        "peekOfCode": "User = get_user_model()\nclass Proposal(models.Model):\n    \"\"\"\n    Model for project proposals\n    \"\"\"\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('accepted', 'Accepted'),\n        ('rejected', 'Rejected'),\n        ('withdrawn', 'Withdrawn'),",
        "detail": "server.proposals.models",
        "documentation": {}
    },
    {
        "label": "IsProposalOwnerOrProjectOwner",
        "kind": 6,
        "importPath": "server.proposals.permissions",
        "description": "server.proposals.permissions",
        "peekOfCode": "class IsProposalOwnerOrProjectOwner(permissions.BasePermission):\n    \"\"\"الصلاحية لصاحب العرض أو صاحب المشروع\"\"\"\n    def has_object_permission(self, request, view, obj):\n        # للقراءة: صاحب العرض أو صاحب المشروع أو الإدارة\n        if request.method in permissions.SAFE_METHODS:\n            return (\n                obj.professional == request.user or\n                obj.project.client == request.user or\n                request.user.is_staff\n            )",
        "detail": "server.proposals.permissions",
        "documentation": {}
    },
    {
        "label": "IsProjectOwner",
        "kind": 6,
        "importPath": "server.proposals.permissions",
        "description": "server.proposals.permissions",
        "peekOfCode": "class IsProjectOwner(permissions.BasePermission):\n    \"\"\"الصلاحية لصاحب المشروع فقط\"\"\"\n    def has_object_permission(self, request, view, obj):\n        return obj.project.client == request.user or request.user.is_staff\nclass IsProfessional(permissions.BasePermission):\n    \"\"\"الصلاحية للمحترفين فقط\"\"\"\n    def has_permission(self, request, view):\n        return (\n            request.user.is_authenticated and\n            request.user.is_professional()",
        "detail": "server.proposals.permissions",
        "documentation": {}
    },
    {
        "label": "IsProfessional",
        "kind": 6,
        "importPath": "server.proposals.permissions",
        "description": "server.proposals.permissions",
        "peekOfCode": "class IsProfessional(permissions.BasePermission):\n    \"\"\"الصلاحية للمحترفين فقط\"\"\"\n    def has_permission(self, request, view):\n        return (\n            request.user.is_authenticated and\n            request.user.is_professional()\n        )\nclass IsClient(permissions.BasePermission):\n    \"\"\"الصلاحية للعملاء فقط\"\"\"\n    def has_permission(self, request, view):",
        "detail": "server.proposals.permissions",
        "documentation": {}
    },
    {
        "label": "IsClient",
        "kind": 6,
        "importPath": "server.proposals.permissions",
        "description": "server.proposals.permissions",
        "peekOfCode": "class IsClient(permissions.BasePermission):\n    \"\"\"الصلاحية للعملاء فقط\"\"\"\n    def has_permission(self, request, view):\n        return (\n            request.user.is_authenticated and\n            request.user.user_type == 'client'\n        )",
        "detail": "server.proposals.permissions",
        "documentation": {}
    },
    {
        "label": "ContractBasicSerializer",
        "kind": 6,
        "importPath": "server.proposals.serializers",
        "description": "server.proposals.serializers",
        "peekOfCode": "class ContractBasicSerializer(serializers.ModelSerializer):\n    \"\"\"سيريالايزر أساسي للعقد\"\"\"\n    class Meta:\n        model = Contract\n        fields = ['id', 'contract_number', 'title']\nclass UserBasicSerializer(serializers.ModelSerializer):\n    \"\"\"سيريالايزر أساسي للمستخدم\"\"\"\n    full_name = serializers.CharField(source='get_full_name', read_only=True)\n    display_name = serializers.CharField(source='get_display_name', read_only=True)\n    class Meta:",
        "detail": "server.proposals.serializers",
        "documentation": {}
    },
    {
        "label": "UserBasicSerializer",
        "kind": 6,
        "importPath": "server.proposals.serializers",
        "description": "server.proposals.serializers",
        "peekOfCode": "class UserBasicSerializer(serializers.ModelSerializer):\n    \"\"\"سيريالايزر أساسي للمستخدم\"\"\"\n    full_name = serializers.CharField(source='get_full_name', read_only=True)\n    display_name = serializers.CharField(source='get_display_name', read_only=True)\n    class Meta:\n        model = User\n        fields = [\n            'id', 'first_name', 'last_name', 'full_name', 'display_name', \n            'email', 'user_type', 'avatar', 'is_verified', 'rating_average', \n            'rating_count', 'projects_completed', 'location'",
        "detail": "server.proposals.serializers",
        "documentation": {}
    },
    {
        "label": "ProposalMilestoneSerializer",
        "kind": 6,
        "importPath": "server.proposals.serializers",
        "description": "server.proposals.serializers",
        "peekOfCode": "class ProposalMilestoneSerializer(serializers.ModelSerializer):\n    \"\"\"سيريالايزر للمعالم\"\"\"\n    class Meta:\n        model = ProposalMilestone\n        fields = [\n            'id', 'title', 'description', 'amount', 'timeline', 'order',\n            'created_at', 'updated_at'\n        ]\n        read_only_fields = ['id', 'created_at', 'updated_at']\nclass ProposalAttachmentSerializer(serializers.ModelSerializer):",
        "detail": "server.proposals.serializers",
        "documentation": {}
    },
    {
        "label": "ProposalAttachmentSerializer",
        "kind": 6,
        "importPath": "server.proposals.serializers",
        "description": "server.proposals.serializers",
        "peekOfCode": "class ProposalAttachmentSerializer(serializers.ModelSerializer):\n    \"\"\"سيريالايزر للمرفقات\"\"\"\n    file_size_display = serializers.CharField(source='get_file_size_display', read_only=True)\n    class Meta:\n        model = ProposalAttachment\n        fields = [\n            'id', 'file', 'name', 'file_type', 'file_size', 'file_size_display',\n            'description', 'created_at'\n        ]\n        read_only_fields = ['id', 'file_size', 'file_size_display', 'created_at']",
        "detail": "server.proposals.serializers",
        "documentation": {}
    },
    {
        "label": "ProposalListSerializer",
        "kind": 6,
        "importPath": "server.proposals.serializers",
        "description": "server.proposals.serializers",
        "peekOfCode": "class ProposalListSerializer(serializers.ModelSerializer):\n    \"\"\"سيريالايزر لقائمة العروض\"\"\"\n    professional = UserBasicSerializer(read_only=True)\n    contract = ContractBasicSerializer(read_only=True)\n    status_display = serializers.CharField(source='get_status_display_ar', read_only=True)\n    response_time_display = serializers.CharField(source='get_response_time_display', read_only=True)\n    milestones_count = serializers.SerializerMethodField()\n    milestones_total = serializers.SerializerMethodField()\n    views_count = serializers.SerializerMethodField()\n    can_be_accepted = serializers.SerializerMethodField()",
        "detail": "server.proposals.serializers",
        "documentation": {}
    },
    {
        "label": "ProposalDetailSerializer",
        "kind": 6,
        "importPath": "server.proposals.serializers",
        "description": "server.proposals.serializers",
        "peekOfCode": "class ProposalDetailSerializer(serializers.ModelSerializer):\n    \"\"\"سيريالايزر لتفاصيل العرض\"\"\"\n    professional = UserBasicSerializer(read_only=True)\n    contract = ContractBasicSerializer(read_only=True)\n    milestones = ProposalMilestoneSerializer(many=True, read_only=True)\n    attachments_files = ProposalAttachmentSerializer(many=True, read_only=True)\n    status_display = serializers.CharField(source='get_status_display_ar', read_only=True)\n    response_time_display = serializers.CharField(source='get_response_time_display', read_only=True)\n    views_count = serializers.SerializerMethodField()\n    can_be_accepted = serializers.SerializerMethodField()",
        "detail": "server.proposals.serializers",
        "documentation": {}
    },
    {
        "label": "CreateProposalSerializer",
        "kind": 6,
        "importPath": "server.proposals.serializers",
        "description": "server.proposals.serializers",
        "peekOfCode": "class CreateProposalSerializer(serializers.ModelSerializer):\n    \"\"\"سيريالايزر لإنشاء عرض جديد\"\"\"\n    milestones = ProposalMilestoneSerializer(many=True, required=False)\n    class Meta:\n        model = Proposal\n        fields = [\n            'project', 'cover_letter', 'amount', 'currency', 'timeline',\n            'estimated_hours', 'priority', 'response_time', 'includes_materials',\n            'warranty_period', 'portfolio_samples', 'attachments', 'milestones'\n        ]",
        "detail": "server.proposals.serializers",
        "documentation": {}
    },
    {
        "label": "UpdateProposalSerializer",
        "kind": 6,
        "importPath": "server.proposals.serializers",
        "description": "server.proposals.serializers",
        "peekOfCode": "class UpdateProposalSerializer(serializers.ModelSerializer):\n    \"\"\"سيريالايزر لتحديث العرض\"\"\"\n    class Meta:\n        model = Proposal\n        fields = [\n            'cover_letter', 'amount', 'timeline', 'estimated_hours',\n            'response_time', 'includes_materials', 'warranty_period',\n            'portfolio_samples', 'attachments'\n        ]\n    def validate(self, data):",
        "detail": "server.proposals.serializers",
        "documentation": {}
    },
    {
        "label": "AcceptProposalSerializer",
        "kind": 6,
        "importPath": "server.proposals.serializers",
        "description": "server.proposals.serializers",
        "peekOfCode": "class AcceptProposalSerializer(serializers.Serializer):\n    \"\"\"سيريالايزر لقبول العرض\"\"\"\n    message = serializers.CharField(required=False, max_length=500, help_text=\"رسالة للمحترف\")\nclass RejectProposalSerializer(serializers.Serializer):\n    \"\"\"سيريالايزر لرفض العرض\"\"\"\n    reason = serializers.CharField(max_length=255, help_text=\"سبب الرفض\")\n    message = serializers.CharField(required=False, max_length=500, help_text=\"رسالة للمحترف\")\nclass ProposalStatsSerializer(serializers.Serializer):\n    \"\"\"سيريالايزر لإحصائيات العروض\"\"\"\n    total_proposals = serializers.IntegerField()",
        "detail": "server.proposals.serializers",
        "documentation": {}
    },
    {
        "label": "RejectProposalSerializer",
        "kind": 6,
        "importPath": "server.proposals.serializers",
        "description": "server.proposals.serializers",
        "peekOfCode": "class RejectProposalSerializer(serializers.Serializer):\n    \"\"\"سيريالايزر لرفض العرض\"\"\"\n    reason = serializers.CharField(max_length=255, help_text=\"سبب الرفض\")\n    message = serializers.CharField(required=False, max_length=500, help_text=\"رسالة للمحترف\")\nclass ProposalStatsSerializer(serializers.Serializer):\n    \"\"\"سيريالايزر لإحصائيات العروض\"\"\"\n    total_proposals = serializers.IntegerField()\n    pending_proposals = serializers.IntegerField()\n    accepted_proposals = serializers.IntegerField()\n    rejected_proposals = serializers.IntegerField()",
        "detail": "server.proposals.serializers",
        "documentation": {}
    },
    {
        "label": "ProposalStatsSerializer",
        "kind": 6,
        "importPath": "server.proposals.serializers",
        "description": "server.proposals.serializers",
        "peekOfCode": "class ProposalStatsSerializer(serializers.Serializer):\n    \"\"\"سيريالايزر لإحصائيات العروض\"\"\"\n    total_proposals = serializers.IntegerField()\n    pending_proposals = serializers.IntegerField()\n    accepted_proposals = serializers.IntegerField()\n    rejected_proposals = serializers.IntegerField()\n    avg_amount = serializers.DecimalField(max_digits=10, decimal_places=2)\n    total_amount = serializers.DecimalField(max_digits=12, decimal_places=2)\n    avg_response_time = serializers.CharField()\nclass ProposalViewSerializer(serializers.ModelSerializer):",
        "detail": "server.proposals.serializers",
        "documentation": {}
    },
    {
        "label": "ProposalViewSerializer",
        "kind": 6,
        "importPath": "server.proposals.serializers",
        "description": "server.proposals.serializers",
        "peekOfCode": "class ProposalViewSerializer(serializers.ModelSerializer):\n    \"\"\"سيريالايزر لمشاهدات العروض\"\"\"\n    viewer = UserBasicSerializer(read_only=True)\n    class Meta:\n        model = ProposalView\n        fields = ['id', 'viewer', 'viewed_at', 'ip_address']\n        read_only_fields = fields",
        "detail": "server.proposals.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.proposals.serializers",
        "description": "server.proposals.serializers",
        "peekOfCode": "User = get_user_model()\nclass ContractBasicSerializer(serializers.ModelSerializer):\n    \"\"\"سيريالايزر أساسي للعقد\"\"\"\n    class Meta:\n        model = Contract\n        fields = ['id', 'contract_number', 'title']\nclass UserBasicSerializer(serializers.ModelSerializer):\n    \"\"\"سيريالايزر أساسي للمستخدم\"\"\"\n    full_name = serializers.CharField(source='get_full_name', read_only=True)\n    display_name = serializers.CharField(source='get_display_name', read_only=True)",
        "detail": "server.proposals.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.proposals.urls",
        "description": "server.proposals.urls",
        "peekOfCode": "urlpatterns = [\n    # Proposal endpoints\n    path('', proposal_list, name='proposal-list'),\n    path('create/', create_proposal, name='proposal-create'),\n    path('<uuid:proposal_id>/', proposal_detail, name='proposal-detail'),\n    path('<uuid:proposal_id>/accept/', accept_proposal, name='proposal-accept'),\n    path('<uuid:proposal_id>/reject/', reject_proposal, name='proposal-reject'),\n    path('<uuid:proposal_id>/create-contract/', create_contract_from_proposal_custom, name='proposal-create-contract'),\n    # Project-specific proposals\n    path('project/<int:project_id>/', project_proposals, name='project-proposals'),",
        "detail": "server.proposals.urls",
        "documentation": {}
    },
    {
        "label": "proposal_list",
        "kind": 2,
        "importPath": "server.proposals.views",
        "description": "server.proposals.views",
        "peekOfCode": "def proposal_list(request):\n    \"\"\"Get all proposals\"\"\"\n    try:\n        proposals = Proposal.objects.all().select_related(\n            'professional', 'project'\n        ).prefetch_related('milestones')\n        serializer = ProposalListSerializer(proposals, many=True)\n        return Response({\n            'count': proposals.count(),\n            'results': serializer.data",
        "detail": "server.proposals.views",
        "documentation": {}
    },
    {
        "label": "project_proposals",
        "kind": 2,
        "importPath": "server.proposals.views",
        "description": "server.proposals.views",
        "peekOfCode": "def project_proposals(request, project_id):\n    \"\"\"Get proposals for a specific project\"\"\"\n    try:\n        proposals = Proposal.objects.filter(\n            project_id=project_id\n        ).select_related(\n            'professional', 'project'\n        ).prefetch_related('milestones')\n        serializer = ProposalListSerializer(proposals, many=True)\n        return Response({",
        "detail": "server.proposals.views",
        "documentation": {}
    },
    {
        "label": "create_proposal",
        "kind": 2,
        "importPath": "server.proposals.views",
        "description": "server.proposals.views",
        "peekOfCode": "def create_proposal(request):\n    \"\"\"Create a new proposal\"\"\"\n    try:\n        serializer = CreateProposalSerializer(\n            data=request.data, \n            context={'request': request}\n        )\n        if serializer.is_valid():\n            proposal = serializer.save()\n            response_serializer = ProposalDetailSerializer(proposal)",
        "detail": "server.proposals.views",
        "documentation": {}
    },
    {
        "label": "proposal_detail",
        "kind": 2,
        "importPath": "server.proposals.views",
        "description": "server.proposals.views",
        "peekOfCode": "def proposal_detail(request, proposal_id):\n    \"\"\"Get proposal details\"\"\"\n    try:\n        proposal = get_object_or_404(Proposal, id=proposal_id)\n        serializer = ProposalDetailSerializer(proposal)\n        return Response(serializer.data)\n    except Exception as e:\n        return Response(\n            {'error': str(e)}, \n            status=status.HTTP_500_INTERNAL_SERVER_ERROR",
        "detail": "server.proposals.views",
        "documentation": {}
    },
    {
        "label": "create_contract_from_proposal",
        "kind": 2,
        "importPath": "server.proposals.views",
        "description": "server.proposals.views",
        "peekOfCode": "def create_contract_from_proposal(proposal, contract_data=None):\n    \"\"\"\n    إنشاء عقد من العرض المقبول مع إمكانية تخصيص البيانات\n    \"\"\"\n    try:\n        print(f\"DEBUG: Creating contract from proposal {proposal.id}\")\n        print(f\"DEBUG: Proposal amount: {proposal.amount}\")\n        print(f\"DEBUG: Proposal timeline: {proposal.timeline}\")\n        # حساب تواريخ البدء والانتهاء\n        start_date = timezone.now().date()",
        "detail": "server.proposals.views",
        "documentation": {}
    },
    {
        "label": "accept_proposal",
        "kind": 2,
        "importPath": "server.proposals.views",
        "description": "server.proposals.views",
        "peekOfCode": "def accept_proposal(request, proposal_id):\n    \"\"\"Accept a proposal and create contract\"\"\"\n    try:\n        print(f\"DEBUG: Accepting proposal {proposal_id}\")\n        print(f\"DEBUG: Request user: {request.user}\")\n        print(f\"DEBUG: Request user type: {request.user.user_type}\")\n        proposal = get_object_or_404(Proposal, id=proposal_id)\n        print(f\"DEBUG: Found proposal: {proposal.id}\")\n        print(f\"DEBUG: Proposal status: {proposal.status}\")\n        print(f\"DEBUG: Proposal project client: {proposal.project.client}\")",
        "detail": "server.proposals.views",
        "documentation": {}
    },
    {
        "label": "create_contract_from_proposal_custom",
        "kind": 2,
        "importPath": "server.proposals.views",
        "description": "server.proposals.views",
        "peekOfCode": "def create_contract_from_proposal_custom(request, proposal_id):\n    \"\"\"Create contract from proposal with custom data\"\"\"\n    try:\n        proposal = get_object_or_404(Proposal, id=proposal_id)\n        # Check if user is project owner\n        if proposal.project.client != request.user:\n            return Response(\n                {'error': 'Permission denied'}, \n                status=status.HTTP_403_FORBIDDEN\n            )",
        "detail": "server.proposals.views",
        "documentation": {}
    },
    {
        "label": "reject_proposal",
        "kind": 2,
        "importPath": "server.proposals.views",
        "description": "server.proposals.views",
        "peekOfCode": "def reject_proposal(request, proposal_id):\n    \"\"\"Reject a proposal\"\"\"\n    try:\n        proposal = get_object_or_404(Proposal, id=proposal_id)\n        # Check if user is project owner\n        if proposal.project.client != request.user:\n            return Response(\n                {'error': 'Permission denied'}, \n                status=status.HTTP_403_FORBIDDEN\n            )",
        "detail": "server.proposals.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.reviews.migrations.0001_initial",
        "description": "server.reviews.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('projects', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Review',\n            fields=[",
        "detail": "server.reviews.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ReviewAdmin",
        "kind": 6,
        "importPath": "server.reviews.admin",
        "description": "server.reviews.admin",
        "peekOfCode": "class ReviewAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة التقييمات\n    \"\"\"\n    list_display = (\n        'project_title', 'client', 'professional', 'rating_stars',\n        'overall_rating', 'created_at'\n    )\n    list_filter = ('rating', 'created_at')\n    search_fields = (",
        "detail": "server.reviews.admin",
        "documentation": {}
    },
    {
        "label": "ReviewsConfig",
        "kind": 6,
        "importPath": "server.reviews.apps",
        "description": "server.reviews.apps",
        "peekOfCode": "class ReviewsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'reviews'",
        "detail": "server.reviews.apps",
        "documentation": {}
    },
    {
        "label": "Review",
        "kind": 6,
        "importPath": "server.reviews.models",
        "description": "server.reviews.models",
        "peekOfCode": "class Review(models.Model):\n    \"\"\"التقييمات\"\"\"\n    project = models.ForeignKey('projects.Project', on_delete=models.CASCADE, related_name='reviews')\n    professional = models.ForeignKey(User, on_delete=models.CASCADE, related_name='received_reviews')\n    client = models.ForeignKey(User, on_delete=models.CASCADE, related_name='given_reviews')\n    rating = models.PositiveIntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)])\n    comment = models.TextField(blank=True)\n    # Detailed ratings\n    quality_rating = models.PositiveIntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)], null=True, blank=True)\n    communication_rating = models.PositiveIntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)], null=True, blank=True)",
        "detail": "server.reviews.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.reviews.models",
        "description": "server.reviews.models",
        "peekOfCode": "User = get_user_model()\nclass Review(models.Model):\n    \"\"\"التقييمات\"\"\"\n    project = models.ForeignKey('projects.Project', on_delete=models.CASCADE, related_name='reviews')\n    professional = models.ForeignKey(User, on_delete=models.CASCADE, related_name='received_reviews')\n    client = models.ForeignKey(User, on_delete=models.CASCADE, related_name='given_reviews')\n    rating = models.PositiveIntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)])\n    comment = models.TextField(blank=True)\n    # Detailed ratings\n    quality_rating = models.PositiveIntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)], null=True, blank=True)",
        "detail": "server.reviews.models",
        "documentation": {}
    },
    {
        "label": "UserBasicSerializer",
        "kind": 6,
        "importPath": "server.reviews.serializers",
        "description": "server.reviews.serializers",
        "peekOfCode": "class UserBasicSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer أساسي لبيانات المستخدم\"\"\"\n    class Meta:\n        model = User\n        fields = [\n            'id', 'username', 'first_name', 'last_name', \n            'avatar', 'user_type', 'is_verified'\n        ]\nclass ReviewSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer للتقييمات\"\"\"",
        "detail": "server.reviews.serializers",
        "documentation": {}
    },
    {
        "label": "ReviewSerializer",
        "kind": 6,
        "importPath": "server.reviews.serializers",
        "description": "server.reviews.serializers",
        "peekOfCode": "class ReviewSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer للتقييمات\"\"\"\n    professional = UserBasicSerializer(read_only=True)\n    client = UserBasicSerializer(read_only=True)\n    project_info = serializers.SerializerMethodField()\n    average_rating = serializers.SerializerMethodField()\n    class Meta:\n        model = Review\n        fields = [\n            'id', 'project_info', 'professional', 'client', 'rating', ",
        "detail": "server.reviews.serializers",
        "documentation": {}
    },
    {
        "label": "ReviewCreateSerializer",
        "kind": 6,
        "importPath": "server.reviews.serializers",
        "description": "server.reviews.serializers",
        "peekOfCode": "class ReviewCreateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لإنشاء التقييمات\"\"\"\n    class Meta:\n        model = Review\n        fields = [\n            'project', 'professional', 'rating', 'comment',\n            'quality_rating', 'communication_rating', \n            'timeliness_rating', 'professionalism_rating'\n        ]\n    def validate_rating(self, value):",
        "detail": "server.reviews.serializers",
        "documentation": {}
    },
    {
        "label": "ReviewUpdateSerializer",
        "kind": 6,
        "importPath": "server.reviews.serializers",
        "description": "server.reviews.serializers",
        "peekOfCode": "class ReviewUpdateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لتحديث التقييمات\"\"\"\n    class Meta:\n        model = Review\n        fields = [\n            'rating', 'comment', 'quality_rating', 'communication_rating', \n            'timeliness_rating', 'professionalism_rating'\n        ]\n    def validate_rating(self, value):\n        \"\"\"Validate overall rating\"\"\"",
        "detail": "server.reviews.serializers",
        "documentation": {}
    },
    {
        "label": "ReviewListSerializer",
        "kind": 6,
        "importPath": "server.reviews.serializers",
        "description": "server.reviews.serializers",
        "peekOfCode": "class ReviewListSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer مبسط لقائمة التقييمات\"\"\"\n    professional = UserBasicSerializer(read_only=True)\n    client = UserBasicSerializer(read_only=True)\n    project_title = serializers.CharField(source='project.title', read_only=True)\n    class Meta:\n        model = Review\n        fields = [\n            'id', 'project_title', 'professional', 'client', 'rating', \n            'comment', 'created_at'",
        "detail": "server.reviews.serializers",
        "documentation": {}
    },
    {
        "label": "ProfessionalReviewsSerializer",
        "kind": 6,
        "importPath": "server.reviews.serializers",
        "description": "server.reviews.serializers",
        "peekOfCode": "class ProfessionalReviewsSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لتقييمات المحترف\"\"\"\n    client = UserBasicSerializer(read_only=True)\n    project_info = serializers.SerializerMethodField()\n    class Meta:\n        model = Review\n        fields = [\n            'id', 'project_info', 'client', 'rating', 'comment',\n            'quality_rating', 'communication_rating', \n            'timeliness_rating', 'professionalism_rating',",
        "detail": "server.reviews.serializers",
        "documentation": {}
    },
    {
        "label": "ReviewStatsSerializer",
        "kind": 6,
        "importPath": "server.reviews.serializers",
        "description": "server.reviews.serializers",
        "peekOfCode": "class ReviewStatsSerializer(serializers.Serializer):\n    \"\"\"Serializer لإحصائيات التقييمات\"\"\"\n    total_reviews = serializers.IntegerField()\n    average_rating = serializers.DecimalField(max_digits=3, decimal_places=2)\n    rating_distribution = serializers.DictField()\n    # Detailed ratings averages\n    average_quality = serializers.DecimalField(max_digits=3, decimal_places=2)\n    average_communication = serializers.DecimalField(max_digits=3, decimal_places=2)\n    average_timeliness = serializers.DecimalField(max_digits=3, decimal_places=2)\n    average_professionalism = serializers.DecimalField(max_digits=3, decimal_places=2)",
        "detail": "server.reviews.serializers",
        "documentation": {}
    },
    {
        "label": "ReviewSummarySerializer",
        "kind": 6,
        "importPath": "server.reviews.serializers",
        "description": "server.reviews.serializers",
        "peekOfCode": "class ReviewSummarySerializer(serializers.Serializer):\n    \"\"\"Serializer لملخص التقييمات\"\"\"\n    professional_id = serializers.IntegerField()\n    professional_name = serializers.CharField()\n    total_reviews = serializers.IntegerField()\n    average_rating = serializers.DecimalField(max_digits=3, decimal_places=2)\n    latest_review = serializers.DateTimeField()\n    five_star_percentage = serializers.DecimalField(max_digits=5, decimal_places=2)\n    four_star_percentage = serializers.DecimalField(max_digits=5, decimal_places=2)\n    three_star_percentage = serializers.DecimalField(max_digits=5, decimal_places=2)",
        "detail": "server.reviews.serializers",
        "documentation": {}
    },
    {
        "label": "ReviewResponseSerializer",
        "kind": 6,
        "importPath": "server.reviews.serializers",
        "description": "server.reviews.serializers",
        "peekOfCode": "class ReviewResponseSerializer(serializers.Serializer):\n    \"\"\"Serializer لردود المحترف على التقييمات\"\"\"\n    response = serializers.CharField(max_length=1000)\n    def validate_response(self, value):\n        \"\"\"Validate response content\"\"\"\n        if not value or not value.strip():\n            raise serializers.ValidationError(\"Response cannot be empty\")\n        return value.strip()\nclass ReviewFilterSerializer(serializers.Serializer):\n    \"\"\"Serializer لفلترة التقييمات\"\"\"",
        "detail": "server.reviews.serializers",
        "documentation": {}
    },
    {
        "label": "ReviewFilterSerializer",
        "kind": 6,
        "importPath": "server.reviews.serializers",
        "description": "server.reviews.serializers",
        "peekOfCode": "class ReviewFilterSerializer(serializers.Serializer):\n    \"\"\"Serializer لفلترة التقييمات\"\"\"\n    professional_id = serializers.IntegerField(required=False)\n    client_id = serializers.IntegerField(required=False)\n    project_id = serializers.IntegerField(required=False)\n    rating = serializers.IntegerField(required=False, min_value=1, max_value=5)\n    rating_min = serializers.IntegerField(required=False, min_value=1, max_value=5)\n    rating_max = serializers.IntegerField(required=False, min_value=1, max_value=5)\n    date_from = serializers.DateField(required=False)\n    date_to = serializers.DateField(required=False)",
        "detail": "server.reviews.serializers",
        "documentation": {}
    },
    {
        "label": "ReviewReportSerializer",
        "kind": 6,
        "importPath": "server.reviews.serializers",
        "description": "server.reviews.serializers",
        "peekOfCode": "class ReviewReportSerializer(serializers.Serializer):\n    \"\"\"Serializer لتقرير التقييمات\"\"\"\n    period = serializers.ChoiceField(\n        choices=['week', 'month', 'quarter', 'year'],\n        default='month'\n    )\n    professional_id = serializers.IntegerField(required=False)\n    include_comments = serializers.BooleanField(default=False)\n    include_detailed_ratings = serializers.BooleanField(default=True)\n    def validate_professional_id(self, value):",
        "detail": "server.reviews.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.reviews.serializers",
        "description": "server.reviews.serializers",
        "peekOfCode": "User = get_user_model()\nclass UserBasicSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer أساسي لبيانات المستخدم\"\"\"\n    class Meta:\n        model = User\n        fields = [\n            'id', 'username', 'first_name', 'last_name', \n            'avatar', 'user_type', 'is_verified'\n        ]\nclass ReviewSerializer(serializers.ModelSerializer):",
        "detail": "server.reviews.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "server.reviews.urls",
        "description": "server.reviews.urls",
        "peekOfCode": "app_name = 'reviews'\nurlpatterns = [\n    # Review management\n    path('', views.ReviewListView.as_view(), name='review_list'),\n    path('<int:pk>/', views.ReviewDetailView.as_view(), name='review_detail'),\n    path('create/', views.ReviewCreateView.as_view(), name='review_create'),\n    path('<int:pk>/update/', views.ReviewUpdateView.as_view(), name='review_update'),\n    path('<int:pk>/delete/', views.ReviewDeleteView.as_view(), name='review_delete'),\n    # Professional reviews\n    path('professional/<int:professional_id>/', views.ProfessionalReviewsView.as_view(), name='professional_reviews'),",
        "detail": "server.reviews.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.reviews.urls",
        "description": "server.reviews.urls",
        "peekOfCode": "urlpatterns = [\n    # Review management\n    path('', views.ReviewListView.as_view(), name='review_list'),\n    path('<int:pk>/', views.ReviewDetailView.as_view(), name='review_detail'),\n    path('create/', views.ReviewCreateView.as_view(), name='review_create'),\n    path('<int:pk>/update/', views.ReviewUpdateView.as_view(), name='review_update'),\n    path('<int:pk>/delete/', views.ReviewDeleteView.as_view(), name='review_delete'),\n    # Professional reviews\n    path('professional/<int:professional_id>/', views.ProfessionalReviewsView.as_view(), name='professional_reviews'),\n    path('professional/<int:professional_id>/stats/', views.review_stats, name='professional_review_stats'),",
        "detail": "server.reviews.urls",
        "documentation": {}
    },
    {
        "label": "ReviewListView",
        "kind": 6,
        "importPath": "server.reviews.views",
        "description": "server.reviews.views",
        "peekOfCode": "class ReviewListView(generics.ListAPIView):\n    \"\"\"قائمة التقييمات\"\"\"\n    serializer_class = ReviewListSerializer\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly]\n    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]\n    filterset_fields = ['professional', 'rating']\n    search_fields = ['comment', 'professional__first_name', 'professional__last_name']\n    ordering_fields = ['rating', 'created_at']\n    ordering = ['-created_at']\n    def get_queryset(self):",
        "detail": "server.reviews.views",
        "documentation": {}
    },
    {
        "label": "ReviewDetailView",
        "kind": 6,
        "importPath": "server.reviews.views",
        "description": "server.reviews.views",
        "peekOfCode": "class ReviewDetailView(generics.RetrieveAPIView):\n    \"\"\"تفاصيل التقييم\"\"\"\n    serializer_class = ReviewSerializer\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly]\n    queryset = Review.objects.select_related('professional', 'client', 'project')\n    @extend_schema(\n        operation_id=\"get_review_detail\",\n        summary=\"Review Details\",\n        description=\"Get specific review details\",\n        tags=[\"Reviews\"],",
        "detail": "server.reviews.views",
        "documentation": {}
    },
    {
        "label": "ReviewCreateView",
        "kind": 6,
        "importPath": "server.reviews.views",
        "description": "server.reviews.views",
        "peekOfCode": "class ReviewCreateView(generics.CreateAPIView):\n    \"\"\"إنشاء تقييم جديد\"\"\"\n    serializer_class = ReviewCreateSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def perform_create(self, serializer):\n        # Only clients can create reviews\n        if self.request.user.user_type != 'client':\n            raise permissions.PermissionDenied(\"Only clients can create reviews\")\n        serializer.save()\n    @extend_schema(",
        "detail": "server.reviews.views",
        "documentation": {}
    },
    {
        "label": "ReviewUpdateView",
        "kind": 6,
        "importPath": "server.reviews.views",
        "description": "server.reviews.views",
        "peekOfCode": "class ReviewUpdateView(generics.UpdateAPIView):\n    \"\"\"تحديث التقييم\"\"\"\n    serializer_class = ReviewUpdateSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        # Only review author can update\n        return Review.objects.filter(client=self.request.user)\n    def update(self, request, *args, **kwargs):\n        # Only allow updating within 24 hours\n        instance = self.get_object()",
        "detail": "server.reviews.views",
        "documentation": {}
    },
    {
        "label": "ReviewDeleteView",
        "kind": 6,
        "importPath": "server.reviews.views",
        "description": "server.reviews.views",
        "peekOfCode": "class ReviewDeleteView(generics.DestroyAPIView):\n    \"\"\"حذف التقييم\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        # Only review author can delete\n        return Review.objects.filter(client=self.request.user)\n    def destroy(self, request, *args, **kwargs):\n        # Only allow deleting within 24 hours\n        instance = self.get_object()\n        time_diff = timezone.now() - instance.created_at",
        "detail": "server.reviews.views",
        "documentation": {}
    },
    {
        "label": "ProfessionalReviewsView",
        "kind": 6,
        "importPath": "server.reviews.views",
        "description": "server.reviews.views",
        "peekOfCode": "class ProfessionalReviewsView(generics.ListAPIView):\n    \"\"\"تقييمات المحترف\"\"\"\n    serializer_class = ProfessionalReviewsSerializer\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly]\n    filter_backends = [DjangoFilterBackend, OrderingFilter]\n    filterset_fields = ['rating']\n    ordering_fields = ['rating', 'created_at']\n    ordering = ['-created_at']\n    def get_queryset(self):\n        professional_id = self.kwargs['professional_id']",
        "detail": "server.reviews.views",
        "documentation": {}
    },
    {
        "label": "MyReviewsView",
        "kind": 6,
        "importPath": "server.reviews.views",
        "description": "server.reviews.views",
        "peekOfCode": "class MyReviewsView(generics.ListAPIView):\n    \"\"\"تقييماتي\"\"\"\n    serializer_class = ReviewSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, OrderingFilter]\n    filterset_fields = ['rating']\n    ordering = ['-created_at']\n    def get_queryset(self):\n        user = self.request.user\n        if user.user_type == 'client':",
        "detail": "server.reviews.views",
        "documentation": {}
    },
    {
        "label": "review_stats",
        "kind": 2,
        "importPath": "server.reviews.views",
        "description": "server.reviews.views",
        "peekOfCode": "def review_stats(request, professional_id):\n    \"\"\"إحصائيات تقييمات المحترف\"\"\"\n    try:\n        professional = User.objects.get(\n            id=professional_id,\n            user_type__in=['home_pro', 'specialist', 'crew_member']\n        )\n    except User.DoesNotExist:\n        return Response({\n            'error': 'Professional not found'",
        "detail": "server.reviews.views",
        "documentation": {}
    },
    {
        "label": "review_summary",
        "kind": 2,
        "importPath": "server.reviews.views",
        "description": "server.reviews.views",
        "peekOfCode": "def review_summary(request):\n    \"\"\"ملخص التقييمات للمحترفين\"\"\"\n    # Get all professionals with reviews\n    professionals = User.objects.filter(\n        user_type__in=['home_pro', 'specialist', 'crew_member'],\n        received_reviews__isnull=False\n    ).distinct()\n    summaries = []\n    for professional in professionals:\n        reviews = Review.objects.filter(professional=professional)",
        "detail": "server.reviews.views",
        "documentation": {}
    },
    {
        "label": "review_filters",
        "kind": 2,
        "importPath": "server.reviews.views",
        "description": "server.reviews.views",
        "peekOfCode": "def review_filters(request):\n    \"\"\"فلترة التقييمات المتقدمة\"\"\"\n    serializer = ReviewFilterSerializer(data=request.query_params)\n    if serializer.is_valid():\n        data = serializer.validated_data\n        # Start with all reviews\n        queryset = Review.objects.select_related('professional', 'client', 'project')\n        # Apply filters\n        if data.get('professional_id'):\n            queryset = queryset.filter(professional_id=data['professional_id'])",
        "detail": "server.reviews.views",
        "documentation": {}
    },
    {
        "label": "review_report",
        "kind": 2,
        "importPath": "server.reviews.views",
        "description": "server.reviews.views",
        "peekOfCode": "def review_report(request):\n    \"\"\"تقرير التقييمات\"\"\"\n    serializer = ReviewReportSerializer(data=request.query_params)\n    if serializer.is_valid():\n        data = serializer.validated_data\n        period = data.get('period', 'month')\n        professional_id = data.get('professional_id')\n        # Calculate date range\n        now = timezone.now()\n        if period == 'week':",
        "detail": "server.reviews.views",
        "documentation": {}
    },
    {
        "label": "top_rated_professionals",
        "kind": 2,
        "importPath": "server.reviews.views",
        "description": "server.reviews.views",
        "peekOfCode": "def top_rated_professionals(request):\n    \"\"\"أفضل المحترفين تقييماً\"\"\"\n    limit = int(request.query_params.get('limit', 10))\n    min_reviews = int(request.query_params.get('min_reviews', 5))\n    professionals = User.objects.filter(\n        user_type__in=['home_pro', 'specialist', 'crew_member'],\n        rating_count__gte=min_reviews\n    ).order_by('-rating_average')[:limit]\n    results = []\n    for professional in professionals:",
        "detail": "server.reviews.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.reviews.views",
        "description": "server.reviews.views",
        "peekOfCode": "User = get_user_model()\nclass ReviewListView(generics.ListAPIView):\n    \"\"\"قائمة التقييمات\"\"\"\n    serializer_class = ReviewListSerializer\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly]\n    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]\n    filterset_fields = ['professional', 'rating']\n    search_fields = ['comment', 'professional__first_name', 'professional__last_name']\n    ordering_fields = ['rating', 'created_at']\n    ordering = ['-created_at']",
        "detail": "server.reviews.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "server.subscriptions.management.commands.create_fake_data",
        "description": "server.subscriptions.management.commands.create_fake_data",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Create comprehensive fake data for A-List Home Professionals platform'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--clear',\n            action='store_true',\n            help='Clear existing data before creating new data',\n        )\n    def handle(self, *args, **options):\n        if options['clear']:",
        "detail": "server.subscriptions.management.commands.create_fake_data",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.subscriptions.management.commands.create_fake_data",
        "description": "server.subscriptions.management.commands.create_fake_data",
        "peekOfCode": "User = get_user_model()\nclass Command(BaseCommand):\n    help = 'Create comprehensive fake data for A-List Home Professionals platform'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--clear',\n            action='store_true',\n            help='Clear existing data before creating new data',\n        )\n    def handle(self, *args, **options):",
        "detail": "server.subscriptions.management.commands.create_fake_data",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "server.subscriptions.management.commands.create_subscription_plans",
        "description": "server.subscriptions.management.commands.create_subscription_plans",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Create initial subscription plans'\n    def handle(self, *args, **options):\n        self.stdout.write('Creating subscription plans...')\n        with transaction.atomic():\n            # Create features first\n            features = self.create_features()\n            # Create subscription plans\n            plans = self.create_plans()\n            # Link features to plans",
        "detail": "server.subscriptions.management.commands.create_subscription_plans",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.subscriptions.migrations.0001_initial",
        "description": "server.subscriptions.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Subscription',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "server.subscriptions.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "SubscriptionPlanAdmin",
        "kind": 6,
        "importPath": "server.subscriptions.admin",
        "description": "server.subscriptions.admin",
        "peekOfCode": "class SubscriptionPlanAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة خطط الاشتراكات\n    \"\"\"\n    list_display = (\n        'name',\n        'user_type',\n        'plan_type',\n        'price_display',\n        'is_active',",
        "detail": "server.subscriptions.admin",
        "documentation": {}
    },
    {
        "label": "SubscriptionAdmin",
        "kind": 6,
        "importPath": "server.subscriptions.admin",
        "description": "server.subscriptions.admin",
        "peekOfCode": "class SubscriptionAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة الاشتراكات\n    \"\"\"\n    list_display = (\n        'user_display',\n        'plan',\n        'status',\n        'is_active_display',\n        'is_trial_display',",
        "detail": "server.subscriptions.admin",
        "documentation": {}
    },
    {
        "label": "SubscriptionUsageAdmin",
        "kind": 6,
        "importPath": "server.subscriptions.admin",
        "description": "server.subscriptions.admin",
        "peekOfCode": "class SubscriptionUsageAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة استخدام الاشتراكات\n    \"\"\"\n    list_display = (\n        'subscription_display',\n        'usage_type',\n        'count',\n        'period_display',\n        'created_at',",
        "detail": "server.subscriptions.admin",
        "documentation": {}
    },
    {
        "label": "SubscriptionPaymentAdmin",
        "kind": 6,
        "importPath": "server.subscriptions.admin",
        "description": "server.subscriptions.admin",
        "peekOfCode": "class SubscriptionPaymentAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة مدفوعات الاشتراكات\n    \"\"\"\n    list_display = (\n        'subscription_display',\n        'amount_display',\n        'status',\n        'period_display',\n        'created_at',",
        "detail": "server.subscriptions.admin",
        "documentation": {}
    },
    {
        "label": "SubscriptionFeatureAdmin",
        "kind": 6,
        "importPath": "server.subscriptions.admin",
        "description": "server.subscriptions.admin",
        "peekOfCode": "class SubscriptionFeatureAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة ميزات الاشتراكات\n    \"\"\"\n    list_display = (\n        'name',\n        'key',\n        'feature_type',\n        'created_at',\n    )",
        "detail": "server.subscriptions.admin",
        "documentation": {}
    },
    {
        "label": "PlanFeatureAdmin",
        "kind": 6,
        "importPath": "server.subscriptions.admin",
        "description": "server.subscriptions.admin",
        "peekOfCode": "class PlanFeatureAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة ميزات الخطط\n    \"\"\"\n    list_display = (\n        'plan',\n        'feature',\n        'value_display',\n        'created_at',\n    )",
        "detail": "server.subscriptions.admin",
        "documentation": {}
    },
    {
        "label": "SubscriptionsConfig",
        "kind": 6,
        "importPath": "server.subscriptions.apps",
        "description": "server.subscriptions.apps",
        "peekOfCode": "class SubscriptionsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'subscriptions'\n    verbose_name = 'Subscriptions'",
        "detail": "server.subscriptions.apps",
        "documentation": {}
    },
    {
        "label": "SubscriptionPlan",
        "kind": 6,
        "importPath": "server.subscriptions.models",
        "description": "server.subscriptions.models",
        "peekOfCode": "class SubscriptionPlan(models.Model):\n    \"\"\"\n    خطط الاشتراكات\n    \"\"\"\n    USER_TYPE_CHOICES = [\n        ('home_pro', 'Home Pro'),\n        ('crew_member', 'Crew Member'),\n        ('specialist', 'Specialist'),\n    ]\n    PLAN_TYPE_CHOICES = [",
        "detail": "server.subscriptions.models",
        "documentation": {}
    },
    {
        "label": "Subscription",
        "kind": 6,
        "importPath": "server.subscriptions.models",
        "description": "server.subscriptions.models",
        "peekOfCode": "class Subscription(models.Model):\n    \"\"\"\n    اشتراكات المستخدمين\n    \"\"\"\n    STATUS_CHOICES = [\n        ('active', 'Active'),\n        ('trial', 'Trial'),\n        ('cancelled', 'Cancelled'),\n        ('past_due', 'Past Due'),\n        ('unpaid', 'Unpaid'),",
        "detail": "server.subscriptions.models",
        "documentation": {}
    },
    {
        "label": "SubscriptionUsage",
        "kind": 6,
        "importPath": "server.subscriptions.models",
        "description": "server.subscriptions.models",
        "peekOfCode": "class SubscriptionUsage(models.Model):\n    \"\"\"\n    استخدام الاشتراكات\n    \"\"\"\n    USAGE_TYPE_CHOICES = [\n        ('project', 'Project'),\n        ('proposal', 'Proposal'),\n        ('message', 'Message'),\n        ('feature', 'Feature'),\n    ]",
        "detail": "server.subscriptions.models",
        "documentation": {}
    },
    {
        "label": "SubscriptionPayment",
        "kind": 6,
        "importPath": "server.subscriptions.models",
        "description": "server.subscriptions.models",
        "peekOfCode": "class SubscriptionPayment(models.Model):\n    \"\"\"\n    مدفوعات الاشتراكات\n    \"\"\"\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('succeeded', 'Succeeded'),\n        ('failed', 'Failed'),\n        ('cancelled', 'Cancelled'),\n        ('refunded', 'Refunded'),",
        "detail": "server.subscriptions.models",
        "documentation": {}
    },
    {
        "label": "SubscriptionFeature",
        "kind": 6,
        "importPath": "server.subscriptions.models",
        "description": "server.subscriptions.models",
        "peekOfCode": "class SubscriptionFeature(models.Model):\n    \"\"\"\n    ميزات الاشتراكات\n    \"\"\"\n    FEATURE_TYPE_CHOICES = [\n        ('boolean', 'Boolean'),\n        ('numeric', 'Numeric'),\n        ('text', 'Text'),\n    ]\n    name = models.CharField(max_length=100, unique=True)",
        "detail": "server.subscriptions.models",
        "documentation": {}
    },
    {
        "label": "PlanFeature",
        "kind": 6,
        "importPath": "server.subscriptions.models",
        "description": "server.subscriptions.models",
        "peekOfCode": "class PlanFeature(models.Model):\n    \"\"\"\n    ميزات الخطط\n    \"\"\"\n    plan = models.ForeignKey(SubscriptionPlan, on_delete=models.CASCADE, related_name='plan_features')\n    feature = models.ForeignKey(SubscriptionFeature, on_delete=models.CASCADE, related_name='plan_features')\n    # Feature value\n    value = models.JSONField(default=dict)\n    # Timestamps\n    created_at = models.DateTimeField(auto_now_add=True)",
        "detail": "server.subscriptions.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.subscriptions.models",
        "description": "server.subscriptions.models",
        "peekOfCode": "User = get_user_model()\nclass SubscriptionPlan(models.Model):\n    \"\"\"\n    خطط الاشتراكات\n    \"\"\"\n    USER_TYPE_CHOICES = [\n        ('home_pro', 'Home Pro'),\n        ('crew_member', 'Crew Member'),\n        ('specialist', 'Specialist'),\n    ]",
        "detail": "server.subscriptions.models",
        "documentation": {}
    },
    {
        "label": "SubscriptionFeatureSerializer",
        "kind": 6,
        "importPath": "server.subscriptions.serializers",
        "description": "server.subscriptions.serializers",
        "peekOfCode": "class SubscriptionFeatureSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لميزات الاشتراكات\"\"\"\n    class Meta:\n        model = SubscriptionFeature\n        fields = ['id', 'name', 'key', 'description', 'feature_type', 'default_value']\nclass PlanFeatureSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لميزات الخطط\"\"\"\n    feature = SubscriptionFeatureSerializer(read_only=True)\n    class Meta:\n        model = PlanFeature",
        "detail": "server.subscriptions.serializers",
        "documentation": {}
    },
    {
        "label": "PlanFeatureSerializer",
        "kind": 6,
        "importPath": "server.subscriptions.serializers",
        "description": "server.subscriptions.serializers",
        "peekOfCode": "class PlanFeatureSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لميزات الخطط\"\"\"\n    feature = SubscriptionFeatureSerializer(read_only=True)\n    class Meta:\n        model = PlanFeature\n        fields = ['id', 'feature', 'value']\nclass SubscriptionPlanSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لخطط الاشتراكات\"\"\"\n    plan_features = PlanFeatureSerializer(many=True, read_only=True)\n    class Meta:",
        "detail": "server.subscriptions.serializers",
        "documentation": {}
    },
    {
        "label": "SubscriptionPlanSerializer",
        "kind": 6,
        "importPath": "server.subscriptions.serializers",
        "description": "server.subscriptions.serializers",
        "peekOfCode": "class SubscriptionPlanSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لخطط الاشتراكات\"\"\"\n    plan_features = PlanFeatureSerializer(many=True, read_only=True)\n    class Meta:\n        model = SubscriptionPlan\n        fields = [\n            'id', 'name', 'user_type', 'plan_type', 'price', 'currency',\n            'features', 'project_limit', 'proposal_limit', 'message_limit',\n            'is_active', 'is_popular', 'trial_days', 'stripe_price_id',\n            'plan_features', 'created_at', 'updated_at'",
        "detail": "server.subscriptions.serializers",
        "documentation": {}
    },
    {
        "label": "SubscriptionUsageSerializer",
        "kind": 6,
        "importPath": "server.subscriptions.serializers",
        "description": "server.subscriptions.serializers",
        "peekOfCode": "class SubscriptionUsageSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لاستخدام الاشتراكات\"\"\"\n    class Meta:\n        model = SubscriptionUsage\n        fields = [\n            'id', 'subscription', 'usage_type', 'count',\n            'period_start', 'period_end', 'created_at', 'updated_at'\n        ]\n        read_only_fields = ['id', 'created_at', 'updated_at']\nclass SubscriptionPaymentSerializer(serializers.ModelSerializer):",
        "detail": "server.subscriptions.serializers",
        "documentation": {}
    },
    {
        "label": "SubscriptionPaymentSerializer",
        "kind": 6,
        "importPath": "server.subscriptions.serializers",
        "description": "server.subscriptions.serializers",
        "peekOfCode": "class SubscriptionPaymentSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لمدفوعات الاشتراكات\"\"\"\n    class Meta:\n        model = SubscriptionPayment\n        fields = [\n            'id', 'subscription', 'amount', 'currency', 'status',\n            'period_start', 'period_end', 'stripe_payment_intent_id',\n            'stripe_invoice_id', 'description', 'metadata',\n            'created_at', 'updated_at', 'paid_at'\n        ]",
        "detail": "server.subscriptions.serializers",
        "documentation": {}
    },
    {
        "label": "SubscriptionSerializer",
        "kind": 6,
        "importPath": "server.subscriptions.serializers",
        "description": "server.subscriptions.serializers",
        "peekOfCode": "class SubscriptionSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer للاشتراكات\"\"\"\n    plan = SubscriptionPlanSerializer(read_only=True)\n    usage = SubscriptionUsageSerializer(many=True, read_only=True)\n    payments = SubscriptionPaymentSerializer(many=True, read_only=True)\n    user_info = serializers.SerializerMethodField()\n    is_active = serializers.SerializerMethodField()\n    is_trial = serializers.SerializerMethodField()\n    days_remaining = serializers.SerializerMethodField()\n    trial_days_remaining = serializers.SerializerMethodField()",
        "detail": "server.subscriptions.serializers",
        "documentation": {}
    },
    {
        "label": "SubscriptionCreateSerializer",
        "kind": 6,
        "importPath": "server.subscriptions.serializers",
        "description": "server.subscriptions.serializers",
        "peekOfCode": "class SubscriptionCreateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لإنشاء اشتراك جديد\"\"\"\n    plan_id = serializers.IntegerField(write_only=True)\n    payment_method_id = serializers.CharField(write_only=True, required=False)\n    class Meta:\n        model = Subscription\n        fields = ['plan_id', 'payment_method_id']\n    def validate_plan_id(self, value):\n        \"\"\"Validate plan exists and is active\"\"\"\n        try:",
        "detail": "server.subscriptions.serializers",
        "documentation": {}
    },
    {
        "label": "SubscriptionUpdateSerializer",
        "kind": 6,
        "importPath": "server.subscriptions.serializers",
        "description": "server.subscriptions.serializers",
        "peekOfCode": "class SubscriptionUpdateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لتحديث الاشتراك\"\"\"\n    class Meta:\n        model = Subscription\n        fields = ['status']\n    def update(self, instance, validated_data):\n        \"\"\"Update subscription\"\"\"\n        # Add business logic for status changes\n        new_status = validated_data.get('status')\n        if new_status == 'cancelled':",
        "detail": "server.subscriptions.serializers",
        "documentation": {}
    },
    {
        "label": "SubscriptionStatsSerializer",
        "kind": 6,
        "importPath": "server.subscriptions.serializers",
        "description": "server.subscriptions.serializers",
        "peekOfCode": "class SubscriptionStatsSerializer(serializers.Serializer):\n    \"\"\"Serializer لإحصائيات الاشتراكات\"\"\"\n    total_subscriptions = serializers.IntegerField()\n    active_subscriptions = serializers.IntegerField()\n    trial_subscriptions = serializers.IntegerField()\n    cancelled_subscriptions = serializers.IntegerField()\n    expired_subscriptions = serializers.IntegerField()\n    # Revenue stats\n    monthly_revenue = serializers.DecimalField(max_digits=15, decimal_places=2)\n    total_revenue = serializers.DecimalField(max_digits=15, decimal_places=2)",
        "detail": "server.subscriptions.serializers",
        "documentation": {}
    },
    {
        "label": "StripeWebhookSerializer",
        "kind": 6,
        "importPath": "server.subscriptions.serializers",
        "description": "server.subscriptions.serializers",
        "peekOfCode": "class StripeWebhookSerializer(serializers.Serializer):\n    \"\"\"Serializer لـ Stripe webhooks\"\"\"\n    type = serializers.CharField()\n    data = serializers.DictField()\n    def validate_type(self, value):\n        \"\"\"Validate webhook type\"\"\"\n        allowed_types = [\n            'invoice.payment_succeeded',\n            'invoice.payment_failed',\n            'customer.subscription.created',",
        "detail": "server.subscriptions.serializers",
        "documentation": {}
    },
    {
        "label": "SubscriptionPlanFilterSerializer",
        "kind": 6,
        "importPath": "server.subscriptions.serializers",
        "description": "server.subscriptions.serializers",
        "peekOfCode": "class SubscriptionPlanFilterSerializer(serializers.Serializer):\n    \"\"\"Serializer لفلترة خطط الاشتراكات\"\"\"\n    user_type = serializers.ChoiceField(\n        choices=SubscriptionPlan.USER_TYPE_CHOICES,\n        required=False\n    )\n    plan_type = serializers.ChoiceField(\n        choices=SubscriptionPlan.PLAN_TYPE_CHOICES,\n        required=False\n    )",
        "detail": "server.subscriptions.serializers",
        "documentation": {}
    },
    {
        "label": "SubscriptionChangePlanSerializer",
        "kind": 6,
        "importPath": "server.subscriptions.serializers",
        "description": "server.subscriptions.serializers",
        "peekOfCode": "class SubscriptionChangePlanSerializer(serializers.Serializer):\n    \"\"\"Serializer لتغيير خطة الاشتراك\"\"\"\n    new_plan_id = serializers.IntegerField()\n    prorate = serializers.BooleanField(default=True)\n    def validate_new_plan_id(self, value):\n        \"\"\"Validate new plan exists and is active\"\"\"\n        try:\n            plan = SubscriptionPlan.objects.get(id=value, is_active=True)\n            return value\n        except SubscriptionPlan.DoesNotExist:",
        "detail": "server.subscriptions.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.subscriptions.serializers",
        "description": "server.subscriptions.serializers",
        "peekOfCode": "User = get_user_model()\nclass SubscriptionFeatureSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لميزات الاشتراكات\"\"\"\n    class Meta:\n        model = SubscriptionFeature\n        fields = ['id', 'name', 'key', 'description', 'feature_type', 'default_value']\nclass PlanFeatureSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer لميزات الخطط\"\"\"\n    feature = SubscriptionFeatureSerializer(read_only=True)\n    class Meta:",
        "detail": "server.subscriptions.serializers",
        "documentation": {}
    },
    {
        "label": "SubscriptionPlanModelTest",
        "kind": 6,
        "importPath": "server.subscriptions.tests",
        "description": "server.subscriptions.tests",
        "peekOfCode": "class SubscriptionPlanModelTest(TestCase):\n    \"\"\"Test SubscriptionPlan model\"\"\"\n    def setUp(self):\n        self.plan = SubscriptionPlan.objects.create(\n            name='Home Pro Basic',\n            user_type='home_pro',\n            plan_type='basic',\n            price=Decimal('150.00'),\n            features=['Feature 1', 'Feature 2'],\n            project_limit=10,",
        "detail": "server.subscriptions.tests",
        "documentation": {}
    },
    {
        "label": "SubscriptionModelTest",
        "kind": 6,
        "importPath": "server.subscriptions.tests",
        "description": "server.subscriptions.tests",
        "peekOfCode": "class SubscriptionModelTest(TestCase):\n    \"\"\"Test Subscription model\"\"\"\n    def setUp(self):\n        self.user = User.objects.create_user(\n            username='testuser',\n            email='test@example.com',\n            password='testpass123',\n            user_type='home_pro'\n        )\n        self.plan = SubscriptionPlan.objects.create(",
        "detail": "server.subscriptions.tests",
        "documentation": {}
    },
    {
        "label": "SubscriptionAPITest",
        "kind": 6,
        "importPath": "server.subscriptions.tests",
        "description": "server.subscriptions.tests",
        "peekOfCode": "class SubscriptionAPITest(APITestCase):\n    \"\"\"Test Subscription API endpoints\"\"\"\n    def setUp(self):\n        self.user = User.objects.create_user(\n            username='testuser',\n            email='test@example.com',\n            password='testpass123',\n            user_type='home_pro'\n        )\n        self.plan = SubscriptionPlan.objects.create(",
        "detail": "server.subscriptions.tests",
        "documentation": {}
    },
    {
        "label": "SubscriptionFeatureTest",
        "kind": 6,
        "importPath": "server.subscriptions.tests",
        "description": "server.subscriptions.tests",
        "peekOfCode": "class SubscriptionFeatureTest(TestCase):\n    \"\"\"Test SubscriptionFeature model\"\"\"\n    def setUp(self):\n        self.feature = SubscriptionFeature.objects.create(\n            name='Priority Support',\n            key='priority_support',\n            description='Priority customer support',\n            feature_type='boolean',\n            default_value={'enabled': False}\n        )",
        "detail": "server.subscriptions.tests",
        "documentation": {}
    },
    {
        "label": "PlanFeatureTest",
        "kind": 6,
        "importPath": "server.subscriptions.tests",
        "description": "server.subscriptions.tests",
        "peekOfCode": "class PlanFeatureTest(TestCase):\n    \"\"\"Test PlanFeature model\"\"\"\n    def setUp(self):\n        self.plan = SubscriptionPlan.objects.create(\n            name='Home Pro Premium',\n            user_type='home_pro',\n            plan_type='premium',\n            price=Decimal('275.00')\n        )\n        self.feature = SubscriptionFeature.objects.create(",
        "detail": "server.subscriptions.tests",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.subscriptions.tests",
        "description": "server.subscriptions.tests",
        "peekOfCode": "User = get_user_model()\nclass SubscriptionPlanModelTest(TestCase):\n    \"\"\"Test SubscriptionPlan model\"\"\"\n    def setUp(self):\n        self.plan = SubscriptionPlan.objects.create(\n            name='Home Pro Basic',\n            user_type='home_pro',\n            plan_type='basic',\n            price=Decimal('150.00'),\n            features=['Feature 1', 'Feature 2'],",
        "detail": "server.subscriptions.tests",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "server.subscriptions.urls",
        "description": "server.subscriptions.urls",
        "peekOfCode": "app_name = 'subscriptions'\nurlpatterns = [\n    # Subscription Plans\n    path('plans/', views.SubscriptionPlanListView.as_view(), name='plan_list'),\n    path('plans/<int:pk>/', views.SubscriptionPlanDetailView.as_view(), name='plan_detail'),\n    # My Subscription\n    path('my-subscription/', views.MySubscriptionView.as_view(), name='my_subscription'),\n    path('create/', views.SubscriptionCreateView.as_view(), name='create_subscription'),\n    path('update/', views.SubscriptionUpdateView.as_view(), name='update_subscription'),\n    path('cancel/', views.SubscriptionCancelView.as_view(), name='cancel_subscription'),",
        "detail": "server.subscriptions.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.subscriptions.urls",
        "description": "server.subscriptions.urls",
        "peekOfCode": "urlpatterns = [\n    # Subscription Plans\n    path('plans/', views.SubscriptionPlanListView.as_view(), name='plan_list'),\n    path('plans/<int:pk>/', views.SubscriptionPlanDetailView.as_view(), name='plan_detail'),\n    # My Subscription\n    path('my-subscription/', views.MySubscriptionView.as_view(), name='my_subscription'),\n    path('create/', views.SubscriptionCreateView.as_view(), name='create_subscription'),\n    path('update/', views.SubscriptionUpdateView.as_view(), name='update_subscription'),\n    path('cancel/', views.SubscriptionCancelView.as_view(), name='cancel_subscription'),\n    path('change-plan/', views.SubscriptionChangePlanView.as_view(), name='change_plan'),",
        "detail": "server.subscriptions.urls",
        "documentation": {}
    },
    {
        "label": "SubscriptionPlanListView",
        "kind": 6,
        "importPath": "server.subscriptions.views",
        "description": "server.subscriptions.views",
        "peekOfCode": "class SubscriptionPlanListView(generics.ListAPIView):\n    \"\"\"قائمة خطط الاشتراكات\"\"\"\n    serializer_class = SubscriptionPlanSerializer\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly]\n    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]\n    filterset_fields = ['user_type', 'plan_type', 'is_active', 'is_popular']\n    search_fields = ['name', 'features']\n    ordering_fields = ['price', 'created_at']\n    ordering = ['user_type', 'price']\n    def get_queryset(self):",
        "detail": "server.subscriptions.views",
        "documentation": {}
    },
    {
        "label": "SubscriptionPlanDetailView",
        "kind": 6,
        "importPath": "server.subscriptions.views",
        "description": "server.subscriptions.views",
        "peekOfCode": "class SubscriptionPlanDetailView(generics.RetrieveAPIView):\n    \"\"\"تفاصيل خطة الاشتراك\"\"\"\n    serializer_class = SubscriptionPlanSerializer\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly]\n    def get_queryset(self):\n        return SubscriptionPlan.objects.filter(is_active=True).prefetch_related('plan_features__feature')\n    @extend_schema(\n        operation_id=\"get_subscription_plan_detail\",\n        summary=\"Subscription Plan Details\",\n        description=\"Get specific subscription plan details\",",
        "detail": "server.subscriptions.views",
        "documentation": {}
    },
    {
        "label": "MySubscriptionView",
        "kind": 6,
        "importPath": "server.subscriptions.views",
        "description": "server.subscriptions.views",
        "peekOfCode": "class MySubscriptionView(APIView):\n    \"\"\"اشتراك المستخدم الحالي\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    @extend_schema(\n        operation_id=\"get_my_subscription\",\n        summary=\"اشتراكي الحالي\",\n        description=\"عرض اشتراك المستخدم الحالي\",\n        tags=[\"Subscriptions\"],\n    )\n    def get(self, request):",
        "detail": "server.subscriptions.views",
        "documentation": {}
    },
    {
        "label": "SubscriptionCreateView",
        "kind": 6,
        "importPath": "server.subscriptions.views",
        "description": "server.subscriptions.views",
        "peekOfCode": "class SubscriptionCreateView(generics.CreateAPIView):\n    \"\"\"إنشاء اشتراك جديد\"\"\"\n    serializer_class = SubscriptionCreateSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def perform_create(self, serializer):\n        \"\"\"Create subscription with Stripe integration\"\"\"\n        subscription = serializer.save()\n        # Create Stripe customer if not exists\n        if not subscription.stripe_customer_id:\n            customer = stripe.Customer.create(",
        "detail": "server.subscriptions.views",
        "documentation": {}
    },
    {
        "label": "SubscriptionUpdateView",
        "kind": 6,
        "importPath": "server.subscriptions.views",
        "description": "server.subscriptions.views",
        "peekOfCode": "class SubscriptionUpdateView(generics.UpdateAPIView):\n    \"\"\"تحديث الاشتراك\"\"\"\n    serializer_class = SubscriptionUpdateSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_object(self):\n        \"\"\"Get user's subscription\"\"\"\n        return Subscription.objects.get(user=self.request.user)\n    @extend_schema(\n        operation_id=\"update_subscription\",\n        summary=\"Update Subscription\",",
        "detail": "server.subscriptions.views",
        "documentation": {}
    },
    {
        "label": "SubscriptionCancelView",
        "kind": 6,
        "importPath": "server.subscriptions.views",
        "description": "server.subscriptions.views",
        "peekOfCode": "class SubscriptionCancelView(APIView):\n    \"\"\"إلغاء الاشتراك\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    @extend_schema(\n        operation_id=\"cancel_subscription\",\n        summary=\"إلغاء الاشتراك\",\n        description=\"إلغاء الاشتراك الحالي\",\n        tags=[\"Subscriptions\"],\n    )\n    def post(self, request):",
        "detail": "server.subscriptions.views",
        "documentation": {}
    },
    {
        "label": "SubscriptionChangePlanView",
        "kind": 6,
        "importPath": "server.subscriptions.views",
        "description": "server.subscriptions.views",
        "peekOfCode": "class SubscriptionChangePlanView(APIView):\n    \"\"\"تغيير خطة الاشتراك\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    @extend_schema(\n        operation_id=\"change_subscription_plan\",\n        summary=\"تغيير خطة الاشتراك\",\n        description=\"تغيير إلى خطة اشتراك أخرى\",\n        tags=[\"Subscriptions\"],\n        request=SubscriptionChangePlanSerializer,\n    )",
        "detail": "server.subscriptions.views",
        "documentation": {}
    },
    {
        "label": "SubscriptionUsageView",
        "kind": 6,
        "importPath": "server.subscriptions.views",
        "description": "server.subscriptions.views",
        "peekOfCode": "class SubscriptionUsageView(APIView):\n    \"\"\"استخدام الاشتراك\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    @extend_schema(\n        operation_id=\"get_subscription_usage\",\n        summary=\"استخدام الاشتراك\",\n        description=\"عرض استخدام الاشتراك الحالي\",\n        tags=[\"Subscriptions\"],\n    )\n    def get(self, request):",
        "detail": "server.subscriptions.views",
        "documentation": {}
    },
    {
        "label": "SubscriptionPaymentHistoryView",
        "kind": 6,
        "importPath": "server.subscriptions.views",
        "description": "server.subscriptions.views",
        "peekOfCode": "class SubscriptionPaymentHistoryView(generics.ListAPIView):\n    \"\"\"تاريخ مدفوعات الاشتراك\"\"\"\n    serializer_class = SubscriptionPaymentSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    ordering = ['-created_at']\n    def get_queryset(self):\n        \"\"\"Get user's subscription payments\"\"\"\n        try:\n            subscription = Subscription.objects.get(user=self.request.user)\n            return SubscriptionPayment.objects.filter(subscription=subscription)",
        "detail": "server.subscriptions.views",
        "documentation": {}
    },
    {
        "label": "StripeWebhookView",
        "kind": 6,
        "importPath": "server.subscriptions.views",
        "description": "server.subscriptions.views",
        "peekOfCode": "class StripeWebhookView(APIView):\n    \"\"\"Stripe Webhook Handler\"\"\"\n    permission_classes = []\n    def post(self, request):\n        \"\"\"Handle Stripe webhooks\"\"\"\n        payload = request.body\n        sig_header = request.META.get('HTTP_STRIPE_SIGNATURE')\n        try:\n            event = stripe.Webhook.construct_event(\n                payload, sig_header, settings.STRIPE_WEBHOOK_SECRET",
        "detail": "server.subscriptions.views",
        "documentation": {}
    },
    {
        "label": "subscription_stats",
        "kind": 2,
        "importPath": "server.subscriptions.views",
        "description": "server.subscriptions.views",
        "peekOfCode": "def subscription_stats(request):\n    \"\"\"إحصائيات الاشتراكات\"\"\"\n    user = request.user\n    # Check if user has admin permissions\n    if not user.is_staff:\n        return Response({\n            'error': 'Permission denied'\n        }, status=status.HTTP_403_FORBIDDEN)\n    # Get subscription stats\n    total_subscriptions = Subscription.objects.count()",
        "detail": "server.subscriptions.views",
        "documentation": {}
    },
    {
        "label": "subscription_features",
        "kind": 2,
        "importPath": "server.subscriptions.views",
        "description": "server.subscriptions.views",
        "peekOfCode": "def subscription_features(request):\n    \"\"\"ميزات الاشتراكات\"\"\"\n    features = SubscriptionFeature.objects.all()\n    serializer = SubscriptionFeatureSerializer(features, many=True)\n    return Response(serializer.data)\n@api_view(['POST'])\n@permission_classes([permissions.IsAuthenticated])\ndef check_subscription_limit(request):\n    \"\"\"فحص حدود الاشتراك\"\"\"\n    try:",
        "detail": "server.subscriptions.views",
        "documentation": {}
    },
    {
        "label": "check_subscription_limit",
        "kind": 2,
        "importPath": "server.subscriptions.views",
        "description": "server.subscriptions.views",
        "peekOfCode": "def check_subscription_limit(request):\n    \"\"\"فحص حدود الاشتراك\"\"\"\n    try:\n        subscription = Subscription.objects.get(user=request.user)\n        if not subscription.is_active():\n            return Response({\n                'error': 'Subscription is not active'\n            }, status=status.HTTP_403_FORBIDDEN)\n        usage_type = request.data.get('usage_type')\n        if not usage_type:",
        "detail": "server.subscriptions.views",
        "documentation": {}
    },
    {
        "label": "increment_usage",
        "kind": 2,
        "importPath": "server.subscriptions.views",
        "description": "server.subscriptions.views",
        "peekOfCode": "def increment_usage(request):\n    \"\"\"زيادة استخدام الاشتراك\"\"\"\n    try:\n        subscription = Subscription.objects.get(user=request.user)\n        if not subscription.is_active():\n            return Response({\n                'error': 'Subscription is not active'\n            }, status=status.HTTP_403_FORBIDDEN)\n        usage_type = request.data.get('usage_type')\n        increment = request.data.get('increment', 1)",
        "detail": "server.subscriptions.views",
        "documentation": {}
    },
    {
        "label": "stripe.api_key",
        "kind": 5,
        "importPath": "server.subscriptions.views",
        "description": "server.subscriptions.views",
        "peekOfCode": "stripe.api_key = settings.STRIPE_SECRET_KEY\nclass SubscriptionPlanListView(generics.ListAPIView):\n    \"\"\"قائمة خطط الاشتراكات\"\"\"\n    serializer_class = SubscriptionPlanSerializer\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly]\n    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]\n    filterset_fields = ['user_type', 'plan_type', 'is_active', 'is_popular']\n    search_fields = ['name', 'features']\n    ordering_fields = ['price', 'created_at']\n    ordering = ['user_type', 'price']",
        "detail": "server.subscriptions.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.tasks.migrations.0001_initial",
        "description": "server.tasks.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('projects', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Task',\n            fields=[",
        "detail": "server.tasks.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.tasks.migrations.0002_alter_task_assigned_to",
        "description": "server.tasks.migrations.0002_alter_task_assigned_to",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('tasks', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='task',\n            name='assigned_to',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_assigned_tasks', to=settings.AUTH_USER_MODEL),",
        "detail": "server.tasks.migrations.0002_alter_task_assigned_to",
        "documentation": {}
    },
    {
        "label": "TaskAdmin",
        "kind": 6,
        "importPath": "server.tasks.admin",
        "description": "server.tasks.admin",
        "peekOfCode": "class TaskAdmin(admin.ModelAdmin):\n    list_display = ['title', 'project', 'assigned_to', 'assigned_by', 'status', 'priority', 'due_date', 'progress_bar']\n    list_filter = ['status', 'priority', 'due_date', 'created_at', 'completed_at']\n    search_fields = ['title', 'description', 'project__title', 'assigned_to__username']\n    readonly_fields = ['created_at', 'updated_at', 'completed_at']\n    autocomplete_fields = ['project', 'assigned_to', 'assigned_by']\n    list_editable = ['status', 'priority']\n    fieldsets = [\n        ('معلومات المهمة', {\n            'fields': ('title', 'description', 'project')",
        "detail": "server.tasks.admin",
        "documentation": {}
    },
    {
        "label": "TasksConfig",
        "kind": 6,
        "importPath": "server.tasks.apps",
        "description": "server.tasks.apps",
        "peekOfCode": "class TasksConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'tasks'",
        "detail": "server.tasks.apps",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "server.tasks.models",
        "description": "server.tasks.models",
        "peekOfCode": "class Task(models.Model):\n    \"\"\"المهام\"\"\"\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('in_progress', 'In Progress'),\n        ('completed', 'Completed'),\n        ('cancelled', 'Cancelled'),\n    ]\n    PRIORITY_CHOICES = [\n        ('low', 'Low'),",
        "detail": "server.tasks.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.tasks.models",
        "description": "server.tasks.models",
        "peekOfCode": "User = get_user_model()\nclass Task(models.Model):\n    \"\"\"المهام\"\"\"\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('in_progress', 'In Progress'),\n        ('completed', 'Completed'),\n        ('cancelled', 'Cancelled'),\n    ]\n    PRIORITY_CHOICES = [",
        "detail": "server.tasks.models",
        "documentation": {}
    },
    {
        "label": "TaskSerializer",
        "kind": 6,
        "importPath": "server.tasks.serializers",
        "description": "server.tasks.serializers",
        "peekOfCode": "class TaskSerializer(serializers.ModelSerializer):\n    assigned_to = serializers.SerializerMethodField()\n    assigned_by = serializers.SerializerMethodField()\n    project_info = serializers.SerializerMethodField()\n    class Meta:\n        model = Task\n        fields = [\n            'id', 'title', 'description', 'project_info', 'assigned_to',\n            'assigned_by', 'due_date', 'priority', 'status', 'progress',\n            'created_at', 'updated_at', 'completed_at'",
        "detail": "server.tasks.serializers",
        "documentation": {}
    },
    {
        "label": "TaskCreateSerializer",
        "kind": 6,
        "importPath": "server.tasks.serializers",
        "description": "server.tasks.serializers",
        "peekOfCode": "class TaskCreateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Task\n        fields = [\n            'title', 'description', 'project', 'assigned_to', \n            'due_date', 'priority'\n        ]\n    def create(self, validated_data):\n        validated_data['assigned_by'] = self.context['request'].user\n        return super().create(validated_data)",
        "detail": "server.tasks.serializers",
        "documentation": {}
    },
    {
        "label": "TaskUpdateSerializer",
        "kind": 6,
        "importPath": "server.tasks.serializers",
        "description": "server.tasks.serializers",
        "peekOfCode": "class TaskUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Task\n        fields = [\n            'title', 'description', 'due_date', 'priority', \n            'status', 'progress'\n        ]",
        "detail": "server.tasks.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.tasks.serializers",
        "description": "server.tasks.serializers",
        "peekOfCode": "User = get_user_model()\nclass TaskSerializer(serializers.ModelSerializer):\n    assigned_to = serializers.SerializerMethodField()\n    assigned_by = serializers.SerializerMethodField()\n    project_info = serializers.SerializerMethodField()\n    class Meta:\n        model = Task\n        fields = [\n            'id', 'title', 'description', 'project_info', 'assigned_to',\n            'assigned_by', 'due_date', 'priority', 'status', 'progress',",
        "detail": "server.tasks.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "server.tasks.urls",
        "description": "server.tasks.urls",
        "peekOfCode": "app_name = 'tasks'\nurlpatterns = [\n    # Tasks\n    path('', views.TaskListView.as_view(), name='task_list'),\n    path('<int:pk>/', views.TaskDetailView.as_view(), name='task_detail'),\n    path('create/', views.TaskCreateView.as_view(), name='task_create'),\n    path('<int:pk>/update/', views.TaskUpdateView.as_view(), name='task_update'),\n    path('<int:pk>/delete/', views.TaskDeleteView.as_view(), name='task_delete'),\n    # Task actions\n    path('<int:pk>/complete/', views.complete_task, name='complete_task'),",
        "detail": "server.tasks.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.tasks.urls",
        "description": "server.tasks.urls",
        "peekOfCode": "urlpatterns = [\n    # Tasks\n    path('', views.TaskListView.as_view(), name='task_list'),\n    path('<int:pk>/', views.TaskDetailView.as_view(), name='task_detail'),\n    path('create/', views.TaskCreateView.as_view(), name='task_create'),\n    path('<int:pk>/update/', views.TaskUpdateView.as_view(), name='task_update'),\n    path('<int:pk>/delete/', views.TaskDeleteView.as_view(), name='task_delete'),\n    # Task actions\n    path('<int:pk>/complete/', views.complete_task, name='complete_task'),\n    path('<int:pk>/start/', views.start_task, name='start_task'),",
        "detail": "server.tasks.urls",
        "documentation": {}
    },
    {
        "label": "TaskListView",
        "kind": 6,
        "importPath": "server.tasks.views",
        "description": "server.tasks.views",
        "peekOfCode": "class TaskListView(generics.ListAPIView):\n    \"\"\"قائمة المهام\"\"\"\n    serializer_class = TaskSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, OrderingFilter]\n    filterset_fields = ['status', 'priority', 'project']\n    ordering = ['-created_at']\n    def get_queryset(self):\n        user = self.request.user\n        return Task.objects.filter(",
        "detail": "server.tasks.views",
        "documentation": {}
    },
    {
        "label": "TaskDetailView",
        "kind": 6,
        "importPath": "server.tasks.views",
        "description": "server.tasks.views",
        "peekOfCode": "class TaskDetailView(generics.RetrieveAPIView):\n    \"\"\"تفاصيل المهمة\"\"\"\n    serializer_class = TaskSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        user = self.request.user\n        return Task.objects.filter(\n            Q(assigned_to=user) | Q(assigned_by=user) | Q(project__client=user)\n        ).select_related('assigned_to', 'assigned_by', 'project')\n    @extend_schema(",
        "detail": "server.tasks.views",
        "documentation": {}
    },
    {
        "label": "TaskCreateView",
        "kind": 6,
        "importPath": "server.tasks.views",
        "description": "server.tasks.views",
        "peekOfCode": "class TaskCreateView(generics.CreateAPIView):\n    \"\"\"إنشاء مهمة جديدة\"\"\"\n    serializer_class = TaskCreateSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    @extend_schema(\n        operation_id=\"create_task\",\n        summary=\"Create New Task\",\n        description=\"Create new task\",\n        tags=[\"Tasks\"],\n    )",
        "detail": "server.tasks.views",
        "documentation": {}
    },
    {
        "label": "TaskUpdateView",
        "kind": 6,
        "importPath": "server.tasks.views",
        "description": "server.tasks.views",
        "peekOfCode": "class TaskUpdateView(generics.UpdateAPIView):\n    \"\"\"تحديث المهمة\"\"\"\n    serializer_class = TaskUpdateSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        user = self.request.user\n        return Task.objects.filter(\n            Q(assigned_to=user) | Q(assigned_by=user) | Q(project__client=user)\n        )\n    @extend_schema(",
        "detail": "server.tasks.views",
        "documentation": {}
    },
    {
        "label": "TaskDeleteView",
        "kind": 6,
        "importPath": "server.tasks.views",
        "description": "server.tasks.views",
        "peekOfCode": "class TaskDeleteView(generics.DestroyAPIView):\n    \"\"\"حذف المهمة\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        user = self.request.user\n        return Task.objects.filter(\n            Q(assigned_by=user) | Q(project__client=user)\n        )\n    @extend_schema(\n        operation_id=\"delete_task\",",
        "detail": "server.tasks.views",
        "documentation": {}
    },
    {
        "label": "complete_task",
        "kind": 2,
        "importPath": "server.tasks.views",
        "description": "server.tasks.views",
        "peekOfCode": "def complete_task(request, pk):\n    \"\"\"إكمال المهمة\"\"\"\n    try:\n        task = Task.objects.get(\n            id=pk,\n            assigned_to=request.user\n        )\n        task.status = 'completed'\n        task.progress = 100\n        task.completed_at = timezone.now()",
        "detail": "server.tasks.views",
        "documentation": {}
    },
    {
        "label": "start_task",
        "kind": 2,
        "importPath": "server.tasks.views",
        "description": "server.tasks.views",
        "peekOfCode": "def start_task(request, pk):\n    \"\"\"بدء المهمة\"\"\"\n    try:\n        task = Task.objects.get(\n            id=pk,\n            assigned_to=request.user\n        )\n        task.status = 'in_progress'\n        task.save()\n        return Response({",
        "detail": "server.tasks.views",
        "documentation": {}
    },
    {
        "label": "my_tasks",
        "kind": 2,
        "importPath": "server.tasks.views",
        "description": "server.tasks.views",
        "peekOfCode": "def my_tasks(request):\n    \"\"\"مهامي\"\"\"\n    user = request.user\n    pending_tasks = Task.objects.filter(\n        assigned_to=user,\n        status='pending'\n    ).count()\n    in_progress_tasks = Task.objects.filter(\n        assigned_to=user,\n        status='in_progress'",
        "detail": "server.tasks.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.time_tracking.migrations.0001_initial",
        "description": "server.time_tracking.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('projects', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TimeEntry',\n            fields=[",
        "detail": "server.time_tracking.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.time_tracking.migrations.0002_alter_timeentry_professional",
        "description": "server.time_tracking.migrations.0002_alter_timeentry_professional",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('time_tracking', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='timeentry',\n            name='professional',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_time_entries', to=settings.AUTH_USER_MODEL),",
        "detail": "server.time_tracking.migrations.0002_alter_timeentry_professional",
        "documentation": {}
    },
    {
        "label": "TimeEntryAdmin",
        "kind": 6,
        "importPath": "server.time_tracking.admin",
        "description": "server.time_tracking.admin",
        "peekOfCode": "class TimeEntryAdmin(admin.ModelAdmin):\n    \"\"\"\n    إدارة إدخالات الوقت\n    \"\"\"\n    list_display = (\n        'professional', 'project', 'task', 'date',\n        'duration_formatted', 'total_cost_formatted', 'status'\n    )\n    list_filter = ('status', 'date', 'created_at')\n    search_fields = (",
        "detail": "server.time_tracking.admin",
        "documentation": {}
    },
    {
        "label": "TimeTrackingConfig",
        "kind": 6,
        "importPath": "server.time_tracking.apps",
        "description": "server.time_tracking.apps",
        "peekOfCode": "class TimeTrackingConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'time_tracking'",
        "detail": "server.time_tracking.apps",
        "documentation": {}
    },
    {
        "label": "TimeEntry",
        "kind": 6,
        "importPath": "server.time_tracking.models",
        "description": "server.time_tracking.models",
        "peekOfCode": "class TimeEntry(models.Model):\n    \"\"\"إدخالات الوقت\"\"\"\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('approved', 'Approved'),\n        ('rejected', 'Rejected'),\n    ]\n    project = models.ForeignKey('projects.Project', on_delete=models.CASCADE, related_name='time_entries')\n    professional = models.ForeignKey(User, on_delete=models.CASCADE, related_name='project_time_entries')\n    task = models.CharField(max_length=255)",
        "detail": "server.time_tracking.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.time_tracking.models",
        "description": "server.time_tracking.models",
        "peekOfCode": "User = get_user_model()\nclass TimeEntry(models.Model):\n    \"\"\"إدخالات الوقت\"\"\"\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('approved', 'Approved'),\n        ('rejected', 'Rejected'),\n    ]\n    project = models.ForeignKey('projects.Project', on_delete=models.CASCADE, related_name='time_entries')\n    professional = models.ForeignKey(User, on_delete=models.CASCADE, related_name='project_time_entries')",
        "detail": "server.time_tracking.models",
        "documentation": {}
    },
    {
        "label": "TimeEntrySerializer",
        "kind": 6,
        "importPath": "server.time_tracking.serializers",
        "description": "server.time_tracking.serializers",
        "peekOfCode": "class TimeEntrySerializer(serializers.ModelSerializer):\n    professional = serializers.SerializerMethodField()\n    project_info = serializers.SerializerMethodField()\n    class Meta:\n        model = TimeEntry\n        fields = [\n            'id', 'project_info', 'professional', 'task', 'date',\n            'start_time', 'end_time', 'duration', 'hourly_rate',\n            'total_cost', 'notes', 'status', 'created_at', 'updated_at'\n        ]",
        "detail": "server.time_tracking.serializers",
        "documentation": {}
    },
    {
        "label": "TimeEntryCreateSerializer",
        "kind": 6,
        "importPath": "server.time_tracking.serializers",
        "description": "server.time_tracking.serializers",
        "peekOfCode": "class TimeEntryCreateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TimeEntry\n        fields = [\n            'project', 'task', 'date', 'start_time', 'end_time', 'notes'\n        ]\n    def create(self, validated_data):\n        validated_data['professional'] = self.context['request'].user\n        # Calculate duration and cost\n        start_time = validated_data['start_time']",
        "detail": "server.time_tracking.serializers",
        "documentation": {}
    },
    {
        "label": "TimeEntryUpdateSerializer",
        "kind": 6,
        "importPath": "server.time_tracking.serializers",
        "description": "server.time_tracking.serializers",
        "peekOfCode": "class TimeEntryUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TimeEntry\n        fields = [\n            'task', 'date', 'start_time', 'end_time', 'notes', 'status'\n        ]",
        "detail": "server.time_tracking.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.time_tracking.serializers",
        "description": "server.time_tracking.serializers",
        "peekOfCode": "User = get_user_model()\nclass TimeEntrySerializer(serializers.ModelSerializer):\n    professional = serializers.SerializerMethodField()\n    project_info = serializers.SerializerMethodField()\n    class Meta:\n        model = TimeEntry\n        fields = [\n            'id', 'project_info', 'professional', 'task', 'date',\n            'start_time', 'end_time', 'duration', 'hourly_rate',\n            'total_cost', 'notes', 'status', 'created_at', 'updated_at'",
        "detail": "server.time_tracking.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "server.time_tracking.urls",
        "description": "server.time_tracking.urls",
        "peekOfCode": "app_name = 'time_tracking'\nurlpatterns = [\n    # Time entries\n    path('', views.TimeEntryListView.as_view(), name='time_entry_list'),\n    path('<int:pk>/', views.TimeEntryDetailView.as_view(), name='time_entry_detail'),\n    path('create/', views.TimeEntryCreateView.as_view(), name='time_entry_create'),\n    path('<int:pk>/update/', views.TimeEntryUpdateView.as_view(), name='time_entry_update'),\n    path('<int:pk>/delete/', views.TimeEntryDeleteView.as_view(), name='time_entry_delete'),\n    # Time entry actions\n    path('<int:pk>/approve/', views.approve_time_entry, name='approve_time_entry'),",
        "detail": "server.time_tracking.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.time_tracking.urls",
        "description": "server.time_tracking.urls",
        "peekOfCode": "urlpatterns = [\n    # Time entries\n    path('', views.TimeEntryListView.as_view(), name='time_entry_list'),\n    path('<int:pk>/', views.TimeEntryDetailView.as_view(), name='time_entry_detail'),\n    path('create/', views.TimeEntryCreateView.as_view(), name='time_entry_create'),\n    path('<int:pk>/update/', views.TimeEntryUpdateView.as_view(), name='time_entry_update'),\n    path('<int:pk>/delete/', views.TimeEntryDeleteView.as_view(), name='time_entry_delete'),\n    # Time entry actions\n    path('<int:pk>/approve/', views.approve_time_entry, name='approve_time_entry'),\n    path('<int:pk>/reject/', views.reject_time_entry, name='reject_time_entry'),",
        "detail": "server.time_tracking.urls",
        "documentation": {}
    },
    {
        "label": "TimeEntryListView",
        "kind": 6,
        "importPath": "server.time_tracking.views",
        "description": "server.time_tracking.views",
        "peekOfCode": "class TimeEntryListView(generics.ListAPIView):\n    \"\"\"قائمة إدخالات الوقت\"\"\"\n    serializer_class = TimeEntrySerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, OrderingFilter]\n    filterset_fields = ['status', 'project']\n    ordering = ['-date', '-start_time']\n    def get_queryset(self):\n        user = self.request.user\n        if user.user_type == 'client':",
        "detail": "server.time_tracking.views",
        "documentation": {}
    },
    {
        "label": "TimeEntryDetailView",
        "kind": 6,
        "importPath": "server.time_tracking.views",
        "description": "server.time_tracking.views",
        "peekOfCode": "class TimeEntryDetailView(generics.RetrieveAPIView):\n    \"\"\"تفاصيل إدخال الوقت\"\"\"\n    serializer_class = TimeEntrySerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        user = self.request.user\n        if user.user_type == 'client':\n            return TimeEntry.objects.filter(\n                project__client=user\n            ).select_related('professional', 'project')",
        "detail": "server.time_tracking.views",
        "documentation": {}
    },
    {
        "label": "TimeEntryCreateView",
        "kind": 6,
        "importPath": "server.time_tracking.views",
        "description": "server.time_tracking.views",
        "peekOfCode": "class TimeEntryCreateView(generics.CreateAPIView):\n    \"\"\"إنشاء إدخال وقت جديد\"\"\"\n    serializer_class = TimeEntryCreateSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    @extend_schema(\n        operation_id=\"create_time_entry\",\n        summary=\"Create New Time Entry\",\n        description=\"Create new time entry\",\n        tags=[\"Time Tracking\"],\n    )",
        "detail": "server.time_tracking.views",
        "documentation": {}
    },
    {
        "label": "TimeEntryUpdateView",
        "kind": 6,
        "importPath": "server.time_tracking.views",
        "description": "server.time_tracking.views",
        "peekOfCode": "class TimeEntryUpdateView(generics.UpdateAPIView):\n    \"\"\"تحديث إدخال الوقت\"\"\"\n    serializer_class = TimeEntryUpdateSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        return TimeEntry.objects.filter(professional=self.request.user)\n    @extend_schema(\n        operation_id=\"update_time_entry\",\n        summary=\"Update Time Entry\",\n        description=\"Update existing time entry\",",
        "detail": "server.time_tracking.views",
        "documentation": {}
    },
    {
        "label": "TimeEntryDeleteView",
        "kind": 6,
        "importPath": "server.time_tracking.views",
        "description": "server.time_tracking.views",
        "peekOfCode": "class TimeEntryDeleteView(generics.DestroyAPIView):\n    \"\"\"حذف إدخال الوقت\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        return TimeEntry.objects.filter(professional=self.request.user)\n    @extend_schema(\n        operation_id=\"delete_time_entry\",\n        summary=\"Delete Time Entry\",\n        description=\"Delete existing time entry\",\n        tags=[\"Time Tracking\"],",
        "detail": "server.time_tracking.views",
        "documentation": {}
    },
    {
        "label": "approve_time_entry",
        "kind": 2,
        "importPath": "server.time_tracking.views",
        "description": "server.time_tracking.views",
        "peekOfCode": "def approve_time_entry(request, pk):\n    \"\"\"موافقة على إدخال الوقت\"\"\"\n    try:\n        time_entry = TimeEntry.objects.get(\n            id=pk,\n            project__client=request.user\n        )\n        time_entry.status = 'approved'\n        time_entry.save()\n        return Response({",
        "detail": "server.time_tracking.views",
        "documentation": {}
    },
    {
        "label": "reject_time_entry",
        "kind": 2,
        "importPath": "server.time_tracking.views",
        "description": "server.time_tracking.views",
        "peekOfCode": "def reject_time_entry(request, pk):\n    \"\"\"رفض إدخال الوقت\"\"\"\n    try:\n        time_entry = TimeEntry.objects.get(\n            id=pk,\n            project__client=request.user\n        )\n        time_entry.status = 'rejected'\n        time_entry.save()\n        return Response({",
        "detail": "server.time_tracking.views",
        "documentation": {}
    },
    {
        "label": "time_summary",
        "kind": 2,
        "importPath": "server.time_tracking.views",
        "description": "server.time_tracking.views",
        "peekOfCode": "def time_summary(request):\n    \"\"\"ملخص الوقت\"\"\"\n    user = request.user\n    if user.user_type == 'client':\n        entries = TimeEntry.objects.filter(project__client=user)\n    else:\n        entries = TimeEntry.objects.filter(professional=user)\n    summary = entries.aggregate(\n        total_hours=Sum('duration'),\n        total_cost=Sum('total_cost')",
        "detail": "server.time_tracking.views",
        "documentation": {}
    },
    {
        "label": "slug",
        "kind": 5,
        "importPath": "server.check_project_slug",
        "description": "server.check_project_slug",
        "peekOfCode": "slug = 'project-volt-555555555-7c8b2f0a'\nproject = Project.objects.filter(slug=slug).first()\nif project:\n    print(f\"✅ Project found:\")\n    print(f\"   ID: {project.id}\")\n    print(f\"   Title: {project.title}\")\n    print(f\"   Slug: {project.slug}\")\n    # Check proposals for this project\n    proposals = Proposal.objects.filter(project=project)\n    print(f\"\\n📋 Proposals for this project: {proposals.count()}\")",
        "detail": "server.check_project_slug",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "server.check_project_slug",
        "description": "server.check_project_slug",
        "peekOfCode": "project = Project.objects.filter(slug=slug).first()\nif project:\n    print(f\"✅ Project found:\")\n    print(f\"   ID: {project.id}\")\n    print(f\"   Title: {project.title}\")\n    print(f\"   Slug: {project.slug}\")\n    # Check proposals for this project\n    proposals = Proposal.objects.filter(project=project)\n    print(f\"\\n📋 Proposals for this project: {proposals.count()}\")\n    for i, proposal in enumerate(proposals, 1):",
        "detail": "server.check_project_slug",
        "documentation": {}
    },
    {
        "label": "check_proposals",
        "kind": 2,
        "importPath": "server.check_proposals",
        "description": "server.check_proposals",
        "peekOfCode": "def check_proposals():\n    proposals = Proposal.objects.all()\n    print(f\"📊 Total proposals: {proposals.count()}\")\n    print()\n    for i, proposal in enumerate(proposals[:5], 1):\n        print(f\"🔍 Proposal {i} (ID: {proposal.id}):\")\n        print(f\"   Professional: {proposal.professional.get_full_name()}\")\n        print(f\"   Project: {proposal.project_id}\")\n        print(f\"   Amount: ${proposal.amount}\")\n        if proposal.cover_letter:",
        "detail": "server.check_proposals",
        "documentation": {}
    },
    {
        "label": "check_users",
        "kind": 2,
        "importPath": "server.check_users",
        "description": "server.check_users",
        "peekOfCode": "def check_users():\n    \"\"\"Check existing users in database\"\"\"\n    print(\"=== Checking Users in Database ===\")\n    # Get all users\n    users = User.objects.all()\n    print(f\"Total users: {users.count()}\")\n    for user in users:\n        print(f\"\\nUser ID: {user.id}\")\n        print(f\"Username: {user.username}\")\n        print(f\"Email: {user.email}\")",
        "detail": "server.check_users",
        "documentation": {}
    },
    {
        "label": "test_login",
        "kind": 2,
        "importPath": "server.check_users",
        "description": "server.check_users",
        "peekOfCode": "def test_login(email, password):\n    \"\"\"Test login with specific credentials\"\"\"\n    print(f\"\\n=== Testing Login ===\")\n    print(f\"Email: {email}\")\n    print(f\"Password: {password}\")\n    try:\n        # Check if user exists\n        user = User.objects.get(email=email)\n        print(f\"User found: {user.username}\")\n        print(f\"User is active: {user.is_active}\")",
        "detail": "server.check_users",
        "documentation": {}
    },
    {
        "label": "create_user_if_not_exists",
        "kind": 2,
        "importPath": "server.check_users",
        "description": "server.check_users",
        "peekOfCode": "def create_user_if_not_exists(email, password, first_name=\"Test\", last_name=\"User\"):\n    \"\"\"Create user if not exists\"\"\"\n    print(f\"\\n=== Creating User if not exists ===\")\n    print(f\"Email: {email}\")\n    try:\n        # Check if user exists\n        if User.objects.filter(email=email).exists():\n            print(f\"User already exists: {email}\")\n            return False\n        # Create user",
        "detail": "server.check_users",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.check_users",
        "description": "server.check_users",
        "peekOfCode": "User = get_user_model()\ndef check_users():\n    \"\"\"Check existing users in database\"\"\"\n    print(\"=== Checking Users in Database ===\")\n    # Get all users\n    users = User.objects.all()\n    print(f\"Total users: {users.count()}\")\n    for user in users:\n        print(f\"\\nUser ID: {user.id}\")\n        print(f\"Username: {user.username}\")",
        "detail": "server.check_users",
        "documentation": {}
    },
    {
        "label": "create_categories",
        "kind": 2,
        "importPath": "server.create_categories",
        "description": "server.create_categories",
        "peekOfCode": "def create_categories():\n    categories_data = [\n        {\n            'name': 'Kitchen Remodeling',\n            'description': 'Complete kitchen renovations and upgrades',\n            'icon': 'fas fa-utensils',\n            'order': 1\n        },\n        {\n            'name': 'Bathroom Renovation',",
        "detail": "server.create_categories",
        "documentation": {}
    },
    {
        "label": "create_english_users",
        "kind": 2,
        "importPath": "server.create_english_data",
        "description": "server.create_english_data",
        "peekOfCode": "def create_english_users():\n    \"\"\"Create English sample users\"\"\"\n    print(\"👥 Creating English sample users...\")\n    users_data = [\n        {\n            'username': 'john_admin',\n            'email': 'john.admin@alist.com',\n            'first_name': 'John',\n            'last_name': 'Administrator',\n            'user_type': 'admin',",
        "detail": "server.create_english_data",
        "documentation": {}
    },
    {
        "label": "generate_english_api_examples",
        "kind": 2,
        "importPath": "server.create_english_data",
        "description": "server.create_english_data",
        "peekOfCode": "def generate_english_api_examples():\n    \"\"\"Generate English API usage examples\"\"\"\n    print(\"📝 Generating English API examples...\")\n    examples = {\n        \"authentication\": {\n            \"register_user\": {\n                \"endpoint\": \"POST /api/auth/register/\",\n                \"description\": \"Register a new user account\",\n                \"sample_data\": {\n                    \"username\": \"new_professional\",",
        "detail": "server.create_english_data",
        "documentation": {}
    },
    {
        "label": "create_postman_collection_english",
        "kind": 2,
        "importPath": "server.create_english_data",
        "description": "server.create_english_data",
        "peekOfCode": "def create_postman_collection_english():\n    \"\"\"Create English Postman collection\"\"\"\n    print(\"📮 Creating English Postman collection...\")\n    collection = {\n        \"info\": {\n            \"name\": \"A-List Home Professionals API - English\",\n            \"description\": \"Complete API collection for A-List platform with English sample data\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n        },\n        \"auth\": {",
        "detail": "server.create_english_data",
        "documentation": {}
    },
    {
        "label": "print_english_usage_guide",
        "kind": 2,
        "importPath": "server.create_english_data",
        "description": "server.create_english_data",
        "peekOfCode": "def print_english_usage_guide():\n    \"\"\"Print comprehensive English usage guide\"\"\"\n    print(\"\\n\" + \"=\"*60)\n    print(\"🚀 A-List API - English Usage Guide\")\n    print(\"=\"*60)\n    print(\"\\n🔑 Login Credentials (All users: password123):\")\n    print(\"• Admin: john.admin@alist.com\")\n    print(\"• Client: sarah.client@example.com\") \n    print(\"• Professional: mike.pro@example.com\")\n    print(\"• Specialist: lisa.specialist@example.com\")",
        "detail": "server.create_english_data",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "server.create_english_data",
        "description": "server.create_english_data",
        "peekOfCode": "def main():\n    \"\"\"Main function\"\"\"\n    print(\"🇺🇸 A-List English Data Creator\")\n    print(\"=\"*50)\n    # Create English users\n    users = create_english_users()\n    # Generate API examples\n    examples = generate_english_api_examples()\n    # Create Postman collection\n    create_postman_collection_english()",
        "detail": "server.create_english_data",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.create_english_data",
        "description": "server.create_english_data",
        "peekOfCode": "User = get_user_model()\ndef create_english_users():\n    \"\"\"Create English sample users\"\"\"\n    print(\"👥 Creating English sample users...\")\n    users_data = [\n        {\n            'username': 'john_admin',\n            'email': 'john.admin@alist.com',\n            'first_name': 'John',\n            'last_name': 'Administrator',",
        "detail": "server.create_english_data",
        "documentation": {}
    },
    {
        "label": "create_sample_countries",
        "kind": 2,
        "importPath": "server.create_sample_locations",
        "description": "server.create_sample_locations",
        "peekOfCode": "def create_sample_countries():\n    \"\"\"Create sample countries\"\"\"\n    countries_data = [\n        {\n            'name': 'United States',\n            'code': 'US',\n            'currency': 'USD',\n            'is_active': True\n        },\n        {",
        "detail": "server.create_sample_locations",
        "documentation": {}
    },
    {
        "label": "create_sample_cities",
        "kind": 2,
        "importPath": "server.create_sample_locations",
        "description": "server.create_sample_locations",
        "peekOfCode": "def create_sample_cities():\n    \"\"\"Create sample cities\"\"\"\n    cities_data = [\n        # United States\n        {'name': 'New York', 'country_code': 'US'},\n        {'name': 'Los Angeles', 'country_code': 'US'},\n        {'name': 'Chicago', 'country_code': 'US'},\n        {'name': 'Houston', 'country_code': 'US'},\n        {'name': 'Phoenix', 'country_code': 'US'},\n        {'name': 'Philadelphia', 'country_code': 'US'},",
        "detail": "server.create_sample_locations",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "server.create_sample_locations",
        "description": "server.create_sample_locations",
        "peekOfCode": "def main():\n    \"\"\"Main function to create sample data\"\"\"\n    print(\"Creating sample countries...\")\n    countries = create_sample_countries()\n    print(f\"Created {len(countries)} countries\")\n    print(\"\\nCreating sample cities...\")\n    cities = create_sample_cities()\n    print(f\"Created {len(cities)} cities\")\n    print(\"\\nSample data creation completed!\")\nif __name__ == '__main__':",
        "detail": "server.create_sample_locations",
        "documentation": {}
    },
    {
        "label": "create_sample_projects",
        "kind": 2,
        "importPath": "server.create_sample_projects",
        "description": "server.create_sample_projects",
        "peekOfCode": "def create_sample_projects():\n    # Get or create a client user\n    client, created = User.objects.get_or_create(\n        username='client_demo',\n        defaults={\n            'email': 'client@demo.com',\n            'first_name': 'Sarah',\n            'last_name': 'Johnson',\n            'user_type': 'client',\n            'phone': '+1-555-0123',",
        "detail": "server.create_sample_projects",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.create_sample_projects",
        "description": "server.create_sample_projects",
        "peekOfCode": "User = get_user_model()\ndef create_sample_projects():\n    # Get or create a client user\n    client, created = User.objects.get_or_create(\n        username='client_demo',\n        defaults={\n            'email': 'client@demo.com',\n            'first_name': 'Sarah',\n            'last_name': 'Johnson',\n            'user_type': 'client',",
        "detail": "server.create_sample_projects",
        "documentation": {}
    },
    {
        "label": "create_sample_proposals",
        "kind": 2,
        "importPath": "server.create_sample_proposals",
        "description": "server.create_sample_proposals",
        "peekOfCode": "def create_sample_proposals():\n    \"\"\"Create sample proposals for testing\"\"\"\n    # Get the project with slug 'gg-3e277d84'\n    try:\n        project = Project.objects.get(slug='gg-3e277d84')\n        print(f\"Found project: {project.title}\")\n    except Project.DoesNotExist:\n        print(\"Project with slug 'gg-3e277d84' not found\")\n        return\n    # Get some professionals",
        "detail": "server.create_sample_proposals",
        "documentation": {}
    },
    {
        "label": "create_test_project",
        "kind": 2,
        "importPath": "server.create_test_project",
        "description": "server.create_test_project",
        "peekOfCode": "def create_test_project():\n    # Create or get a test user (client)\n    client, created = User.objects.get_or_create(\n        email='test_client@example.com',\n        defaults={\n            'first_name': 'أحمد',\n            'last_name': 'محمد',\n            'user_type': 'client',\n            'is_verified': True,\n            'location': 'الرياض، السعودية',",
        "detail": "server.create_test_project",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.create_test_project",
        "description": "server.create_test_project",
        "peekOfCode": "User = get_user_model()\ndef create_test_project():\n    # Create or get a test user (client)\n    client, created = User.objects.get_or_create(\n        email='test_client@example.com',\n        defaults={\n            'first_name': 'أحمد',\n            'last_name': 'محمد',\n            'user_type': 'client',\n            'is_verified': True,",
        "detail": "server.create_test_project",
        "documentation": {}
    },
    {
        "label": "create_test_user",
        "kind": 2,
        "importPath": "server.create_test_user",
        "description": "server.create_test_user",
        "peekOfCode": "def create_test_user():\n    \"\"\"Create a test user for login testing\"\"\"\n    try:\n        # Check if user already exists\n        user, created = User.objects.get_or_create(\n            email='client@test.com',\n            defaults={\n                'username': 'client_test',\n                'first_name': 'Test',\n                'last_name': 'Client',",
        "detail": "server.create_test_user",
        "documentation": {}
    },
    {
        "label": "fix_project_slugs",
        "kind": 2,
        "importPath": "server.fix_project_slugs",
        "description": "server.fix_project_slugs",
        "peekOfCode": "def fix_project_slugs():\n    \"\"\"Fix missing project slugs\"\"\"\n    projects_without_slug = Project.objects.filter(slug__isnull=True) | Project.objects.filter(slug='')\n    print(f\"Found {projects_without_slug.count()} projects without slugs\")\n    for project in projects_without_slug:\n        # Generate slug from title\n        base_slug = slugify(project.title)\n        unique_slug = f\"{base_slug}-{str(uuid.uuid4())[:8]}\"\n        # Ensure uniqueness\n        counter = 1",
        "detail": "server.fix_project_slugs",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "server.manage",
        "description": "server.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'alist_backend.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "server.manage",
        "documentation": {}
    },
    {
        "label": "db_path",
        "kind": 5,
        "importPath": "check_db_tables",
        "description": "check_db_tables",
        "peekOfCode": "db_path = 'server/db.sqlite3'\nconn = sqlite3.connect(db_path)\ncursor = conn.cursor()\ntry:\n    # Get all tables\n    cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table';\")\n    tables = cursor.fetchall()\n    print(\"All tables:\")\n    for table in tables:\n        print(f\"  - {table[0]}\")",
        "detail": "check_db_tables",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "check_db_tables",
        "description": "check_db_tables",
        "peekOfCode": "conn = sqlite3.connect(db_path)\ncursor = conn.cursor()\ntry:\n    # Get all tables\n    cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table';\")\n    tables = cursor.fetchall()\n    print(\"All tables:\")\n    for table in tables:\n        print(f\"  - {table[0]}\")\n    print(\"\\nUser-related tables:\")",
        "detail": "check_db_tables",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "check_db_tables",
        "description": "check_db_tables",
        "peekOfCode": "cursor = conn.cursor()\ntry:\n    # Get all tables\n    cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table';\")\n    tables = cursor.fetchall()\n    print(\"All tables:\")\n    for table in tables:\n        print(f\"  - {table[0]}\")\n    print(\"\\nUser-related tables:\")\n    for table in tables:",
        "detail": "check_db_tables",
        "documentation": {}
    },
    {
        "label": "email",
        "kind": 5,
        "importPath": "create_home_pro_user",
        "description": "create_home_pro_user",
        "peekOfCode": "email = 'testpro@test.com'\npassword = 'testpass123'\ntry:\n    # Check if user already exists\n    if User.objects.filter(email=email).exists():\n        user = User.objects.get(email=email)\n        print(f'User {email} already exists')\n    else:\n        # Create new user\n        user = User.objects.create_user(",
        "detail": "create_home_pro_user",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "create_home_pro_user",
        "description": "create_home_pro_user",
        "peekOfCode": "password = 'testpass123'\ntry:\n    # Check if user already exists\n    if User.objects.filter(email=email).exists():\n        user = User.objects.get(email=email)\n        print(f'User {email} already exists')\n    else:\n        # Create new user\n        user = User.objects.create_user(\n            username=email,",
        "detail": "create_home_pro_user",
        "documentation": {}
    },
    {
        "label": "db_path",
        "kind": 5,
        "importPath": "reset_password",
        "description": "reset_password",
        "peekOfCode": "db_path = 'server/db.sqlite3'\nconn = sqlite3.connect(db_path)\ncursor = conn.cursor()\n# Find the user\nemail = 'homepro1@test.com'\nnew_password = 'testpass123'\ntry:\n    # Get user info from users table\n    cursor.execute(\"SELECT id, username, user_type FROM users WHERE email = ?\", (email,))\n    user_result = cursor.fetchone()",
        "detail": "reset_password",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "reset_password",
        "description": "reset_password",
        "peekOfCode": "conn = sqlite3.connect(db_path)\ncursor = conn.cursor()\n# Find the user\nemail = 'homepro1@test.com'\nnew_password = 'testpass123'\ntry:\n    # Get user info from users table\n    cursor.execute(\"SELECT id, username, user_type FROM users WHERE email = ?\", (email,))\n    user_result = cursor.fetchone()\n    if user_result:",
        "detail": "reset_password",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "reset_password",
        "description": "reset_password",
        "peekOfCode": "cursor = conn.cursor()\n# Find the user\nemail = 'homepro1@test.com'\nnew_password = 'testpass123'\ntry:\n    # Get user info from users table\n    cursor.execute(\"SELECT id, username, user_type FROM users WHERE email = ?\", (email,))\n    user_result = cursor.fetchone()\n    if user_result:\n        user_id, username, user_type = user_result",
        "detail": "reset_password",
        "documentation": {}
    },
    {
        "label": "email",
        "kind": 5,
        "importPath": "reset_password",
        "description": "reset_password",
        "peekOfCode": "email = 'homepro1@test.com'\nnew_password = 'testpass123'\ntry:\n    # Get user info from users table\n    cursor.execute(\"SELECT id, username, user_type FROM users WHERE email = ?\", (email,))\n    user_result = cursor.fetchone()\n    if user_result:\n        user_id, username, user_type = user_result\n        print(f\"Found user: {username} (ID: {user_id})\")\n        print(f\"User type: {user_type}\")",
        "detail": "reset_password",
        "documentation": {}
    },
    {
        "label": "new_password",
        "kind": 5,
        "importPath": "reset_password",
        "description": "reset_password",
        "peekOfCode": "new_password = 'testpass123'\ntry:\n    # Get user info from users table\n    cursor.execute(\"SELECT id, username, user_type FROM users WHERE email = ?\", (email,))\n    user_result = cursor.fetchone()\n    if user_result:\n        user_id, username, user_type = user_result\n        print(f\"Found user: {username} (ID: {user_id})\")\n        print(f\"User type: {user_type}\")\n        # Create a Django-compatible PBKDF2 hash",
        "detail": "reset_password",
        "documentation": {}
    },
    {
        "label": "test_availability_api",
        "kind": 2,
        "importPath": "test_availability_api",
        "description": "test_availability_api",
        "peekOfCode": "def test_availability_api():\n    print(\"🔍 اختبار API الـ availability...\")\n    # 1. تسجيل الدخول\n    print(\"\\n1️⃣ تسجيل الدخول...\")\n    # Use the updated password\n    login_data = {\n        'email': 'homepro1@test.com',\n        'password': 'testpass123'\n    }\n    print(f\"Trying login with: {login_data['email']}\")",
        "detail": "test_availability_api",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "test_availability_api",
        "description": "test_availability_api",
        "peekOfCode": "BASE_URL = \"http://localhost:8000/api\"\nLOGIN_URL = f\"{BASE_URL}/auth/login/\"\nAVAILABILITY_GET_URL = f\"{BASE_URL}/calendar/availability/\"\nAVAILABILITY_SAVE_URL = f\"{BASE_URL}/calendar/availability/save/\"\ndef test_availability_api():\n    print(\"🔍 اختبار API الـ availability...\")\n    # 1. تسجيل الدخول\n    print(\"\\n1️⃣ تسجيل الدخول...\")\n    # Use the updated password\n    login_data = {",
        "detail": "test_availability_api",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "test_availability_api",
        "description": "test_availability_api",
        "peekOfCode": "LOGIN_URL = f\"{BASE_URL}/auth/login/\"\nAVAILABILITY_GET_URL = f\"{BASE_URL}/calendar/availability/\"\nAVAILABILITY_SAVE_URL = f\"{BASE_URL}/calendar/availability/save/\"\ndef test_availability_api():\n    print(\"🔍 اختبار API الـ availability...\")\n    # 1. تسجيل الدخول\n    print(\"\\n1️⃣ تسجيل الدخول...\")\n    # Use the updated password\n    login_data = {\n        'email': 'homepro1@test.com',",
        "detail": "test_availability_api",
        "documentation": {}
    },
    {
        "label": "AVAILABILITY_GET_URL",
        "kind": 5,
        "importPath": "test_availability_api",
        "description": "test_availability_api",
        "peekOfCode": "AVAILABILITY_GET_URL = f\"{BASE_URL}/calendar/availability/\"\nAVAILABILITY_SAVE_URL = f\"{BASE_URL}/calendar/availability/save/\"\ndef test_availability_api():\n    print(\"🔍 اختبار API الـ availability...\")\n    # 1. تسجيل الدخول\n    print(\"\\n1️⃣ تسجيل الدخول...\")\n    # Use the updated password\n    login_data = {\n        'email': 'homepro1@test.com',\n        'password': 'testpass123'",
        "detail": "test_availability_api",
        "documentation": {}
    },
    {
        "label": "AVAILABILITY_SAVE_URL",
        "kind": 5,
        "importPath": "test_availability_api",
        "description": "test_availability_api",
        "peekOfCode": "AVAILABILITY_SAVE_URL = f\"{BASE_URL}/calendar/availability/save/\"\ndef test_availability_api():\n    print(\"🔍 اختبار API الـ availability...\")\n    # 1. تسجيل الدخول\n    print(\"\\n1️⃣ تسجيل الدخول...\")\n    # Use the updated password\n    login_data = {\n        'email': 'homepro1@test.com',\n        'password': 'testpass123'\n    }",
        "detail": "test_availability_api",
        "documentation": {}
    }
]