# Generated by Django 4.2.7 on 2025-07-15 15:16

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('client', 'Client'), ('home_pro', 'Home Pro'), ('specialist', 'A-List Specialist'), ('crew_member', 'Crew Member')], default='client', help_text='Type of user account', max_length=20)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Phone number with country code', max_length=128, null=True, region=None)),
                ('location', models.CharField(blank=True, help_text='User location/address', max_length=255)),
                ('avatar', models.ImageField(blank=True, help_text='User profile picture', null=True, upload_to='avatars/')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether user is verified')),
                ('verification_status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('rejected', 'Rejected')], default='pending', help_text='Verification status', max_length=20)),
                ('company_name', models.CharField(blank=True, help_text='Company or business name', max_length=255)),
                ('bio', models.TextField(blank=True, help_text='User biography or description')),
                ('website', models.URLField(blank=True, help_text='Website URL')),
                ('experience_years', models.PositiveIntegerField(blank=True, help_text='Years of experience', null=True)),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Hourly rate in USD', max_digits=10, null=True)),
                ('skills', models.JSONField(blank=True, default=list, help_text='List of skills and expertise')),
                ('rating_average', models.DecimalField(decimal_places=2, default=0.0, help_text='Average rating from reviews', max_digits=3)),
                ('rating_count', models.PositiveIntegerField(default=0, help_text='Total number of ratings')),
                ('is_available', models.BooleanField(default=True, help_text='Whether user is available for work')),
                ('last_activity', models.DateTimeField(auto_now=True, help_text='Last activity timestamp')),
                ('license_number', models.CharField(blank=True, help_text='Professional license number', max_length=100)),
                ('insurance_verified', models.BooleanField(default=False, help_text='Whether insurance is verified')),
                ('background_check_verified', models.BooleanField(default=False, help_text='Whether background check is verified')),
                ('notification_preferences', models.JSONField(blank=True, default=dict, help_text='User notification preferences')),
                ('projects_completed', models.PositiveIntegerField(default=0, help_text='Number of completed projects')),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0.0, help_text='Total earnings from platform', max_digits=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('linkedin_url', models.URLField(blank=True)),
                ('facebook_url', models.URLField(blank=True)),
                ('instagram_url', models.URLField(blank=True)),
                ('twitter_url', models.URLField(blank=True)),
                ('portfolio_images', models.JSONField(blank=True, default=list, help_text='List of portfolio image URLs')),
                ('certifications', models.JSONField(blank=True, default=list, help_text='List of certifications')),
                ('emergency_contact_name', models.CharField(blank=True, help_text='Emergency contact name', max_length=255)),
                ('emergency_contact_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Emergency contact phone', max_length=128, null=True, region=None)),
                ('business_address', models.TextField(blank=True, help_text='Business address')),
                ('tax_id', models.CharField(blank=True, help_text='Tax identification number', max_length=50)),
                ('bank_account_info', models.JSONField(blank=True, default=dict, help_text='Encrypted banking information')),
                ('availability_schedule', models.JSONField(blank=True, default=dict, help_text='Weekly availability schedule')),
                ('service_areas', models.JSONField(blank=True, default=list, help_text='List of service areas/locations')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'db_table': 'user_profiles',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['user_type'], name='users_user_ty_578f8f_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_verified'], name='users_is_veri_63cd6e_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['location'], name='users_locatio_bd9f26_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['rating_average'], name='users_rating__cbcdf1_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='users_created_6541e9_idx'),
        ),
    ]
